// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newDataShare(db *gorm.DB, opts ...gen.DOOption) dataShare {
	_dataShare := dataShare{}

	_dataShare.dataShareDo.UseDB(db, opts...)
	_dataShare.dataShareDo.UseModel(&model.DataShare{})

	tableName := _dataShare.dataShareDo.TableName()
	_dataShare.ALL = field.NewAsterisk(tableName)
	_dataShare.ID = field.NewInt64(tableName, "id")
	_dataShare.CreateAt = field.NewTime(tableName, "create_at")
	_dataShare.UpdateTime = field.NewTime(tableName, "update_time")
	_dataShare.DeleteTime = field.NewTime(tableName, "delete_time")
	_dataShare.BuyerNode = field.NewString(tableName, "buyer_node")
	_dataShare.SellerNode = field.NewString(tableName, "seller_node")
	_dataShare.BuyerID = field.NewInt64(tableName, "buyer_id")
	_dataShare.SellerID = field.NewInt64(tableName, "seller_id")
	_dataShare.TradeID = field.NewString(tableName, "trade_id")
	_dataShare.TradePrice = field.NewFloat64(tableName, "trade_price")
	_dataShare.SellerApprove = field.NewString(tableName, "seller_approve")
	_dataShare.DataID = field.NewString(tableName, "data_id")

	_dataShare.fillFieldMap()

	return _dataShare
}

// dataShare 请求共享和审核来自哪个业务应用
type dataShare struct {
	dataShareDo dataShareDo

	ALL           field.Asterisk
	ID            field.Int64   // 数据id
	CreateAt      field.Time    // 创建时间
	UpdateTime    field.Time    // 更新时间
	DeleteTime    field.Time    // 删除时间
	BuyerNode     field.String  // 买家节点
	SellerNode    field.String  // 卖家节点
	BuyerID       field.Int64   // 买家id
	SellerID      field.Int64   // 卖家id
	TradeID       field.String  // 交易编号
	TradePrice    field.Float64 // 交易价格
	SellerApprove field.String  // 1表示卖家审核 0表示卖家为审核
	DataID        field.String  // 数据id

	fieldMap map[string]field.Expr
}

func (d dataShare) Table(newTableName string) *dataShare {
	d.dataShareDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dataShare) As(alias string) *dataShare {
	d.dataShareDo.DO = *(d.dataShareDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dataShare) updateTableName(table string) *dataShare {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.CreateAt = field.NewTime(table, "create_at")
	d.UpdateTime = field.NewTime(table, "update_time")
	d.DeleteTime = field.NewTime(table, "delete_time")
	d.BuyerNode = field.NewString(table, "buyer_node")
	d.SellerNode = field.NewString(table, "seller_node")
	d.BuyerID = field.NewInt64(table, "buyer_id")
	d.SellerID = field.NewInt64(table, "seller_id")
	d.TradeID = field.NewString(table, "trade_id")
	d.TradePrice = field.NewFloat64(table, "trade_price")
	d.SellerApprove = field.NewString(table, "seller_approve")
	d.DataID = field.NewString(table, "data_id")

	d.fillFieldMap()

	return d
}

func (d *dataShare) WithContext(ctx context.Context) IDataShareDo {
	return d.dataShareDo.WithContext(ctx)
}

func (d dataShare) TableName() string { return d.dataShareDo.TableName() }

func (d dataShare) Alias() string { return d.dataShareDo.Alias() }

func (d dataShare) Columns(cols ...field.Expr) gen.Columns { return d.dataShareDo.Columns(cols...) }

func (d *dataShare) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dataShare) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 12)
	d.fieldMap["id"] = d.ID
	d.fieldMap["create_at"] = d.CreateAt
	d.fieldMap["update_time"] = d.UpdateTime
	d.fieldMap["delete_time"] = d.DeleteTime
	d.fieldMap["buyer_node"] = d.BuyerNode
	d.fieldMap["seller_node"] = d.SellerNode
	d.fieldMap["buyer_id"] = d.BuyerID
	d.fieldMap["seller_id"] = d.SellerID
	d.fieldMap["trade_id"] = d.TradeID
	d.fieldMap["trade_price"] = d.TradePrice
	d.fieldMap["seller_approve"] = d.SellerApprove
	d.fieldMap["data_id"] = d.DataID
}

func (d dataShare) clone(db *gorm.DB) dataShare {
	d.dataShareDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dataShare) replaceDB(db *gorm.DB) dataShare {
	d.dataShareDo.ReplaceDB(db)
	return d
}

type dataShareDo struct{ gen.DO }

type IDataShareDo interface {
	gen.SubQuery
	Debug() IDataShareDo
	WithContext(ctx context.Context) IDataShareDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDataShareDo
	WriteDB() IDataShareDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDataShareDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDataShareDo
	Not(conds ...gen.Condition) IDataShareDo
	Or(conds ...gen.Condition) IDataShareDo
	Select(conds ...field.Expr) IDataShareDo
	Where(conds ...gen.Condition) IDataShareDo
	Order(conds ...field.Expr) IDataShareDo
	Distinct(cols ...field.Expr) IDataShareDo
	Omit(cols ...field.Expr) IDataShareDo
	Join(table schema.Tabler, on ...field.Expr) IDataShareDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDataShareDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDataShareDo
	Group(cols ...field.Expr) IDataShareDo
	Having(conds ...gen.Condition) IDataShareDo
	Limit(limit int) IDataShareDo
	Offset(offset int) IDataShareDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDataShareDo
	Unscoped() IDataShareDo
	Create(values ...*model.DataShare) error
	CreateInBatches(values []*model.DataShare, batchSize int) error
	Save(values ...*model.DataShare) error
	First() (*model.DataShare, error)
	Take() (*model.DataShare, error)
	Last() (*model.DataShare, error)
	Find() ([]*model.DataShare, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataShare, err error)
	FindInBatches(result *[]*model.DataShare, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DataShare) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDataShareDo
	Assign(attrs ...field.AssignExpr) IDataShareDo
	Joins(fields ...field.RelationField) IDataShareDo
	Preload(fields ...field.RelationField) IDataShareDo
	FirstOrInit() (*model.DataShare, error)
	FirstOrCreate() (*model.DataShare, error)
	FindByPage(offset int, limit int) (result []*model.DataShare, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDataShareDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dataShareDo) Debug() IDataShareDo {
	return d.withDO(d.DO.Debug())
}

func (d dataShareDo) WithContext(ctx context.Context) IDataShareDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dataShareDo) ReadDB() IDataShareDo {
	return d.Clauses(dbresolver.Read)
}

func (d dataShareDo) WriteDB() IDataShareDo {
	return d.Clauses(dbresolver.Write)
}

func (d dataShareDo) Session(config *gorm.Session) IDataShareDo {
	return d.withDO(d.DO.Session(config))
}

func (d dataShareDo) Clauses(conds ...clause.Expression) IDataShareDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dataShareDo) Returning(value interface{}, columns ...string) IDataShareDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dataShareDo) Not(conds ...gen.Condition) IDataShareDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dataShareDo) Or(conds ...gen.Condition) IDataShareDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dataShareDo) Select(conds ...field.Expr) IDataShareDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dataShareDo) Where(conds ...gen.Condition) IDataShareDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dataShareDo) Order(conds ...field.Expr) IDataShareDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dataShareDo) Distinct(cols ...field.Expr) IDataShareDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dataShareDo) Omit(cols ...field.Expr) IDataShareDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dataShareDo) Join(table schema.Tabler, on ...field.Expr) IDataShareDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dataShareDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDataShareDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dataShareDo) RightJoin(table schema.Tabler, on ...field.Expr) IDataShareDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dataShareDo) Group(cols ...field.Expr) IDataShareDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dataShareDo) Having(conds ...gen.Condition) IDataShareDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dataShareDo) Limit(limit int) IDataShareDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dataShareDo) Offset(offset int) IDataShareDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dataShareDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDataShareDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dataShareDo) Unscoped() IDataShareDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dataShareDo) Create(values ...*model.DataShare) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dataShareDo) CreateInBatches(values []*model.DataShare, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dataShareDo) Save(values ...*model.DataShare) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dataShareDo) First() (*model.DataShare, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataShare), nil
	}
}

func (d dataShareDo) Take() (*model.DataShare, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataShare), nil
	}
}

func (d dataShareDo) Last() (*model.DataShare, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataShare), nil
	}
}

func (d dataShareDo) Find() ([]*model.DataShare, error) {
	result, err := d.DO.Find()
	return result.([]*model.DataShare), err
}

func (d dataShareDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataShare, err error) {
	buf := make([]*model.DataShare, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dataShareDo) FindInBatches(result *[]*model.DataShare, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dataShareDo) Attrs(attrs ...field.AssignExpr) IDataShareDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dataShareDo) Assign(attrs ...field.AssignExpr) IDataShareDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dataShareDo) Joins(fields ...field.RelationField) IDataShareDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dataShareDo) Preload(fields ...field.RelationField) IDataShareDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dataShareDo) FirstOrInit() (*model.DataShare, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataShare), nil
	}
}

func (d dataShareDo) FirstOrCreate() (*model.DataShare, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataShare), nil
	}
}

func (d dataShareDo) FindByPage(offset int, limit int) (result []*model.DataShare, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dataShareDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dataShareDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dataShareDo) Delete(models ...*model.DataShare) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dataShareDo) withDO(do gen.Dao) *dataShareDo {
	d.DO = *do.(*gen.DO)
	return d
}

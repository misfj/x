// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newNodeLog(db *gorm.DB, opts ...gen.DOOption) nodeLog {
	_nodeLog := nodeLog{}

	_nodeLog.nodeLogDo.UseDB(db, opts...)
	_nodeLog.nodeLogDo.UseModel(&model.NodeLog{})

	tableName := _nodeLog.nodeLogDo.TableName()
	_nodeLog.ALL = field.NewAsterisk(tableName)
	_nodeLog.ID = field.NewInt64(tableName, "id")
	_nodeLog.CreateAt = field.NewTime(tableName, "create_at")
	_nodeLog.UpdateAt = field.NewTime(tableName, "update_at")
	_nodeLog.DeleteAt = field.NewTime(tableName, "delete_at")
	_nodeLog.NodeIDSender = field.NewString(tableName, "node_id_sender")
	_nodeLog.NodeIDReader = field.NewString(tableName, "node_id_reader")
	_nodeLog.MsgBody = field.NewString(tableName, "msg_body")
	_nodeLog.ErrMsg = field.NewString(tableName, "err_msg")

	_nodeLog.fillFieldMap()

	return _nodeLog
}

// nodeLog 记录节点的通信记录
type nodeLog struct {
	nodeLogDo nodeLogDo

	ALL          field.Asterisk
	ID           field.Int64  // 数据id
	CreateAt     field.Time   // 创建时间
	UpdateAt     field.Time   // 更新时间
	DeleteAt     field.Time   // 删除时间
	NodeIDSender field.String // 发送的节点id
	NodeIDReader field.String // 接受的节点id
	MsgBody      field.String // 消息内容
	ErrMsg       field.String // 发送消息是否成功

	fieldMap map[string]field.Expr
}

func (n nodeLog) Table(newTableName string) *nodeLog {
	n.nodeLogDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nodeLog) As(alias string) *nodeLog {
	n.nodeLogDo.DO = *(n.nodeLogDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nodeLog) updateTableName(table string) *nodeLog {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewInt64(table, "id")
	n.CreateAt = field.NewTime(table, "create_at")
	n.UpdateAt = field.NewTime(table, "update_at")
	n.DeleteAt = field.NewTime(table, "delete_at")
	n.NodeIDSender = field.NewString(table, "node_id_sender")
	n.NodeIDReader = field.NewString(table, "node_id_reader")
	n.MsgBody = field.NewString(table, "msg_body")
	n.ErrMsg = field.NewString(table, "err_msg")

	n.fillFieldMap()

	return n
}

func (n *nodeLog) WithContext(ctx context.Context) INodeLogDo { return n.nodeLogDo.WithContext(ctx) }

func (n nodeLog) TableName() string { return n.nodeLogDo.TableName() }

func (n nodeLog) Alias() string { return n.nodeLogDo.Alias() }

func (n nodeLog) Columns(cols ...field.Expr) gen.Columns { return n.nodeLogDo.Columns(cols...) }

func (n *nodeLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nodeLog) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 8)
	n.fieldMap["id"] = n.ID
	n.fieldMap["create_at"] = n.CreateAt
	n.fieldMap["update_at"] = n.UpdateAt
	n.fieldMap["delete_at"] = n.DeleteAt
	n.fieldMap["node_id_sender"] = n.NodeIDSender
	n.fieldMap["node_id_reader"] = n.NodeIDReader
	n.fieldMap["msg_body"] = n.MsgBody
	n.fieldMap["err_msg"] = n.ErrMsg
}

func (n nodeLog) clone(db *gorm.DB) nodeLog {
	n.nodeLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n nodeLog) replaceDB(db *gorm.DB) nodeLog {
	n.nodeLogDo.ReplaceDB(db)
	return n
}

type nodeLogDo struct{ gen.DO }

type INodeLogDo interface {
	gen.SubQuery
	Debug() INodeLogDo
	WithContext(ctx context.Context) INodeLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INodeLogDo
	WriteDB() INodeLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INodeLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INodeLogDo
	Not(conds ...gen.Condition) INodeLogDo
	Or(conds ...gen.Condition) INodeLogDo
	Select(conds ...field.Expr) INodeLogDo
	Where(conds ...gen.Condition) INodeLogDo
	Order(conds ...field.Expr) INodeLogDo
	Distinct(cols ...field.Expr) INodeLogDo
	Omit(cols ...field.Expr) INodeLogDo
	Join(table schema.Tabler, on ...field.Expr) INodeLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INodeLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) INodeLogDo
	Group(cols ...field.Expr) INodeLogDo
	Having(conds ...gen.Condition) INodeLogDo
	Limit(limit int) INodeLogDo
	Offset(offset int) INodeLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INodeLogDo
	Unscoped() INodeLogDo
	Create(values ...*model.NodeLog) error
	CreateInBatches(values []*model.NodeLog, batchSize int) error
	Save(values ...*model.NodeLog) error
	First() (*model.NodeLog, error)
	Take() (*model.NodeLog, error)
	Last() (*model.NodeLog, error)
	Find() ([]*model.NodeLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeLog, err error)
	FindInBatches(result *[]*model.NodeLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NodeLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INodeLogDo
	Assign(attrs ...field.AssignExpr) INodeLogDo
	Joins(fields ...field.RelationField) INodeLogDo
	Preload(fields ...field.RelationField) INodeLogDo
	FirstOrInit() (*model.NodeLog, error)
	FirstOrCreate() (*model.NodeLog, error)
	FindByPage(offset int, limit int) (result []*model.NodeLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INodeLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n nodeLogDo) Debug() INodeLogDo {
	return n.withDO(n.DO.Debug())
}

func (n nodeLogDo) WithContext(ctx context.Context) INodeLogDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nodeLogDo) ReadDB() INodeLogDo {
	return n.Clauses(dbresolver.Read)
}

func (n nodeLogDo) WriteDB() INodeLogDo {
	return n.Clauses(dbresolver.Write)
}

func (n nodeLogDo) Session(config *gorm.Session) INodeLogDo {
	return n.withDO(n.DO.Session(config))
}

func (n nodeLogDo) Clauses(conds ...clause.Expression) INodeLogDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nodeLogDo) Returning(value interface{}, columns ...string) INodeLogDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nodeLogDo) Not(conds ...gen.Condition) INodeLogDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nodeLogDo) Or(conds ...gen.Condition) INodeLogDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nodeLogDo) Select(conds ...field.Expr) INodeLogDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nodeLogDo) Where(conds ...gen.Condition) INodeLogDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nodeLogDo) Order(conds ...field.Expr) INodeLogDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nodeLogDo) Distinct(cols ...field.Expr) INodeLogDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nodeLogDo) Omit(cols ...field.Expr) INodeLogDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nodeLogDo) Join(table schema.Tabler, on ...field.Expr) INodeLogDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nodeLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) INodeLogDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nodeLogDo) RightJoin(table schema.Tabler, on ...field.Expr) INodeLogDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nodeLogDo) Group(cols ...field.Expr) INodeLogDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nodeLogDo) Having(conds ...gen.Condition) INodeLogDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nodeLogDo) Limit(limit int) INodeLogDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nodeLogDo) Offset(offset int) INodeLogDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nodeLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INodeLogDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nodeLogDo) Unscoped() INodeLogDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nodeLogDo) Create(values ...*model.NodeLog) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nodeLogDo) CreateInBatches(values []*model.NodeLog, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nodeLogDo) Save(values ...*model.NodeLog) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nodeLogDo) First() (*model.NodeLog, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeLog), nil
	}
}

func (n nodeLogDo) Take() (*model.NodeLog, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeLog), nil
	}
}

func (n nodeLogDo) Last() (*model.NodeLog, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeLog), nil
	}
}

func (n nodeLogDo) Find() ([]*model.NodeLog, error) {
	result, err := n.DO.Find()
	return result.([]*model.NodeLog), err
}

func (n nodeLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeLog, err error) {
	buf := make([]*model.NodeLog, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nodeLogDo) FindInBatches(result *[]*model.NodeLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nodeLogDo) Attrs(attrs ...field.AssignExpr) INodeLogDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nodeLogDo) Assign(attrs ...field.AssignExpr) INodeLogDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nodeLogDo) Joins(fields ...field.RelationField) INodeLogDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nodeLogDo) Preload(fields ...field.RelationField) INodeLogDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nodeLogDo) FirstOrInit() (*model.NodeLog, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeLog), nil
	}
}

func (n nodeLogDo) FirstOrCreate() (*model.NodeLog, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeLog), nil
	}
}

func (n nodeLogDo) FindByPage(offset int, limit int) (result []*model.NodeLog, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nodeLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nodeLogDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nodeLogDo) Delete(models ...*model.NodeLog) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nodeLogDo) withDO(do gen.Dao) *nodeLogDo {
	n.DO = *do.(*gen.DO)
	return n
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newDataDirect(db *gorm.DB, opts ...gen.DOOption) dataDirect {
	_dataDirect := dataDirect{}

	_dataDirect.dataDirectDo.UseDB(db, opts...)
	_dataDirect.dataDirectDo.UseModel(&model.DataDirect{})

	tableName := _dataDirect.dataDirectDo.TableName()
	_dataDirect.ALL = field.NewAsterisk(tableName)
	_dataDirect.ID = field.NewInt64(tableName, "id")
	_dataDirect.CreateAt = field.NewTime(tableName, "create_at")
	_dataDirect.UpdateAt = field.NewTime(tableName, "update_at")
	_dataDirect.DeleteAt = field.NewTime(tableName, "delete_at")
	_dataDirect.DirectID = field.NewString(tableName, "direct_id")
	_dataDirect.DirectIDName = field.NewString(tableName, "direct_id_name")

	_dataDirect.fillFieldMap()

	return _dataDirect
}

// dataDirect 数据目录
type dataDirect struct {
	dataDirectDo dataDirectDo

	ALL          field.Asterisk
	ID           field.Int64  // 数据id
	CreateAt     field.Time   // 创建时间
	UpdateAt     field.Time   // 更新时间
	DeleteAt     field.Time   // 删除时间
	DirectID     field.String // 目录id(00000000进行表示)
	DirectIDName field.String // 目录名称

	fieldMap map[string]field.Expr
}

func (d dataDirect) Table(newTableName string) *dataDirect {
	d.dataDirectDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dataDirect) As(alias string) *dataDirect {
	d.dataDirectDo.DO = *(d.dataDirectDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dataDirect) updateTableName(table string) *dataDirect {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.CreateAt = field.NewTime(table, "create_at")
	d.UpdateAt = field.NewTime(table, "update_at")
	d.DeleteAt = field.NewTime(table, "delete_at")
	d.DirectID = field.NewString(table, "direct_id")
	d.DirectIDName = field.NewString(table, "direct_id_name")

	d.fillFieldMap()

	return d
}

func (d *dataDirect) WithContext(ctx context.Context) IDataDirectDo {
	return d.dataDirectDo.WithContext(ctx)
}

func (d dataDirect) TableName() string { return d.dataDirectDo.TableName() }

func (d dataDirect) Alias() string { return d.dataDirectDo.Alias() }

func (d dataDirect) Columns(cols ...field.Expr) gen.Columns { return d.dataDirectDo.Columns(cols...) }

func (d *dataDirect) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dataDirect) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["id"] = d.ID
	d.fieldMap["create_at"] = d.CreateAt
	d.fieldMap["update_at"] = d.UpdateAt
	d.fieldMap["delete_at"] = d.DeleteAt
	d.fieldMap["direct_id"] = d.DirectID
	d.fieldMap["direct_id_name"] = d.DirectIDName
}

func (d dataDirect) clone(db *gorm.DB) dataDirect {
	d.dataDirectDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dataDirect) replaceDB(db *gorm.DB) dataDirect {
	d.dataDirectDo.ReplaceDB(db)
	return d
}

type dataDirectDo struct{ gen.DO }

type IDataDirectDo interface {
	gen.SubQuery
	Debug() IDataDirectDo
	WithContext(ctx context.Context) IDataDirectDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDataDirectDo
	WriteDB() IDataDirectDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDataDirectDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDataDirectDo
	Not(conds ...gen.Condition) IDataDirectDo
	Or(conds ...gen.Condition) IDataDirectDo
	Select(conds ...field.Expr) IDataDirectDo
	Where(conds ...gen.Condition) IDataDirectDo
	Order(conds ...field.Expr) IDataDirectDo
	Distinct(cols ...field.Expr) IDataDirectDo
	Omit(cols ...field.Expr) IDataDirectDo
	Join(table schema.Tabler, on ...field.Expr) IDataDirectDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDataDirectDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDataDirectDo
	Group(cols ...field.Expr) IDataDirectDo
	Having(conds ...gen.Condition) IDataDirectDo
	Limit(limit int) IDataDirectDo
	Offset(offset int) IDataDirectDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDataDirectDo
	Unscoped() IDataDirectDo
	Create(values ...*model.DataDirect) error
	CreateInBatches(values []*model.DataDirect, batchSize int) error
	Save(values ...*model.DataDirect) error
	First() (*model.DataDirect, error)
	Take() (*model.DataDirect, error)
	Last() (*model.DataDirect, error)
	Find() ([]*model.DataDirect, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataDirect, err error)
	FindInBatches(result *[]*model.DataDirect, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DataDirect) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDataDirectDo
	Assign(attrs ...field.AssignExpr) IDataDirectDo
	Joins(fields ...field.RelationField) IDataDirectDo
	Preload(fields ...field.RelationField) IDataDirectDo
	FirstOrInit() (*model.DataDirect, error)
	FirstOrCreate() (*model.DataDirect, error)
	FindByPage(offset int, limit int) (result []*model.DataDirect, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDataDirectDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dataDirectDo) Debug() IDataDirectDo {
	return d.withDO(d.DO.Debug())
}

func (d dataDirectDo) WithContext(ctx context.Context) IDataDirectDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dataDirectDo) ReadDB() IDataDirectDo {
	return d.Clauses(dbresolver.Read)
}

func (d dataDirectDo) WriteDB() IDataDirectDo {
	return d.Clauses(dbresolver.Write)
}

func (d dataDirectDo) Session(config *gorm.Session) IDataDirectDo {
	return d.withDO(d.DO.Session(config))
}

func (d dataDirectDo) Clauses(conds ...clause.Expression) IDataDirectDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dataDirectDo) Returning(value interface{}, columns ...string) IDataDirectDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dataDirectDo) Not(conds ...gen.Condition) IDataDirectDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dataDirectDo) Or(conds ...gen.Condition) IDataDirectDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dataDirectDo) Select(conds ...field.Expr) IDataDirectDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dataDirectDo) Where(conds ...gen.Condition) IDataDirectDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dataDirectDo) Order(conds ...field.Expr) IDataDirectDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dataDirectDo) Distinct(cols ...field.Expr) IDataDirectDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dataDirectDo) Omit(cols ...field.Expr) IDataDirectDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dataDirectDo) Join(table schema.Tabler, on ...field.Expr) IDataDirectDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dataDirectDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDataDirectDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dataDirectDo) RightJoin(table schema.Tabler, on ...field.Expr) IDataDirectDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dataDirectDo) Group(cols ...field.Expr) IDataDirectDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dataDirectDo) Having(conds ...gen.Condition) IDataDirectDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dataDirectDo) Limit(limit int) IDataDirectDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dataDirectDo) Offset(offset int) IDataDirectDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dataDirectDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDataDirectDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dataDirectDo) Unscoped() IDataDirectDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dataDirectDo) Create(values ...*model.DataDirect) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dataDirectDo) CreateInBatches(values []*model.DataDirect, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dataDirectDo) Save(values ...*model.DataDirect) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dataDirectDo) First() (*model.DataDirect, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataDirect), nil
	}
}

func (d dataDirectDo) Take() (*model.DataDirect, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataDirect), nil
	}
}

func (d dataDirectDo) Last() (*model.DataDirect, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataDirect), nil
	}
}

func (d dataDirectDo) Find() ([]*model.DataDirect, error) {
	result, err := d.DO.Find()
	return result.([]*model.DataDirect), err
}

func (d dataDirectDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataDirect, err error) {
	buf := make([]*model.DataDirect, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dataDirectDo) FindInBatches(result *[]*model.DataDirect, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dataDirectDo) Attrs(attrs ...field.AssignExpr) IDataDirectDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dataDirectDo) Assign(attrs ...field.AssignExpr) IDataDirectDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dataDirectDo) Joins(fields ...field.RelationField) IDataDirectDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dataDirectDo) Preload(fields ...field.RelationField) IDataDirectDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dataDirectDo) FirstOrInit() (*model.DataDirect, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataDirect), nil
	}
}

func (d dataDirectDo) FirstOrCreate() (*model.DataDirect, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataDirect), nil
	}
}

func (d dataDirectDo) FindByPage(offset int, limit int) (result []*model.DataDirect, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dataDirectDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dataDirectDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dataDirectDo) Delete(models ...*model.DataDirect) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dataDirectDo) withDO(do gen.Dao) *dataDirectDo {
	d.DO = *do.(*gen.DO)
	return d
}

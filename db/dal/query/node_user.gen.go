// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newNodeUser(db *gorm.DB, opts ...gen.DOOption) nodeUser {
	_nodeUser := nodeUser{}

	_nodeUser.nodeUserDo.UseDB(db, opts...)
	_nodeUser.nodeUserDo.UseModel(&model.NodeUser{})

	tableName := _nodeUser.nodeUserDo.TableName()
	_nodeUser.ALL = field.NewAsterisk(tableName)
	_nodeUser.ID = field.NewInt64(tableName, "id")
	_nodeUser.CreateAt = field.NewTime(tableName, "create_at")
	_nodeUser.UpdateAt = field.NewTime(tableName, "update_at")
	_nodeUser.DeleteTime = field.NewTime(tableName, "delete_time")
	_nodeUser.NodeID = field.NewString(tableName, "node_id")
	_nodeUser.NodeContact = field.NewString(tableName, "node_contact")
	_nodeUser.NodePhone = field.NewString(tableName, "node_phone")
	_nodeUser.ContactType = field.NewString(tableName, "contact_type")
	_nodeUser.UserAccount = field.NewString(tableName, "user_account")
	_nodeUser.UserPassword = field.NewString(tableName, "user_password")
	_nodeUser.Status = field.NewString(tableName, "status")

	_nodeUser.fillFieldMap()

	return _nodeUser
}

// nodeUser 超级节点的联系人信息
type nodeUser struct {
	nodeUserDo nodeUserDo

	ALL          field.Asterisk
	ID           field.Int64  // 数据id
	CreateAt     field.Time   // 创建时间
	UpdateAt     field.Time   // 更新时间
	DeleteTime   field.Time   // 删除时间
	NodeID       field.String // 节点id
	NodeContact  field.String // 节点联系人
	NodePhone    field.String // 节点联系人电话
	ContactType  field.String // 1表示可登录人员 2纯管理人员 3投资人
	UserAccount  field.String // 节点人员账号
	UserPassword field.String // 节点人员密码
	Status       field.String // 1表示正常 2表示暂停 3表示禁用

	fieldMap map[string]field.Expr
}

func (n nodeUser) Table(newTableName string) *nodeUser {
	n.nodeUserDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nodeUser) As(alias string) *nodeUser {
	n.nodeUserDo.DO = *(n.nodeUserDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nodeUser) updateTableName(table string) *nodeUser {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewInt64(table, "id")
	n.CreateAt = field.NewTime(table, "create_at")
	n.UpdateAt = field.NewTime(table, "update_at")
	n.DeleteTime = field.NewTime(table, "delete_time")
	n.NodeID = field.NewString(table, "node_id")
	n.NodeContact = field.NewString(table, "node_contact")
	n.NodePhone = field.NewString(table, "node_phone")
	n.ContactType = field.NewString(table, "contact_type")
	n.UserAccount = field.NewString(table, "user_account")
	n.UserPassword = field.NewString(table, "user_password")
	n.Status = field.NewString(table, "status")

	n.fillFieldMap()

	return n
}

func (n *nodeUser) WithContext(ctx context.Context) INodeUserDo { return n.nodeUserDo.WithContext(ctx) }

func (n nodeUser) TableName() string { return n.nodeUserDo.TableName() }

func (n nodeUser) Alias() string { return n.nodeUserDo.Alias() }

func (n nodeUser) Columns(cols ...field.Expr) gen.Columns { return n.nodeUserDo.Columns(cols...) }

func (n *nodeUser) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nodeUser) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 11)
	n.fieldMap["id"] = n.ID
	n.fieldMap["create_at"] = n.CreateAt
	n.fieldMap["update_at"] = n.UpdateAt
	n.fieldMap["delete_time"] = n.DeleteTime
	n.fieldMap["node_id"] = n.NodeID
	n.fieldMap["node_contact"] = n.NodeContact
	n.fieldMap["node_phone"] = n.NodePhone
	n.fieldMap["contact_type"] = n.ContactType
	n.fieldMap["user_account"] = n.UserAccount
	n.fieldMap["user_password"] = n.UserPassword
	n.fieldMap["status"] = n.Status
}

func (n nodeUser) clone(db *gorm.DB) nodeUser {
	n.nodeUserDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n nodeUser) replaceDB(db *gorm.DB) nodeUser {
	n.nodeUserDo.ReplaceDB(db)
	return n
}

type nodeUserDo struct{ gen.DO }

type INodeUserDo interface {
	gen.SubQuery
	Debug() INodeUserDo
	WithContext(ctx context.Context) INodeUserDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INodeUserDo
	WriteDB() INodeUserDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INodeUserDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INodeUserDo
	Not(conds ...gen.Condition) INodeUserDo
	Or(conds ...gen.Condition) INodeUserDo
	Select(conds ...field.Expr) INodeUserDo
	Where(conds ...gen.Condition) INodeUserDo
	Order(conds ...field.Expr) INodeUserDo
	Distinct(cols ...field.Expr) INodeUserDo
	Omit(cols ...field.Expr) INodeUserDo
	Join(table schema.Tabler, on ...field.Expr) INodeUserDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INodeUserDo
	RightJoin(table schema.Tabler, on ...field.Expr) INodeUserDo
	Group(cols ...field.Expr) INodeUserDo
	Having(conds ...gen.Condition) INodeUserDo
	Limit(limit int) INodeUserDo
	Offset(offset int) INodeUserDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INodeUserDo
	Unscoped() INodeUserDo
	Create(values ...*model.NodeUser) error
	CreateInBatches(values []*model.NodeUser, batchSize int) error
	Save(values ...*model.NodeUser) error
	First() (*model.NodeUser, error)
	Take() (*model.NodeUser, error)
	Last() (*model.NodeUser, error)
	Find() ([]*model.NodeUser, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeUser, err error)
	FindInBatches(result *[]*model.NodeUser, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NodeUser) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INodeUserDo
	Assign(attrs ...field.AssignExpr) INodeUserDo
	Joins(fields ...field.RelationField) INodeUserDo
	Preload(fields ...field.RelationField) INodeUserDo
	FirstOrInit() (*model.NodeUser, error)
	FirstOrCreate() (*model.NodeUser, error)
	FindByPage(offset int, limit int) (result []*model.NodeUser, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INodeUserDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n nodeUserDo) Debug() INodeUserDo {
	return n.withDO(n.DO.Debug())
}

func (n nodeUserDo) WithContext(ctx context.Context) INodeUserDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nodeUserDo) ReadDB() INodeUserDo {
	return n.Clauses(dbresolver.Read)
}

func (n nodeUserDo) WriteDB() INodeUserDo {
	return n.Clauses(dbresolver.Write)
}

func (n nodeUserDo) Session(config *gorm.Session) INodeUserDo {
	return n.withDO(n.DO.Session(config))
}

func (n nodeUserDo) Clauses(conds ...clause.Expression) INodeUserDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nodeUserDo) Returning(value interface{}, columns ...string) INodeUserDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nodeUserDo) Not(conds ...gen.Condition) INodeUserDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nodeUserDo) Or(conds ...gen.Condition) INodeUserDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nodeUserDo) Select(conds ...field.Expr) INodeUserDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nodeUserDo) Where(conds ...gen.Condition) INodeUserDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nodeUserDo) Order(conds ...field.Expr) INodeUserDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nodeUserDo) Distinct(cols ...field.Expr) INodeUserDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nodeUserDo) Omit(cols ...field.Expr) INodeUserDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nodeUserDo) Join(table schema.Tabler, on ...field.Expr) INodeUserDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nodeUserDo) LeftJoin(table schema.Tabler, on ...field.Expr) INodeUserDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nodeUserDo) RightJoin(table schema.Tabler, on ...field.Expr) INodeUserDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nodeUserDo) Group(cols ...field.Expr) INodeUserDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nodeUserDo) Having(conds ...gen.Condition) INodeUserDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nodeUserDo) Limit(limit int) INodeUserDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nodeUserDo) Offset(offset int) INodeUserDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nodeUserDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INodeUserDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nodeUserDo) Unscoped() INodeUserDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nodeUserDo) Create(values ...*model.NodeUser) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nodeUserDo) CreateInBatches(values []*model.NodeUser, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nodeUserDo) Save(values ...*model.NodeUser) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nodeUserDo) First() (*model.NodeUser, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeUser), nil
	}
}

func (n nodeUserDo) Take() (*model.NodeUser, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeUser), nil
	}
}

func (n nodeUserDo) Last() (*model.NodeUser, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeUser), nil
	}
}

func (n nodeUserDo) Find() ([]*model.NodeUser, error) {
	result, err := n.DO.Find()
	return result.([]*model.NodeUser), err
}

func (n nodeUserDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeUser, err error) {
	buf := make([]*model.NodeUser, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nodeUserDo) FindInBatches(result *[]*model.NodeUser, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nodeUserDo) Attrs(attrs ...field.AssignExpr) INodeUserDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nodeUserDo) Assign(attrs ...field.AssignExpr) INodeUserDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nodeUserDo) Joins(fields ...field.RelationField) INodeUserDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nodeUserDo) Preload(fields ...field.RelationField) INodeUserDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nodeUserDo) FirstOrInit() (*model.NodeUser, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeUser), nil
	}
}

func (n nodeUserDo) FirstOrCreate() (*model.NodeUser, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeUser), nil
	}
}

func (n nodeUserDo) FindByPage(offset int, limit int) (result []*model.NodeUser, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nodeUserDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nodeUserDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nodeUserDo) Delete(models ...*model.NodeUser) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nodeUserDo) withDO(do gen.Dao) *nodeUserDo {
	n.DO = *do.(*gen.DO)
	return n
}

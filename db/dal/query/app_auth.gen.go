// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newAppAuth(db *gorm.DB, opts ...gen.DOOption) appAuth {
	_appAuth := appAuth{}

	_appAuth.appAuthDo.UseDB(db, opts...)
	_appAuth.appAuthDo.UseModel(&model.AppAuth{})

	tableName := _appAuth.appAuthDo.TableName()
	_appAuth.ALL = field.NewAsterisk(tableName)
	_appAuth.ID = field.NewInt64(tableName, "id")
	_appAuth.CreateAt = field.NewTime(tableName, "create_at")
	_appAuth.UpdateAt = field.NewTime(tableName, "update_at")
	_appAuth.DeleteAt = field.NewTime(tableName, "delete_at")
	_appAuth.AppID = field.NewInt64(tableName, "app_id")
	_appAuth.AccessKey = field.NewString(tableName, "access_key")
	_appAuth.KeyExp = field.NewTime(tableName, "key_exp")
	_appAuth.StartTime = field.NewTime(tableName, "start_time")
	_appAuth.RegisterTime = field.NewTime(tableName, "register_time")
	_appAuth.Contract = field.NewString(tableName, "contract")
	_appAuth.Remark = field.NewString(tableName, "remark")

	_appAuth.fillFieldMap()

	return _appAuth
}

// appAuth 业务应用的授权码记录
type appAuth struct {
	appAuthDo appAuthDo

	ALL          field.Asterisk
	ID           field.Int64  // 数据id
	CreateAt     field.Time   // 创建时间
	UpdateAt     field.Time   // 更新时间
	DeleteAt     field.Time   // 删除时间
	AppID        field.Int64  // 应用id
	AccessKey    field.String // 授权码
	KeyExp       field.Time   // 过期时间
	StartTime    field.Time   // 启动时间
	RegisterTime field.Time   // 登记时间
	Contract     field.String // 合同地址
	Remark       field.String // 备注

	fieldMap map[string]field.Expr
}

func (a appAuth) Table(newTableName string) *appAuth {
	a.appAuthDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appAuth) As(alias string) *appAuth {
	a.appAuthDo.DO = *(a.appAuthDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appAuth) updateTableName(table string) *appAuth {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.CreateAt = field.NewTime(table, "create_at")
	a.UpdateAt = field.NewTime(table, "update_at")
	a.DeleteAt = field.NewTime(table, "delete_at")
	a.AppID = field.NewInt64(table, "app_id")
	a.AccessKey = field.NewString(table, "access_key")
	a.KeyExp = field.NewTime(table, "key_exp")
	a.StartTime = field.NewTime(table, "start_time")
	a.RegisterTime = field.NewTime(table, "register_time")
	a.Contract = field.NewString(table, "contract")
	a.Remark = field.NewString(table, "remark")

	a.fillFieldMap()

	return a
}

func (a *appAuth) WithContext(ctx context.Context) IAppAuthDo { return a.appAuthDo.WithContext(ctx) }

func (a appAuth) TableName() string { return a.appAuthDo.TableName() }

func (a appAuth) Alias() string { return a.appAuthDo.Alias() }

func (a appAuth) Columns(cols ...field.Expr) gen.Columns { return a.appAuthDo.Columns(cols...) }

func (a *appAuth) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appAuth) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 11)
	a.fieldMap["id"] = a.ID
	a.fieldMap["create_at"] = a.CreateAt
	a.fieldMap["update_at"] = a.UpdateAt
	a.fieldMap["delete_at"] = a.DeleteAt
	a.fieldMap["app_id"] = a.AppID
	a.fieldMap["access_key"] = a.AccessKey
	a.fieldMap["key_exp"] = a.KeyExp
	a.fieldMap["start_time"] = a.StartTime
	a.fieldMap["register_time"] = a.RegisterTime
	a.fieldMap["contract"] = a.Contract
	a.fieldMap["remark"] = a.Remark
}

func (a appAuth) clone(db *gorm.DB) appAuth {
	a.appAuthDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appAuth) replaceDB(db *gorm.DB) appAuth {
	a.appAuthDo.ReplaceDB(db)
	return a
}

type appAuthDo struct{ gen.DO }

type IAppAuthDo interface {
	gen.SubQuery
	Debug() IAppAuthDo
	WithContext(ctx context.Context) IAppAuthDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppAuthDo
	WriteDB() IAppAuthDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppAuthDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppAuthDo
	Not(conds ...gen.Condition) IAppAuthDo
	Or(conds ...gen.Condition) IAppAuthDo
	Select(conds ...field.Expr) IAppAuthDo
	Where(conds ...gen.Condition) IAppAuthDo
	Order(conds ...field.Expr) IAppAuthDo
	Distinct(cols ...field.Expr) IAppAuthDo
	Omit(cols ...field.Expr) IAppAuthDo
	Join(table schema.Tabler, on ...field.Expr) IAppAuthDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppAuthDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppAuthDo
	Group(cols ...field.Expr) IAppAuthDo
	Having(conds ...gen.Condition) IAppAuthDo
	Limit(limit int) IAppAuthDo
	Offset(offset int) IAppAuthDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppAuthDo
	Unscoped() IAppAuthDo
	Create(values ...*model.AppAuth) error
	CreateInBatches(values []*model.AppAuth, batchSize int) error
	Save(values ...*model.AppAuth) error
	First() (*model.AppAuth, error)
	Take() (*model.AppAuth, error)
	Last() (*model.AppAuth, error)
	Find() ([]*model.AppAuth, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppAuth, err error)
	FindInBatches(result *[]*model.AppAuth, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AppAuth) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppAuthDo
	Assign(attrs ...field.AssignExpr) IAppAuthDo
	Joins(fields ...field.RelationField) IAppAuthDo
	Preload(fields ...field.RelationField) IAppAuthDo
	FirstOrInit() (*model.AppAuth, error)
	FirstOrCreate() (*model.AppAuth, error)
	FindByPage(offset int, limit int) (result []*model.AppAuth, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppAuthDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appAuthDo) Debug() IAppAuthDo {
	return a.withDO(a.DO.Debug())
}

func (a appAuthDo) WithContext(ctx context.Context) IAppAuthDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appAuthDo) ReadDB() IAppAuthDo {
	return a.Clauses(dbresolver.Read)
}

func (a appAuthDo) WriteDB() IAppAuthDo {
	return a.Clauses(dbresolver.Write)
}

func (a appAuthDo) Session(config *gorm.Session) IAppAuthDo {
	return a.withDO(a.DO.Session(config))
}

func (a appAuthDo) Clauses(conds ...clause.Expression) IAppAuthDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appAuthDo) Returning(value interface{}, columns ...string) IAppAuthDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appAuthDo) Not(conds ...gen.Condition) IAppAuthDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appAuthDo) Or(conds ...gen.Condition) IAppAuthDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appAuthDo) Select(conds ...field.Expr) IAppAuthDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appAuthDo) Where(conds ...gen.Condition) IAppAuthDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appAuthDo) Order(conds ...field.Expr) IAppAuthDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appAuthDo) Distinct(cols ...field.Expr) IAppAuthDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appAuthDo) Omit(cols ...field.Expr) IAppAuthDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appAuthDo) Join(table schema.Tabler, on ...field.Expr) IAppAuthDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appAuthDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppAuthDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appAuthDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppAuthDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appAuthDo) Group(cols ...field.Expr) IAppAuthDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appAuthDo) Having(conds ...gen.Condition) IAppAuthDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appAuthDo) Limit(limit int) IAppAuthDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appAuthDo) Offset(offset int) IAppAuthDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appAuthDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppAuthDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appAuthDo) Unscoped() IAppAuthDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appAuthDo) Create(values ...*model.AppAuth) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appAuthDo) CreateInBatches(values []*model.AppAuth, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appAuthDo) Save(values ...*model.AppAuth) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appAuthDo) First() (*model.AppAuth, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppAuth), nil
	}
}

func (a appAuthDo) Take() (*model.AppAuth, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppAuth), nil
	}
}

func (a appAuthDo) Last() (*model.AppAuth, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppAuth), nil
	}
}

func (a appAuthDo) Find() ([]*model.AppAuth, error) {
	result, err := a.DO.Find()
	return result.([]*model.AppAuth), err
}

func (a appAuthDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppAuth, err error) {
	buf := make([]*model.AppAuth, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appAuthDo) FindInBatches(result *[]*model.AppAuth, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appAuthDo) Attrs(attrs ...field.AssignExpr) IAppAuthDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appAuthDo) Assign(attrs ...field.AssignExpr) IAppAuthDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appAuthDo) Joins(fields ...field.RelationField) IAppAuthDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appAuthDo) Preload(fields ...field.RelationField) IAppAuthDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appAuthDo) FirstOrInit() (*model.AppAuth, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppAuth), nil
	}
}

func (a appAuthDo) FirstOrCreate() (*model.AppAuth, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppAuth), nil
	}
}

func (a appAuthDo) FindByPage(offset int, limit int) (result []*model.AppAuth, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appAuthDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appAuthDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appAuthDo) Delete(models ...*model.AppAuth) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appAuthDo) withDO(do gen.Dao) *appAuthDo {
	a.DO = *do.(*gen.DO)
	return a
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newUserOther(db *gorm.DB, opts ...gen.DOOption) userOther {
	_userOther := userOther{}

	_userOther.userOtherDo.UseDB(db, opts...)
	_userOther.userOtherDo.UseModel(&model.UserOther{})

	tableName := _userOther.userOtherDo.TableName()
	_userOther.ALL = field.NewAsterisk(tableName)
	_userOther.ID = field.NewInt64(tableName, "id")
	_userOther.CreateAt = field.NewTime(tableName, "create_at")
	_userOther.UpdateAt = field.NewTime(tableName, "update_at")
	_userOther.DeleteAt = field.NewTime(tableName, "delete_at")
	_userOther.UserID = field.NewInt64(tableName, "user_id")
	_userOther.IDCard = field.NewString(tableName, "id_card")
	_userOther.Addr = field.NewString(tableName, "addr")
	_userOther.BusinessLicense = field.NewString(tableName, "business_license")

	_userOther.fillFieldMap()

	return _userOther
}

// userOther 不同类别用户补充信息
type userOther struct {
	userOtherDo userOtherDo

	ALL             field.Asterisk
	ID              field.Int64  // 数据id
	CreateAt        field.Time   // 创建时间
	UpdateAt        field.Time   // 更新时间
	DeleteAt        field.Time   // 删除时间
	UserID          field.Int64  // 用户id
	IDCard          field.String // 身份证号
	Addr            field.String // 地址
	BusinessLicense field.String // 营业执照

	fieldMap map[string]field.Expr
}

func (u userOther) Table(newTableName string) *userOther {
	u.userOtherDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userOther) As(alias string) *userOther {
	u.userOtherDo.DO = *(u.userOtherDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userOther) updateTableName(table string) *userOther {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.CreateAt = field.NewTime(table, "create_at")
	u.UpdateAt = field.NewTime(table, "update_at")
	u.DeleteAt = field.NewTime(table, "delete_at")
	u.UserID = field.NewInt64(table, "user_id")
	u.IDCard = field.NewString(table, "id_card")
	u.Addr = field.NewString(table, "addr")
	u.BusinessLicense = field.NewString(table, "business_license")

	u.fillFieldMap()

	return u
}

func (u *userOther) WithContext(ctx context.Context) IUserOtherDo {
	return u.userOtherDo.WithContext(ctx)
}

func (u userOther) TableName() string { return u.userOtherDo.TableName() }

func (u userOther) Alias() string { return u.userOtherDo.Alias() }

func (u userOther) Columns(cols ...field.Expr) gen.Columns { return u.userOtherDo.Columns(cols...) }

func (u *userOther) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userOther) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["create_at"] = u.CreateAt
	u.fieldMap["update_at"] = u.UpdateAt
	u.fieldMap["delete_at"] = u.DeleteAt
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["id_card"] = u.IDCard
	u.fieldMap["addr"] = u.Addr
	u.fieldMap["business_license"] = u.BusinessLicense
}

func (u userOther) clone(db *gorm.DB) userOther {
	u.userOtherDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userOther) replaceDB(db *gorm.DB) userOther {
	u.userOtherDo.ReplaceDB(db)
	return u
}

type userOtherDo struct{ gen.DO }

type IUserOtherDo interface {
	gen.SubQuery
	Debug() IUserOtherDo
	WithContext(ctx context.Context) IUserOtherDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserOtherDo
	WriteDB() IUserOtherDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserOtherDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserOtherDo
	Not(conds ...gen.Condition) IUserOtherDo
	Or(conds ...gen.Condition) IUserOtherDo
	Select(conds ...field.Expr) IUserOtherDo
	Where(conds ...gen.Condition) IUserOtherDo
	Order(conds ...field.Expr) IUserOtherDo
	Distinct(cols ...field.Expr) IUserOtherDo
	Omit(cols ...field.Expr) IUserOtherDo
	Join(table schema.Tabler, on ...field.Expr) IUserOtherDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserOtherDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserOtherDo
	Group(cols ...field.Expr) IUserOtherDo
	Having(conds ...gen.Condition) IUserOtherDo
	Limit(limit int) IUserOtherDo
	Offset(offset int) IUserOtherDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserOtherDo
	Unscoped() IUserOtherDo
	Create(values ...*model.UserOther) error
	CreateInBatches(values []*model.UserOther, batchSize int) error
	Save(values ...*model.UserOther) error
	First() (*model.UserOther, error)
	Take() (*model.UserOther, error)
	Last() (*model.UserOther, error)
	Find() ([]*model.UserOther, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserOther, err error)
	FindInBatches(result *[]*model.UserOther, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserOther) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserOtherDo
	Assign(attrs ...field.AssignExpr) IUserOtherDo
	Joins(fields ...field.RelationField) IUserOtherDo
	Preload(fields ...field.RelationField) IUserOtherDo
	FirstOrInit() (*model.UserOther, error)
	FirstOrCreate() (*model.UserOther, error)
	FindByPage(offset int, limit int) (result []*model.UserOther, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserOtherDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userOtherDo) Debug() IUserOtherDo {
	return u.withDO(u.DO.Debug())
}

func (u userOtherDo) WithContext(ctx context.Context) IUserOtherDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userOtherDo) ReadDB() IUserOtherDo {
	return u.Clauses(dbresolver.Read)
}

func (u userOtherDo) WriteDB() IUserOtherDo {
	return u.Clauses(dbresolver.Write)
}

func (u userOtherDo) Session(config *gorm.Session) IUserOtherDo {
	return u.withDO(u.DO.Session(config))
}

func (u userOtherDo) Clauses(conds ...clause.Expression) IUserOtherDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userOtherDo) Returning(value interface{}, columns ...string) IUserOtherDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userOtherDo) Not(conds ...gen.Condition) IUserOtherDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userOtherDo) Or(conds ...gen.Condition) IUserOtherDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userOtherDo) Select(conds ...field.Expr) IUserOtherDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userOtherDo) Where(conds ...gen.Condition) IUserOtherDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userOtherDo) Order(conds ...field.Expr) IUserOtherDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userOtherDo) Distinct(cols ...field.Expr) IUserOtherDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userOtherDo) Omit(cols ...field.Expr) IUserOtherDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userOtherDo) Join(table schema.Tabler, on ...field.Expr) IUserOtherDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userOtherDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserOtherDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userOtherDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserOtherDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userOtherDo) Group(cols ...field.Expr) IUserOtherDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userOtherDo) Having(conds ...gen.Condition) IUserOtherDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userOtherDo) Limit(limit int) IUserOtherDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userOtherDo) Offset(offset int) IUserOtherDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userOtherDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserOtherDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userOtherDo) Unscoped() IUserOtherDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userOtherDo) Create(values ...*model.UserOther) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userOtherDo) CreateInBatches(values []*model.UserOther, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userOtherDo) Save(values ...*model.UserOther) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userOtherDo) First() (*model.UserOther, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOther), nil
	}
}

func (u userOtherDo) Take() (*model.UserOther, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOther), nil
	}
}

func (u userOtherDo) Last() (*model.UserOther, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOther), nil
	}
}

func (u userOtherDo) Find() ([]*model.UserOther, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserOther), err
}

func (u userOtherDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserOther, err error) {
	buf := make([]*model.UserOther, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userOtherDo) FindInBatches(result *[]*model.UserOther, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userOtherDo) Attrs(attrs ...field.AssignExpr) IUserOtherDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userOtherDo) Assign(attrs ...field.AssignExpr) IUserOtherDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userOtherDo) Joins(fields ...field.RelationField) IUserOtherDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userOtherDo) Preload(fields ...field.RelationField) IUserOtherDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userOtherDo) FirstOrInit() (*model.UserOther, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOther), nil
	}
}

func (u userOtherDo) FirstOrCreate() (*model.UserOther, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserOther), nil
	}
}

func (u userOtherDo) FindByPage(offset int, limit int) (result []*model.UserOther, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userOtherDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userOtherDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userOtherDo) Delete(models ...*model.UserOther) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userOtherDo) withDO(do gen.Dao) *userOtherDo {
	u.DO = *do.(*gen.DO)
	return u
}

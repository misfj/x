// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newUserFee(db *gorm.DB, opts ...gen.DOOption) userFee {
	_userFee := userFee{}

	_userFee.userFeeDo.UseDB(db, opts...)
	_userFee.userFeeDo.UseModel(&model.UserFee{})

	tableName := _userFee.userFeeDo.TableName()
	_userFee.ALL = field.NewAsterisk(tableName)
	_userFee.ID = field.NewInt64(tableName, "id")
	_userFee.CreateAt = field.NewTime(tableName, "create_at")
	_userFee.UpdateAt = field.NewTime(tableName, "update_at")
	_userFee.DeleteAt = field.NewTime(tableName, "delete_at")
	_userFee.UserID = field.NewInt64(tableName, "user_id")
	_userFee.OrderID = field.NewString(tableName, "order_id")
	_userFee.PayType = field.NewString(tableName, "pay_type")
	_userFee.PayAmount = field.NewFloat64(tableName, "pay_amount")
	_userFee.Currency = field.NewString(tableName, "currency")
	_userFee.OppositeAccount = field.NewString(tableName, "opposite_account")
	_userFee.TradeType = field.NewString(tableName, "trade_type")

	_userFee.fillFieldMap()

	return _userFee
}

// userFee 用户缴费充值有关记录信息
type userFee struct {
	userFeeDo userFeeDo

	ALL             field.Asterisk
	ID              field.Int64   // 数据id
	CreateAt        field.Time    // 创建时间
	UpdateAt        field.Time    // 更新时间
	DeleteAt        field.Time    // 删除时间
	UserID          field.Int64   // 用户id
	OrderID         field.String  // 订单id
	PayType         field.String  // 支付方式
	PayAmount       field.Float64 // 支付金额
	Currency        field.String  // 币种
	OppositeAccount field.String  // 对方账户
	TradeType       field.String  // 交易类型(数据买卖 扩容等)

	fieldMap map[string]field.Expr
}

func (u userFee) Table(newTableName string) *userFee {
	u.userFeeDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userFee) As(alias string) *userFee {
	u.userFeeDo.DO = *(u.userFeeDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userFee) updateTableName(table string) *userFee {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.CreateAt = field.NewTime(table, "create_at")
	u.UpdateAt = field.NewTime(table, "update_at")
	u.DeleteAt = field.NewTime(table, "delete_at")
	u.UserID = field.NewInt64(table, "user_id")
	u.OrderID = field.NewString(table, "order_id")
	u.PayType = field.NewString(table, "pay_type")
	u.PayAmount = field.NewFloat64(table, "pay_amount")
	u.Currency = field.NewString(table, "currency")
	u.OppositeAccount = field.NewString(table, "opposite_account")
	u.TradeType = field.NewString(table, "trade_type")

	u.fillFieldMap()

	return u
}

func (u *userFee) WithContext(ctx context.Context) IUserFeeDo { return u.userFeeDo.WithContext(ctx) }

func (u userFee) TableName() string { return u.userFeeDo.TableName() }

func (u userFee) Alias() string { return u.userFeeDo.Alias() }

func (u userFee) Columns(cols ...field.Expr) gen.Columns { return u.userFeeDo.Columns(cols...) }

func (u *userFee) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userFee) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 11)
	u.fieldMap["id"] = u.ID
	u.fieldMap["create_at"] = u.CreateAt
	u.fieldMap["update_at"] = u.UpdateAt
	u.fieldMap["delete_at"] = u.DeleteAt
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["order_id"] = u.OrderID
	u.fieldMap["pay_type"] = u.PayType
	u.fieldMap["pay_amount"] = u.PayAmount
	u.fieldMap["currency"] = u.Currency
	u.fieldMap["opposite_account"] = u.OppositeAccount
	u.fieldMap["trade_type"] = u.TradeType
}

func (u userFee) clone(db *gorm.DB) userFee {
	u.userFeeDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userFee) replaceDB(db *gorm.DB) userFee {
	u.userFeeDo.ReplaceDB(db)
	return u
}

type userFeeDo struct{ gen.DO }

type IUserFeeDo interface {
	gen.SubQuery
	Debug() IUserFeeDo
	WithContext(ctx context.Context) IUserFeeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserFeeDo
	WriteDB() IUserFeeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserFeeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserFeeDo
	Not(conds ...gen.Condition) IUserFeeDo
	Or(conds ...gen.Condition) IUserFeeDo
	Select(conds ...field.Expr) IUserFeeDo
	Where(conds ...gen.Condition) IUserFeeDo
	Order(conds ...field.Expr) IUserFeeDo
	Distinct(cols ...field.Expr) IUserFeeDo
	Omit(cols ...field.Expr) IUserFeeDo
	Join(table schema.Tabler, on ...field.Expr) IUserFeeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserFeeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserFeeDo
	Group(cols ...field.Expr) IUserFeeDo
	Having(conds ...gen.Condition) IUserFeeDo
	Limit(limit int) IUserFeeDo
	Offset(offset int) IUserFeeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserFeeDo
	Unscoped() IUserFeeDo
	Create(values ...*model.UserFee) error
	CreateInBatches(values []*model.UserFee, batchSize int) error
	Save(values ...*model.UserFee) error
	First() (*model.UserFee, error)
	Take() (*model.UserFee, error)
	Last() (*model.UserFee, error)
	Find() ([]*model.UserFee, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserFee, err error)
	FindInBatches(result *[]*model.UserFee, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserFee) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserFeeDo
	Assign(attrs ...field.AssignExpr) IUserFeeDo
	Joins(fields ...field.RelationField) IUserFeeDo
	Preload(fields ...field.RelationField) IUserFeeDo
	FirstOrInit() (*model.UserFee, error)
	FirstOrCreate() (*model.UserFee, error)
	FindByPage(offset int, limit int) (result []*model.UserFee, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserFeeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userFeeDo) Debug() IUserFeeDo {
	return u.withDO(u.DO.Debug())
}

func (u userFeeDo) WithContext(ctx context.Context) IUserFeeDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userFeeDo) ReadDB() IUserFeeDo {
	return u.Clauses(dbresolver.Read)
}

func (u userFeeDo) WriteDB() IUserFeeDo {
	return u.Clauses(dbresolver.Write)
}

func (u userFeeDo) Session(config *gorm.Session) IUserFeeDo {
	return u.withDO(u.DO.Session(config))
}

func (u userFeeDo) Clauses(conds ...clause.Expression) IUserFeeDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userFeeDo) Returning(value interface{}, columns ...string) IUserFeeDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userFeeDo) Not(conds ...gen.Condition) IUserFeeDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userFeeDo) Or(conds ...gen.Condition) IUserFeeDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userFeeDo) Select(conds ...field.Expr) IUserFeeDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userFeeDo) Where(conds ...gen.Condition) IUserFeeDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userFeeDo) Order(conds ...field.Expr) IUserFeeDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userFeeDo) Distinct(cols ...field.Expr) IUserFeeDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userFeeDo) Omit(cols ...field.Expr) IUserFeeDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userFeeDo) Join(table schema.Tabler, on ...field.Expr) IUserFeeDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userFeeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserFeeDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userFeeDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserFeeDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userFeeDo) Group(cols ...field.Expr) IUserFeeDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userFeeDo) Having(conds ...gen.Condition) IUserFeeDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userFeeDo) Limit(limit int) IUserFeeDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userFeeDo) Offset(offset int) IUserFeeDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userFeeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserFeeDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userFeeDo) Unscoped() IUserFeeDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userFeeDo) Create(values ...*model.UserFee) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userFeeDo) CreateInBatches(values []*model.UserFee, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userFeeDo) Save(values ...*model.UserFee) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userFeeDo) First() (*model.UserFee, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFee), nil
	}
}

func (u userFeeDo) Take() (*model.UserFee, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFee), nil
	}
}

func (u userFeeDo) Last() (*model.UserFee, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFee), nil
	}
}

func (u userFeeDo) Find() ([]*model.UserFee, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserFee), err
}

func (u userFeeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserFee, err error) {
	buf := make([]*model.UserFee, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userFeeDo) FindInBatches(result *[]*model.UserFee, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userFeeDo) Attrs(attrs ...field.AssignExpr) IUserFeeDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userFeeDo) Assign(attrs ...field.AssignExpr) IUserFeeDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userFeeDo) Joins(fields ...field.RelationField) IUserFeeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userFeeDo) Preload(fields ...field.RelationField) IUserFeeDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userFeeDo) FirstOrInit() (*model.UserFee, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFee), nil
	}
}

func (u userFeeDo) FirstOrCreate() (*model.UserFee, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserFee), nil
	}
}

func (u userFeeDo) FindByPage(offset int, limit int) (result []*model.UserFee, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userFeeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userFeeDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userFeeDo) Delete(models ...*model.UserFee) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userFeeDo) withDO(do gen.Dao) *userFeeDo {
	u.DO = *do.(*gen.DO)
	return u
}

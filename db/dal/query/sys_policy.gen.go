// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newSysPolicy(db *gorm.DB, opts ...gen.DOOption) sysPolicy {
	_sysPolicy := sysPolicy{}

	_sysPolicy.sysPolicyDo.UseDB(db, opts...)
	_sysPolicy.sysPolicyDo.UseModel(&model.SysPolicy{})

	tableName := _sysPolicy.sysPolicyDo.TableName()
	_sysPolicy.ALL = field.NewAsterisk(tableName)
	_sysPolicy.ID = field.NewInt64(tableName, "id")
	_sysPolicy.CreateAt = field.NewTime(tableName, "create_at")
	_sysPolicy.UpdateAt = field.NewTime(tableName, "update_at")
	_sysPolicy.DeleteAt = field.NewTime(tableName, "delete_at")
	_sysPolicy.NodeID = field.NewString(tableName, "node_id")
	_sysPolicy.SoftID = field.NewString(tableName, "soft_id")
	_sysPolicy.StartUpgrade = field.NewTime(tableName, "start_upgrade")
	_sysPolicy.EndUpgrade = field.NewTime(tableName, "end_upgrade")
	_sysPolicy.UpgradeErr = field.NewString(tableName, "upgrade_err")

	_sysPolicy.fillFieldMap()

	return _sysPolicy
}

// sysPolicy 描述各种升级策略
type sysPolicy struct {
	sysPolicyDo sysPolicyDo

	ALL          field.Asterisk
	ID           field.Int64  // 数据id
	CreateAt     field.Time   // 创建时间
	UpdateAt     field.Time   // 更新时间
	DeleteAt     field.Time   // 删除时间
	NodeID       field.String // 节点id
	SoftID       field.String // 软件id
	StartUpgrade field.Time   // 开始升级时间
	EndUpgrade   field.Time   // 升级完成时间
	UpgradeErr   field.String // 升级错误

	fieldMap map[string]field.Expr
}

func (s sysPolicy) Table(newTableName string) *sysPolicy {
	s.sysPolicyDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysPolicy) As(alias string) *sysPolicy {
	s.sysPolicyDo.DO = *(s.sysPolicyDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysPolicy) updateTableName(table string) *sysPolicy {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreateAt = field.NewTime(table, "create_at")
	s.UpdateAt = field.NewTime(table, "update_at")
	s.DeleteAt = field.NewTime(table, "delete_at")
	s.NodeID = field.NewString(table, "node_id")
	s.SoftID = field.NewString(table, "soft_id")
	s.StartUpgrade = field.NewTime(table, "start_upgrade")
	s.EndUpgrade = field.NewTime(table, "end_upgrade")
	s.UpgradeErr = field.NewString(table, "upgrade_err")

	s.fillFieldMap()

	return s
}

func (s *sysPolicy) WithContext(ctx context.Context) ISysPolicyDo {
	return s.sysPolicyDo.WithContext(ctx)
}

func (s sysPolicy) TableName() string { return s.sysPolicyDo.TableName() }

func (s sysPolicy) Alias() string { return s.sysPolicyDo.Alias() }

func (s sysPolicy) Columns(cols ...field.Expr) gen.Columns { return s.sysPolicyDo.Columns(cols...) }

func (s *sysPolicy) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysPolicy) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 9)
	s.fieldMap["id"] = s.ID
	s.fieldMap["create_at"] = s.CreateAt
	s.fieldMap["update_at"] = s.UpdateAt
	s.fieldMap["delete_at"] = s.DeleteAt
	s.fieldMap["node_id"] = s.NodeID
	s.fieldMap["soft_id"] = s.SoftID
	s.fieldMap["start_upgrade"] = s.StartUpgrade
	s.fieldMap["end_upgrade"] = s.EndUpgrade
	s.fieldMap["upgrade_err"] = s.UpgradeErr
}

func (s sysPolicy) clone(db *gorm.DB) sysPolicy {
	s.sysPolicyDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysPolicy) replaceDB(db *gorm.DB) sysPolicy {
	s.sysPolicyDo.ReplaceDB(db)
	return s
}

type sysPolicyDo struct{ gen.DO }

type ISysPolicyDo interface {
	gen.SubQuery
	Debug() ISysPolicyDo
	WithContext(ctx context.Context) ISysPolicyDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysPolicyDo
	WriteDB() ISysPolicyDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysPolicyDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysPolicyDo
	Not(conds ...gen.Condition) ISysPolicyDo
	Or(conds ...gen.Condition) ISysPolicyDo
	Select(conds ...field.Expr) ISysPolicyDo
	Where(conds ...gen.Condition) ISysPolicyDo
	Order(conds ...field.Expr) ISysPolicyDo
	Distinct(cols ...field.Expr) ISysPolicyDo
	Omit(cols ...field.Expr) ISysPolicyDo
	Join(table schema.Tabler, on ...field.Expr) ISysPolicyDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysPolicyDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysPolicyDo
	Group(cols ...field.Expr) ISysPolicyDo
	Having(conds ...gen.Condition) ISysPolicyDo
	Limit(limit int) ISysPolicyDo
	Offset(offset int) ISysPolicyDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysPolicyDo
	Unscoped() ISysPolicyDo
	Create(values ...*model.SysPolicy) error
	CreateInBatches(values []*model.SysPolicy, batchSize int) error
	Save(values ...*model.SysPolicy) error
	First() (*model.SysPolicy, error)
	Take() (*model.SysPolicy, error)
	Last() (*model.SysPolicy, error)
	Find() ([]*model.SysPolicy, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysPolicy, err error)
	FindInBatches(result *[]*model.SysPolicy, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysPolicy) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysPolicyDo
	Assign(attrs ...field.AssignExpr) ISysPolicyDo
	Joins(fields ...field.RelationField) ISysPolicyDo
	Preload(fields ...field.RelationField) ISysPolicyDo
	FirstOrInit() (*model.SysPolicy, error)
	FirstOrCreate() (*model.SysPolicy, error)
	FindByPage(offset int, limit int) (result []*model.SysPolicy, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysPolicyDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysPolicyDo) Debug() ISysPolicyDo {
	return s.withDO(s.DO.Debug())
}

func (s sysPolicyDo) WithContext(ctx context.Context) ISysPolicyDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysPolicyDo) ReadDB() ISysPolicyDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysPolicyDo) WriteDB() ISysPolicyDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysPolicyDo) Session(config *gorm.Session) ISysPolicyDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysPolicyDo) Clauses(conds ...clause.Expression) ISysPolicyDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysPolicyDo) Returning(value interface{}, columns ...string) ISysPolicyDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysPolicyDo) Not(conds ...gen.Condition) ISysPolicyDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysPolicyDo) Or(conds ...gen.Condition) ISysPolicyDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysPolicyDo) Select(conds ...field.Expr) ISysPolicyDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysPolicyDo) Where(conds ...gen.Condition) ISysPolicyDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysPolicyDo) Order(conds ...field.Expr) ISysPolicyDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysPolicyDo) Distinct(cols ...field.Expr) ISysPolicyDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysPolicyDo) Omit(cols ...field.Expr) ISysPolicyDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysPolicyDo) Join(table schema.Tabler, on ...field.Expr) ISysPolicyDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysPolicyDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysPolicyDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysPolicyDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysPolicyDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysPolicyDo) Group(cols ...field.Expr) ISysPolicyDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysPolicyDo) Having(conds ...gen.Condition) ISysPolicyDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysPolicyDo) Limit(limit int) ISysPolicyDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysPolicyDo) Offset(offset int) ISysPolicyDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysPolicyDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysPolicyDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysPolicyDo) Unscoped() ISysPolicyDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysPolicyDo) Create(values ...*model.SysPolicy) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysPolicyDo) CreateInBatches(values []*model.SysPolicy, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysPolicyDo) Save(values ...*model.SysPolicy) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysPolicyDo) First() (*model.SysPolicy, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPolicy), nil
	}
}

func (s sysPolicyDo) Take() (*model.SysPolicy, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPolicy), nil
	}
}

func (s sysPolicyDo) Last() (*model.SysPolicy, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPolicy), nil
	}
}

func (s sysPolicyDo) Find() ([]*model.SysPolicy, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysPolicy), err
}

func (s sysPolicyDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysPolicy, err error) {
	buf := make([]*model.SysPolicy, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysPolicyDo) FindInBatches(result *[]*model.SysPolicy, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysPolicyDo) Attrs(attrs ...field.AssignExpr) ISysPolicyDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysPolicyDo) Assign(attrs ...field.AssignExpr) ISysPolicyDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysPolicyDo) Joins(fields ...field.RelationField) ISysPolicyDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysPolicyDo) Preload(fields ...field.RelationField) ISysPolicyDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysPolicyDo) FirstOrInit() (*model.SysPolicy, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPolicy), nil
	}
}

func (s sysPolicyDo) FirstOrCreate() (*model.SysPolicy, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysPolicy), nil
	}
}

func (s sysPolicyDo) FindByPage(offset int, limit int) (result []*model.SysPolicy, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysPolicyDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysPolicyDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysPolicyDo) Delete(models ...*model.SysPolicy) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysPolicyDo) withDO(do gen.Dao) *sysPolicyDo {
	s.DO = *do.(*gen.DO)
	return s
}

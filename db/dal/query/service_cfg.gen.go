// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newServiceCfg(db *gorm.DB, opts ...gen.DOOption) serviceCfg {
	_serviceCfg := serviceCfg{}

	_serviceCfg.serviceCfgDo.UseDB(db, opts...)
	_serviceCfg.serviceCfgDo.UseModel(&model.ServiceCfg{})

	tableName := _serviceCfg.serviceCfgDo.TableName()
	_serviceCfg.ALL = field.NewAsterisk(tableName)
	_serviceCfg.ID = field.NewInt64(tableName, "id")
	_serviceCfg.CreateAt = field.NewTime(tableName, "create_at")
	_serviceCfg.UpdateAt = field.NewTime(tableName, "update_at")
	_serviceCfg.DeleteAt = field.NewTime(tableName, "delete_at")
	_serviceCfg.ServiceID = field.NewInt64(tableName, "service_id")
	_serviceCfg.ServiceConfig = field.NewString(tableName, "service_config")
	_serviceCfg.StartTime = field.NewTime(tableName, "start_time")

	_serviceCfg.fillFieldMap()

	return _serviceCfg
}

// serviceCfg json描述的配置信息
type serviceCfg struct {
	serviceCfgDo serviceCfgDo

	ALL           field.Asterisk
	ID            field.Int64  // 数据id
	CreateAt      field.Time   // 创建时间
	UpdateAt      field.Time   // 更新时间
	DeleteAt      field.Time   // 删除时间
	ServiceID     field.Int64  // 服务id
	ServiceConfig field.String // 服务代理的配置
	StartTime     field.Time   // 启动时间

	fieldMap map[string]field.Expr
}

func (s serviceCfg) Table(newTableName string) *serviceCfg {
	s.serviceCfgDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serviceCfg) As(alias string) *serviceCfg {
	s.serviceCfgDo.DO = *(s.serviceCfgDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serviceCfg) updateTableName(table string) *serviceCfg {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreateAt = field.NewTime(table, "create_at")
	s.UpdateAt = field.NewTime(table, "update_at")
	s.DeleteAt = field.NewTime(table, "delete_at")
	s.ServiceID = field.NewInt64(table, "service_id")
	s.ServiceConfig = field.NewString(table, "service_config")
	s.StartTime = field.NewTime(table, "start_time")

	s.fillFieldMap()

	return s
}

func (s *serviceCfg) WithContext(ctx context.Context) IServiceCfgDo {
	return s.serviceCfgDo.WithContext(ctx)
}

func (s serviceCfg) TableName() string { return s.serviceCfgDo.TableName() }

func (s serviceCfg) Alias() string { return s.serviceCfgDo.Alias() }

func (s serviceCfg) Columns(cols ...field.Expr) gen.Columns { return s.serviceCfgDo.Columns(cols...) }

func (s *serviceCfg) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serviceCfg) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 7)
	s.fieldMap["id"] = s.ID
	s.fieldMap["create_at"] = s.CreateAt
	s.fieldMap["update_at"] = s.UpdateAt
	s.fieldMap["delete_at"] = s.DeleteAt
	s.fieldMap["service_id"] = s.ServiceID
	s.fieldMap["service_config"] = s.ServiceConfig
	s.fieldMap["start_time"] = s.StartTime
}

func (s serviceCfg) clone(db *gorm.DB) serviceCfg {
	s.serviceCfgDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serviceCfg) replaceDB(db *gorm.DB) serviceCfg {
	s.serviceCfgDo.ReplaceDB(db)
	return s
}

type serviceCfgDo struct{ gen.DO }

type IServiceCfgDo interface {
	gen.SubQuery
	Debug() IServiceCfgDo
	WithContext(ctx context.Context) IServiceCfgDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServiceCfgDo
	WriteDB() IServiceCfgDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServiceCfgDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServiceCfgDo
	Not(conds ...gen.Condition) IServiceCfgDo
	Or(conds ...gen.Condition) IServiceCfgDo
	Select(conds ...field.Expr) IServiceCfgDo
	Where(conds ...gen.Condition) IServiceCfgDo
	Order(conds ...field.Expr) IServiceCfgDo
	Distinct(cols ...field.Expr) IServiceCfgDo
	Omit(cols ...field.Expr) IServiceCfgDo
	Join(table schema.Tabler, on ...field.Expr) IServiceCfgDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServiceCfgDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServiceCfgDo
	Group(cols ...field.Expr) IServiceCfgDo
	Having(conds ...gen.Condition) IServiceCfgDo
	Limit(limit int) IServiceCfgDo
	Offset(offset int) IServiceCfgDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceCfgDo
	Unscoped() IServiceCfgDo
	Create(values ...*model.ServiceCfg) error
	CreateInBatches(values []*model.ServiceCfg, batchSize int) error
	Save(values ...*model.ServiceCfg) error
	First() (*model.ServiceCfg, error)
	Take() (*model.ServiceCfg, error)
	Last() (*model.ServiceCfg, error)
	Find() ([]*model.ServiceCfg, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServiceCfg, err error)
	FindInBatches(result *[]*model.ServiceCfg, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServiceCfg) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServiceCfgDo
	Assign(attrs ...field.AssignExpr) IServiceCfgDo
	Joins(fields ...field.RelationField) IServiceCfgDo
	Preload(fields ...field.RelationField) IServiceCfgDo
	FirstOrInit() (*model.ServiceCfg, error)
	FirstOrCreate() (*model.ServiceCfg, error)
	FindByPage(offset int, limit int) (result []*model.ServiceCfg, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServiceCfgDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serviceCfgDo) Debug() IServiceCfgDo {
	return s.withDO(s.DO.Debug())
}

func (s serviceCfgDo) WithContext(ctx context.Context) IServiceCfgDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serviceCfgDo) ReadDB() IServiceCfgDo {
	return s.Clauses(dbresolver.Read)
}

func (s serviceCfgDo) WriteDB() IServiceCfgDo {
	return s.Clauses(dbresolver.Write)
}

func (s serviceCfgDo) Session(config *gorm.Session) IServiceCfgDo {
	return s.withDO(s.DO.Session(config))
}

func (s serviceCfgDo) Clauses(conds ...clause.Expression) IServiceCfgDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serviceCfgDo) Returning(value interface{}, columns ...string) IServiceCfgDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serviceCfgDo) Not(conds ...gen.Condition) IServiceCfgDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serviceCfgDo) Or(conds ...gen.Condition) IServiceCfgDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serviceCfgDo) Select(conds ...field.Expr) IServiceCfgDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serviceCfgDo) Where(conds ...gen.Condition) IServiceCfgDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serviceCfgDo) Order(conds ...field.Expr) IServiceCfgDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serviceCfgDo) Distinct(cols ...field.Expr) IServiceCfgDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serviceCfgDo) Omit(cols ...field.Expr) IServiceCfgDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serviceCfgDo) Join(table schema.Tabler, on ...field.Expr) IServiceCfgDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serviceCfgDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServiceCfgDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serviceCfgDo) RightJoin(table schema.Tabler, on ...field.Expr) IServiceCfgDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serviceCfgDo) Group(cols ...field.Expr) IServiceCfgDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serviceCfgDo) Having(conds ...gen.Condition) IServiceCfgDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serviceCfgDo) Limit(limit int) IServiceCfgDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serviceCfgDo) Offset(offset int) IServiceCfgDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serviceCfgDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceCfgDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serviceCfgDo) Unscoped() IServiceCfgDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serviceCfgDo) Create(values ...*model.ServiceCfg) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serviceCfgDo) CreateInBatches(values []*model.ServiceCfg, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serviceCfgDo) Save(values ...*model.ServiceCfg) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serviceCfgDo) First() (*model.ServiceCfg, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceCfg), nil
	}
}

func (s serviceCfgDo) Take() (*model.ServiceCfg, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceCfg), nil
	}
}

func (s serviceCfgDo) Last() (*model.ServiceCfg, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceCfg), nil
	}
}

func (s serviceCfgDo) Find() ([]*model.ServiceCfg, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServiceCfg), err
}

func (s serviceCfgDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServiceCfg, err error) {
	buf := make([]*model.ServiceCfg, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serviceCfgDo) FindInBatches(result *[]*model.ServiceCfg, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serviceCfgDo) Attrs(attrs ...field.AssignExpr) IServiceCfgDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serviceCfgDo) Assign(attrs ...field.AssignExpr) IServiceCfgDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serviceCfgDo) Joins(fields ...field.RelationField) IServiceCfgDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serviceCfgDo) Preload(fields ...field.RelationField) IServiceCfgDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serviceCfgDo) FirstOrInit() (*model.ServiceCfg, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceCfg), nil
	}
}

func (s serviceCfgDo) FirstOrCreate() (*model.ServiceCfg, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceCfg), nil
	}
}

func (s serviceCfgDo) FindByPage(offset int, limit int) (result []*model.ServiceCfg, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serviceCfgDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serviceCfgDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serviceCfgDo) Delete(models ...*model.ServiceCfg) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serviceCfgDo) withDO(do gen.Dao) *serviceCfgDo {
	s.DO = *do.(*gen.DO)
	return s
}

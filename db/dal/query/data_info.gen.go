// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newDataInfo(db *gorm.DB, opts ...gen.DOOption) dataInfo {
	_dataInfo := dataInfo{}

	_dataInfo.dataInfoDo.UseDB(db, opts...)
	_dataInfo.dataInfoDo.UseModel(&model.DataInfo{})

	tableName := _dataInfo.dataInfoDo.TableName()
	_dataInfo.ALL = field.NewAsterisk(tableName)
	_dataInfo.ID = field.NewInt64(tableName, "id")
	_dataInfo.CreateAt = field.NewTime(tableName, "create_at")
	_dataInfo.UpdateAt = field.NewTime(tableName, "update_at")
	_dataInfo.DeleteAt = field.NewTime(tableName, "delete_at")
	_dataInfo.UseID = field.NewInt64(tableName, "use_id")
	_dataInfo.DataID = field.NewString(tableName, "data_id")
	_dataInfo.DataName = field.NewString(tableName, "data_name")
	_dataInfo.DataDiectoryID = field.NewInt32(tableName, "data_diectory_id")
	_dataInfo.DataType = field.NewString(tableName, "data_type")
	_dataInfo.IsOpen = field.NewString(tableName, "is_open")
	_dataInfo.DataSize = field.NewInt64(tableName, "data_size")
	_dataInfo.DataPos = field.NewString(tableName, "data_pos")
	_dataInfo.NodeID = field.NewString(tableName, "node_id")

	_dataInfo.fillFieldMap()

	return _dataInfo
}

// dataInfo 数据是否共享 是否需要审核 数据价值
type dataInfo struct {
	dataInfoDo dataInfoDo

	ALL            field.Asterisk
	ID             field.Int64  // 数据id
	CreateAt       field.Time   // 创建时间
	UpdateAt       field.Time   // 更新时间
	DeleteAt       field.Time   // 删除时间
	UseID          field.Int64  // 用户id
	DataID         field.String // 数据散列
	DataName       field.String // 数据名称
	DataDiectoryID field.Int32  // 数据目录
	DataType       field.String // 1表示文档2表示图片3表示视频4表示关系数据
	IsOpen         field.String // 1表示开放2表示关闭
	DataSize       field.Int64  // 数据大小
	DataPos        field.String // 数据位置
	NodeID         field.String // 节点id

	fieldMap map[string]field.Expr
}

func (d dataInfo) Table(newTableName string) *dataInfo {
	d.dataInfoDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dataInfo) As(alias string) *dataInfo {
	d.dataInfoDo.DO = *(d.dataInfoDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dataInfo) updateTableName(table string) *dataInfo {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.CreateAt = field.NewTime(table, "create_at")
	d.UpdateAt = field.NewTime(table, "update_at")
	d.DeleteAt = field.NewTime(table, "delete_at")
	d.UseID = field.NewInt64(table, "use_id")
	d.DataID = field.NewString(table, "data_id")
	d.DataName = field.NewString(table, "data_name")
	d.DataDiectoryID = field.NewInt32(table, "data_diectory_id")
	d.DataType = field.NewString(table, "data_type")
	d.IsOpen = field.NewString(table, "is_open")
	d.DataSize = field.NewInt64(table, "data_size")
	d.DataPos = field.NewString(table, "data_pos")
	d.NodeID = field.NewString(table, "node_id")

	d.fillFieldMap()

	return d
}

func (d *dataInfo) WithContext(ctx context.Context) IDataInfoDo { return d.dataInfoDo.WithContext(ctx) }

func (d dataInfo) TableName() string { return d.dataInfoDo.TableName() }

func (d dataInfo) Alias() string { return d.dataInfoDo.Alias() }

func (d dataInfo) Columns(cols ...field.Expr) gen.Columns { return d.dataInfoDo.Columns(cols...) }

func (d *dataInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dataInfo) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 13)
	d.fieldMap["id"] = d.ID
	d.fieldMap["create_at"] = d.CreateAt
	d.fieldMap["update_at"] = d.UpdateAt
	d.fieldMap["delete_at"] = d.DeleteAt
	d.fieldMap["use_id"] = d.UseID
	d.fieldMap["data_id"] = d.DataID
	d.fieldMap["data_name"] = d.DataName
	d.fieldMap["data_diectory_id"] = d.DataDiectoryID
	d.fieldMap["data_type"] = d.DataType
	d.fieldMap["is_open"] = d.IsOpen
	d.fieldMap["data_size"] = d.DataSize
	d.fieldMap["data_pos"] = d.DataPos
	d.fieldMap["node_id"] = d.NodeID
}

func (d dataInfo) clone(db *gorm.DB) dataInfo {
	d.dataInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dataInfo) replaceDB(db *gorm.DB) dataInfo {
	d.dataInfoDo.ReplaceDB(db)
	return d
}

type dataInfoDo struct{ gen.DO }

type IDataInfoDo interface {
	gen.SubQuery
	Debug() IDataInfoDo
	WithContext(ctx context.Context) IDataInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDataInfoDo
	WriteDB() IDataInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDataInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDataInfoDo
	Not(conds ...gen.Condition) IDataInfoDo
	Or(conds ...gen.Condition) IDataInfoDo
	Select(conds ...field.Expr) IDataInfoDo
	Where(conds ...gen.Condition) IDataInfoDo
	Order(conds ...field.Expr) IDataInfoDo
	Distinct(cols ...field.Expr) IDataInfoDo
	Omit(cols ...field.Expr) IDataInfoDo
	Join(table schema.Tabler, on ...field.Expr) IDataInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDataInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDataInfoDo
	Group(cols ...field.Expr) IDataInfoDo
	Having(conds ...gen.Condition) IDataInfoDo
	Limit(limit int) IDataInfoDo
	Offset(offset int) IDataInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDataInfoDo
	Unscoped() IDataInfoDo
	Create(values ...*model.DataInfo) error
	CreateInBatches(values []*model.DataInfo, batchSize int) error
	Save(values ...*model.DataInfo) error
	First() (*model.DataInfo, error)
	Take() (*model.DataInfo, error)
	Last() (*model.DataInfo, error)
	Find() ([]*model.DataInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataInfo, err error)
	FindInBatches(result *[]*model.DataInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DataInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDataInfoDo
	Assign(attrs ...field.AssignExpr) IDataInfoDo
	Joins(fields ...field.RelationField) IDataInfoDo
	Preload(fields ...field.RelationField) IDataInfoDo
	FirstOrInit() (*model.DataInfo, error)
	FirstOrCreate() (*model.DataInfo, error)
	FindByPage(offset int, limit int) (result []*model.DataInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDataInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dataInfoDo) Debug() IDataInfoDo {
	return d.withDO(d.DO.Debug())
}

func (d dataInfoDo) WithContext(ctx context.Context) IDataInfoDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dataInfoDo) ReadDB() IDataInfoDo {
	return d.Clauses(dbresolver.Read)
}

func (d dataInfoDo) WriteDB() IDataInfoDo {
	return d.Clauses(dbresolver.Write)
}

func (d dataInfoDo) Session(config *gorm.Session) IDataInfoDo {
	return d.withDO(d.DO.Session(config))
}

func (d dataInfoDo) Clauses(conds ...clause.Expression) IDataInfoDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dataInfoDo) Returning(value interface{}, columns ...string) IDataInfoDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dataInfoDo) Not(conds ...gen.Condition) IDataInfoDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dataInfoDo) Or(conds ...gen.Condition) IDataInfoDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dataInfoDo) Select(conds ...field.Expr) IDataInfoDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dataInfoDo) Where(conds ...gen.Condition) IDataInfoDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dataInfoDo) Order(conds ...field.Expr) IDataInfoDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dataInfoDo) Distinct(cols ...field.Expr) IDataInfoDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dataInfoDo) Omit(cols ...field.Expr) IDataInfoDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dataInfoDo) Join(table schema.Tabler, on ...field.Expr) IDataInfoDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dataInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDataInfoDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dataInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IDataInfoDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dataInfoDo) Group(cols ...field.Expr) IDataInfoDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dataInfoDo) Having(conds ...gen.Condition) IDataInfoDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dataInfoDo) Limit(limit int) IDataInfoDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dataInfoDo) Offset(offset int) IDataInfoDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dataInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDataInfoDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dataInfoDo) Unscoped() IDataInfoDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dataInfoDo) Create(values ...*model.DataInfo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dataInfoDo) CreateInBatches(values []*model.DataInfo, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dataInfoDo) Save(values ...*model.DataInfo) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dataInfoDo) First() (*model.DataInfo, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataInfo), nil
	}
}

func (d dataInfoDo) Take() (*model.DataInfo, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataInfo), nil
	}
}

func (d dataInfoDo) Last() (*model.DataInfo, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataInfo), nil
	}
}

func (d dataInfoDo) Find() ([]*model.DataInfo, error) {
	result, err := d.DO.Find()
	return result.([]*model.DataInfo), err
}

func (d dataInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataInfo, err error) {
	buf := make([]*model.DataInfo, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dataInfoDo) FindInBatches(result *[]*model.DataInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dataInfoDo) Attrs(attrs ...field.AssignExpr) IDataInfoDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dataInfoDo) Assign(attrs ...field.AssignExpr) IDataInfoDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dataInfoDo) Joins(fields ...field.RelationField) IDataInfoDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dataInfoDo) Preload(fields ...field.RelationField) IDataInfoDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dataInfoDo) FirstOrInit() (*model.DataInfo, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataInfo), nil
	}
}

func (d dataInfoDo) FirstOrCreate() (*model.DataInfo, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataInfo), nil
	}
}

func (d dataInfoDo) FindByPage(offset int, limit int) (result []*model.DataInfo, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dataInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dataInfoDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dataInfoDo) Delete(models ...*model.DataInfo) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dataInfoDo) withDO(do gen.Dao) *dataInfoDo {
	d.DO = *do.(*gen.DO)
	return d
}

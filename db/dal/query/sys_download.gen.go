// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newSysDownload(db *gorm.DB, opts ...gen.DOOption) sysDownload {
	_sysDownload := sysDownload{}

	_sysDownload.sysDownloadDo.UseDB(db, opts...)
	_sysDownload.sysDownloadDo.UseModel(&model.SysDownload{})

	tableName := _sysDownload.sysDownloadDo.TableName()
	_sysDownload.ALL = field.NewAsterisk(tableName)
	_sysDownload.ID = field.NewInt32(tableName, "id")

	_sysDownload.fillFieldMap()

	return _sysDownload
}

// sysDownload 记录软件的下载信息
type sysDownload struct {
	sysDownloadDo sysDownloadDo

	ALL field.Asterisk
	ID  field.Int32

	fieldMap map[string]field.Expr
}

func (s sysDownload) Table(newTableName string) *sysDownload {
	s.sysDownloadDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysDownload) As(alias string) *sysDownload {
	s.sysDownloadDo.DO = *(s.sysDownloadDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysDownload) updateTableName(table string) *sysDownload {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt32(table, "id")

	s.fillFieldMap()

	return s
}

func (s *sysDownload) WithContext(ctx context.Context) ISysDownloadDo {
	return s.sysDownloadDo.WithContext(ctx)
}

func (s sysDownload) TableName() string { return s.sysDownloadDo.TableName() }

func (s sysDownload) Alias() string { return s.sysDownloadDo.Alias() }

func (s sysDownload) Columns(cols ...field.Expr) gen.Columns { return s.sysDownloadDo.Columns(cols...) }

func (s *sysDownload) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysDownload) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 1)
	s.fieldMap["id"] = s.ID
}

func (s sysDownload) clone(db *gorm.DB) sysDownload {
	s.sysDownloadDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysDownload) replaceDB(db *gorm.DB) sysDownload {
	s.sysDownloadDo.ReplaceDB(db)
	return s
}

type sysDownloadDo struct{ gen.DO }

type ISysDownloadDo interface {
	gen.SubQuery
	Debug() ISysDownloadDo
	WithContext(ctx context.Context) ISysDownloadDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysDownloadDo
	WriteDB() ISysDownloadDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysDownloadDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysDownloadDo
	Not(conds ...gen.Condition) ISysDownloadDo
	Or(conds ...gen.Condition) ISysDownloadDo
	Select(conds ...field.Expr) ISysDownloadDo
	Where(conds ...gen.Condition) ISysDownloadDo
	Order(conds ...field.Expr) ISysDownloadDo
	Distinct(cols ...field.Expr) ISysDownloadDo
	Omit(cols ...field.Expr) ISysDownloadDo
	Join(table schema.Tabler, on ...field.Expr) ISysDownloadDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysDownloadDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysDownloadDo
	Group(cols ...field.Expr) ISysDownloadDo
	Having(conds ...gen.Condition) ISysDownloadDo
	Limit(limit int) ISysDownloadDo
	Offset(offset int) ISysDownloadDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysDownloadDo
	Unscoped() ISysDownloadDo
	Create(values ...*model.SysDownload) error
	CreateInBatches(values []*model.SysDownload, batchSize int) error
	Save(values ...*model.SysDownload) error
	First() (*model.SysDownload, error)
	Take() (*model.SysDownload, error)
	Last() (*model.SysDownload, error)
	Find() ([]*model.SysDownload, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysDownload, err error)
	FindInBatches(result *[]*model.SysDownload, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysDownload) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysDownloadDo
	Assign(attrs ...field.AssignExpr) ISysDownloadDo
	Joins(fields ...field.RelationField) ISysDownloadDo
	Preload(fields ...field.RelationField) ISysDownloadDo
	FirstOrInit() (*model.SysDownload, error)
	FirstOrCreate() (*model.SysDownload, error)
	FindByPage(offset int, limit int) (result []*model.SysDownload, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysDownloadDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysDownloadDo) Debug() ISysDownloadDo {
	return s.withDO(s.DO.Debug())
}

func (s sysDownloadDo) WithContext(ctx context.Context) ISysDownloadDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysDownloadDo) ReadDB() ISysDownloadDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysDownloadDo) WriteDB() ISysDownloadDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysDownloadDo) Session(config *gorm.Session) ISysDownloadDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysDownloadDo) Clauses(conds ...clause.Expression) ISysDownloadDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysDownloadDo) Returning(value interface{}, columns ...string) ISysDownloadDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysDownloadDo) Not(conds ...gen.Condition) ISysDownloadDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysDownloadDo) Or(conds ...gen.Condition) ISysDownloadDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysDownloadDo) Select(conds ...field.Expr) ISysDownloadDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysDownloadDo) Where(conds ...gen.Condition) ISysDownloadDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysDownloadDo) Order(conds ...field.Expr) ISysDownloadDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysDownloadDo) Distinct(cols ...field.Expr) ISysDownloadDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysDownloadDo) Omit(cols ...field.Expr) ISysDownloadDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysDownloadDo) Join(table schema.Tabler, on ...field.Expr) ISysDownloadDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysDownloadDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysDownloadDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysDownloadDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysDownloadDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysDownloadDo) Group(cols ...field.Expr) ISysDownloadDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysDownloadDo) Having(conds ...gen.Condition) ISysDownloadDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysDownloadDo) Limit(limit int) ISysDownloadDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysDownloadDo) Offset(offset int) ISysDownloadDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysDownloadDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysDownloadDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysDownloadDo) Unscoped() ISysDownloadDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysDownloadDo) Create(values ...*model.SysDownload) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysDownloadDo) CreateInBatches(values []*model.SysDownload, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysDownloadDo) Save(values ...*model.SysDownload) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysDownloadDo) First() (*model.SysDownload, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDownload), nil
	}
}

func (s sysDownloadDo) Take() (*model.SysDownload, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDownload), nil
	}
}

func (s sysDownloadDo) Last() (*model.SysDownload, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDownload), nil
	}
}

func (s sysDownloadDo) Find() ([]*model.SysDownload, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysDownload), err
}

func (s sysDownloadDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysDownload, err error) {
	buf := make([]*model.SysDownload, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysDownloadDo) FindInBatches(result *[]*model.SysDownload, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysDownloadDo) Attrs(attrs ...field.AssignExpr) ISysDownloadDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysDownloadDo) Assign(attrs ...field.AssignExpr) ISysDownloadDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysDownloadDo) Joins(fields ...field.RelationField) ISysDownloadDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysDownloadDo) Preload(fields ...field.RelationField) ISysDownloadDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysDownloadDo) FirstOrInit() (*model.SysDownload, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDownload), nil
	}
}

func (s sysDownloadDo) FirstOrCreate() (*model.SysDownload, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysDownload), nil
	}
}

func (s sysDownloadDo) FindByPage(offset int, limit int) (result []*model.SysDownload, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysDownloadDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysDownloadDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysDownloadDo) Delete(models ...*model.SysDownload) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysDownloadDo) withDO(do gen.Dao) *sysDownloadDo {
	s.DO = *do.(*gen.DO)
	return s
}

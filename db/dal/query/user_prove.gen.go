// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newUserProve(db *gorm.DB, opts ...gen.DOOption) userProve {
	_userProve := userProve{}

	_userProve.userProveDo.UseDB(db, opts...)
	_userProve.userProveDo.UseModel(&model.UserProve{})

	tableName := _userProve.userProveDo.TableName()
	_userProve.ALL = field.NewAsterisk(tableName)
	_userProve.ID = field.NewInt64(tableName, "id")
	_userProve.CreateAt = field.NewTime(tableName, "create_at")
	_userProve.UpdateAt = field.NewTime(tableName, "update_at")
	_userProve.DeleteAt = field.NewTime(tableName, "delete_at")
	_userProve.UserID = field.NewInt64(tableName, "user_id")
	_userProve.AccountType = field.NewString(tableName, "account_type")
	_userProve.Account = field.NewString(tableName, "account")
	_userProve.Password = field.NewString(tableName, "password")
	_userProve.AppID = field.NewInt64(tableName, "app_id")

	_userProve.fillFieldMap()

	return _userProve
}

// userProve 用户认证信息
type userProve struct {
	userProveDo userProveDo

	ALL         field.Asterisk
	ID          field.Int64  // 数据id
	CreateAt    field.Time   // 创建时间
	UpdateAt    field.Time   // 更新时间
	DeleteAt    field.Time   // 删除时间
	UserID      field.Int64  // 用户id
	AccountType field.String // 账号类型(qq等da)
	Account     field.String // 账号
	Password    field.String // 账号密码
	AppID       field.Int64  // 应用id

	fieldMap map[string]field.Expr
}

func (u userProve) Table(newTableName string) *userProve {
	u.userProveDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userProve) As(alias string) *userProve {
	u.userProveDo.DO = *(u.userProveDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userProve) updateTableName(table string) *userProve {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.CreateAt = field.NewTime(table, "create_at")
	u.UpdateAt = field.NewTime(table, "update_at")
	u.DeleteAt = field.NewTime(table, "delete_at")
	u.UserID = field.NewInt64(table, "user_id")
	u.AccountType = field.NewString(table, "account_type")
	u.Account = field.NewString(table, "account")
	u.Password = field.NewString(table, "password")
	u.AppID = field.NewInt64(table, "app_id")

	u.fillFieldMap()

	return u
}

func (u *userProve) WithContext(ctx context.Context) IUserProveDo {
	return u.userProveDo.WithContext(ctx)
}

func (u userProve) TableName() string { return u.userProveDo.TableName() }

func (u userProve) Alias() string { return u.userProveDo.Alias() }

func (u userProve) Columns(cols ...field.Expr) gen.Columns { return u.userProveDo.Columns(cols...) }

func (u *userProve) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userProve) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["create_at"] = u.CreateAt
	u.fieldMap["update_at"] = u.UpdateAt
	u.fieldMap["delete_at"] = u.DeleteAt
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["account_type"] = u.AccountType
	u.fieldMap["account"] = u.Account
	u.fieldMap["password"] = u.Password
	u.fieldMap["app_id"] = u.AppID
}

func (u userProve) clone(db *gorm.DB) userProve {
	u.userProveDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userProve) replaceDB(db *gorm.DB) userProve {
	u.userProveDo.ReplaceDB(db)
	return u
}

type userProveDo struct{ gen.DO }

type IUserProveDo interface {
	gen.SubQuery
	Debug() IUserProveDo
	WithContext(ctx context.Context) IUserProveDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserProveDo
	WriteDB() IUserProveDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserProveDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserProveDo
	Not(conds ...gen.Condition) IUserProveDo
	Or(conds ...gen.Condition) IUserProveDo
	Select(conds ...field.Expr) IUserProveDo
	Where(conds ...gen.Condition) IUserProveDo
	Order(conds ...field.Expr) IUserProveDo
	Distinct(cols ...field.Expr) IUserProveDo
	Omit(cols ...field.Expr) IUserProveDo
	Join(table schema.Tabler, on ...field.Expr) IUserProveDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserProveDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserProveDo
	Group(cols ...field.Expr) IUserProveDo
	Having(conds ...gen.Condition) IUserProveDo
	Limit(limit int) IUserProveDo
	Offset(offset int) IUserProveDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserProveDo
	Unscoped() IUserProveDo
	Create(values ...*model.UserProve) error
	CreateInBatches(values []*model.UserProve, batchSize int) error
	Save(values ...*model.UserProve) error
	First() (*model.UserProve, error)
	Take() (*model.UserProve, error)
	Last() (*model.UserProve, error)
	Find() ([]*model.UserProve, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserProve, err error)
	FindInBatches(result *[]*model.UserProve, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserProve) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserProveDo
	Assign(attrs ...field.AssignExpr) IUserProveDo
	Joins(fields ...field.RelationField) IUserProveDo
	Preload(fields ...field.RelationField) IUserProveDo
	FirstOrInit() (*model.UserProve, error)
	FirstOrCreate() (*model.UserProve, error)
	FindByPage(offset int, limit int) (result []*model.UserProve, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserProveDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userProveDo) Debug() IUserProveDo {
	return u.withDO(u.DO.Debug())
}

func (u userProveDo) WithContext(ctx context.Context) IUserProveDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userProveDo) ReadDB() IUserProveDo {
	return u.Clauses(dbresolver.Read)
}

func (u userProveDo) WriteDB() IUserProveDo {
	return u.Clauses(dbresolver.Write)
}

func (u userProveDo) Session(config *gorm.Session) IUserProveDo {
	return u.withDO(u.DO.Session(config))
}

func (u userProveDo) Clauses(conds ...clause.Expression) IUserProveDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userProveDo) Returning(value interface{}, columns ...string) IUserProveDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userProveDo) Not(conds ...gen.Condition) IUserProveDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userProveDo) Or(conds ...gen.Condition) IUserProveDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userProveDo) Select(conds ...field.Expr) IUserProveDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userProveDo) Where(conds ...gen.Condition) IUserProveDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userProveDo) Order(conds ...field.Expr) IUserProveDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userProveDo) Distinct(cols ...field.Expr) IUserProveDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userProveDo) Omit(cols ...field.Expr) IUserProveDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userProveDo) Join(table schema.Tabler, on ...field.Expr) IUserProveDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userProveDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserProveDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userProveDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserProveDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userProveDo) Group(cols ...field.Expr) IUserProveDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userProveDo) Having(conds ...gen.Condition) IUserProveDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userProveDo) Limit(limit int) IUserProveDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userProveDo) Offset(offset int) IUserProveDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userProveDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserProveDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userProveDo) Unscoped() IUserProveDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userProveDo) Create(values ...*model.UserProve) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userProveDo) CreateInBatches(values []*model.UserProve, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userProveDo) Save(values ...*model.UserProve) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userProveDo) First() (*model.UserProve, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProve), nil
	}
}

func (u userProveDo) Take() (*model.UserProve, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProve), nil
	}
}

func (u userProveDo) Last() (*model.UserProve, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProve), nil
	}
}

func (u userProveDo) Find() ([]*model.UserProve, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserProve), err
}

func (u userProveDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserProve, err error) {
	buf := make([]*model.UserProve, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userProveDo) FindInBatches(result *[]*model.UserProve, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userProveDo) Attrs(attrs ...field.AssignExpr) IUserProveDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userProveDo) Assign(attrs ...field.AssignExpr) IUserProveDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userProveDo) Joins(fields ...field.RelationField) IUserProveDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userProveDo) Preload(fields ...field.RelationField) IUserProveDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userProveDo) FirstOrInit() (*model.UserProve, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProve), nil
	}
}

func (u userProveDo) FirstOrCreate() (*model.UserProve, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserProve), nil
	}
}

func (u userProveDo) FindByPage(offset int, limit int) (result []*model.UserProve, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userProveDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userProveDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userProveDo) Delete(models ...*model.UserProve) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userProveDo) withDO(do gen.Dao) *userProveDo {
	u.DO = *do.(*gen.DO)
	return u
}

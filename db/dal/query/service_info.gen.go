// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newServiceInfo(db *gorm.DB, opts ...gen.DOOption) serviceInfo {
	_serviceInfo := serviceInfo{}

	_serviceInfo.serviceInfoDo.UseDB(db, opts...)
	_serviceInfo.serviceInfoDo.UseModel(&model.ServiceInfo{})

	tableName := _serviceInfo.serviceInfoDo.TableName()
	_serviceInfo.ALL = field.NewAsterisk(tableName)
	_serviceInfo.ID = field.NewInt64(tableName, "id")
	_serviceInfo.CreateAt = field.NewTime(tableName, "create_at")
	_serviceInfo.UpdateAt = field.NewTime(tableName, "update_at")
	_serviceInfo.DeleteAt = field.NewTime(tableName, "delete_at")
	_serviceInfo.ServiceName = field.NewString(tableName, "service_name")
	_serviceInfo.ServiceExecDir = field.NewString(tableName, "service_exec_dir")
	_serviceInfo.ServiceVersion = field.NewString(tableName, "service_version")
	_serviceInfo.ServiceType = field.NewString(tableName, "service_type")
	_serviceInfo.Status = field.NewString(tableName, "status")
	_serviceInfo.VisitURL = field.NewString(tableName, "visit_url")
	_serviceInfo.NodeID = field.NewString(tableName, "node_id")

	_serviceInfo.fillFieldMap()

	return _serviceInfo
}

// serviceInfo 服务代理的基本信息,包含程序
type serviceInfo struct {
	serviceInfoDo serviceInfoDo

	ALL            field.Asterisk
	ID             field.Int64  // 数据id
	CreateAt       field.Time   // 创建时间
	UpdateAt       field.Time   // 更新时间
	DeleteAt       field.Time   // 删除时间
	ServiceName    field.String // 服务名称
	ServiceExecDir field.String // 程序运行目录
	ServiceVersion field.String // 服务版本
	ServiceType    field.String // 服务类别(1水印 2智能 3数权)
	Status         field.String // 1表示正常 2表示异常(不能用)
	VisitURL       field.String // 访问地址
	NodeID         field.String // 节点id

	fieldMap map[string]field.Expr
}

func (s serviceInfo) Table(newTableName string) *serviceInfo {
	s.serviceInfoDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s serviceInfo) As(alias string) *serviceInfo {
	s.serviceInfoDo.DO = *(s.serviceInfoDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *serviceInfo) updateTableName(table string) *serviceInfo {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreateAt = field.NewTime(table, "create_at")
	s.UpdateAt = field.NewTime(table, "update_at")
	s.DeleteAt = field.NewTime(table, "delete_at")
	s.ServiceName = field.NewString(table, "service_name")
	s.ServiceExecDir = field.NewString(table, "service_exec_dir")
	s.ServiceVersion = field.NewString(table, "service_version")
	s.ServiceType = field.NewString(table, "service_type")
	s.Status = field.NewString(table, "status")
	s.VisitURL = field.NewString(table, "visit_url")
	s.NodeID = field.NewString(table, "node_id")

	s.fillFieldMap()

	return s
}

func (s *serviceInfo) WithContext(ctx context.Context) IServiceInfoDo {
	return s.serviceInfoDo.WithContext(ctx)
}

func (s serviceInfo) TableName() string { return s.serviceInfoDo.TableName() }

func (s serviceInfo) Alias() string { return s.serviceInfoDo.Alias() }

func (s serviceInfo) Columns(cols ...field.Expr) gen.Columns { return s.serviceInfoDo.Columns(cols...) }

func (s *serviceInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *serviceInfo) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["create_at"] = s.CreateAt
	s.fieldMap["update_at"] = s.UpdateAt
	s.fieldMap["delete_at"] = s.DeleteAt
	s.fieldMap["service_name"] = s.ServiceName
	s.fieldMap["service_exec_dir"] = s.ServiceExecDir
	s.fieldMap["service_version"] = s.ServiceVersion
	s.fieldMap["service_type"] = s.ServiceType
	s.fieldMap["status"] = s.Status
	s.fieldMap["visit_url"] = s.VisitURL
	s.fieldMap["node_id"] = s.NodeID
}

func (s serviceInfo) clone(db *gorm.DB) serviceInfo {
	s.serviceInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s serviceInfo) replaceDB(db *gorm.DB) serviceInfo {
	s.serviceInfoDo.ReplaceDB(db)
	return s
}

type serviceInfoDo struct{ gen.DO }

type IServiceInfoDo interface {
	gen.SubQuery
	Debug() IServiceInfoDo
	WithContext(ctx context.Context) IServiceInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IServiceInfoDo
	WriteDB() IServiceInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IServiceInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IServiceInfoDo
	Not(conds ...gen.Condition) IServiceInfoDo
	Or(conds ...gen.Condition) IServiceInfoDo
	Select(conds ...field.Expr) IServiceInfoDo
	Where(conds ...gen.Condition) IServiceInfoDo
	Order(conds ...field.Expr) IServiceInfoDo
	Distinct(cols ...field.Expr) IServiceInfoDo
	Omit(cols ...field.Expr) IServiceInfoDo
	Join(table schema.Tabler, on ...field.Expr) IServiceInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IServiceInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IServiceInfoDo
	Group(cols ...field.Expr) IServiceInfoDo
	Having(conds ...gen.Condition) IServiceInfoDo
	Limit(limit int) IServiceInfoDo
	Offset(offset int) IServiceInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceInfoDo
	Unscoped() IServiceInfoDo
	Create(values ...*model.ServiceInfo) error
	CreateInBatches(values []*model.ServiceInfo, batchSize int) error
	Save(values ...*model.ServiceInfo) error
	First() (*model.ServiceInfo, error)
	Take() (*model.ServiceInfo, error)
	Last() (*model.ServiceInfo, error)
	Find() ([]*model.ServiceInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServiceInfo, err error)
	FindInBatches(result *[]*model.ServiceInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ServiceInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IServiceInfoDo
	Assign(attrs ...field.AssignExpr) IServiceInfoDo
	Joins(fields ...field.RelationField) IServiceInfoDo
	Preload(fields ...field.RelationField) IServiceInfoDo
	FirstOrInit() (*model.ServiceInfo, error)
	FirstOrCreate() (*model.ServiceInfo, error)
	FindByPage(offset int, limit int) (result []*model.ServiceInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IServiceInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s serviceInfoDo) Debug() IServiceInfoDo {
	return s.withDO(s.DO.Debug())
}

func (s serviceInfoDo) WithContext(ctx context.Context) IServiceInfoDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s serviceInfoDo) ReadDB() IServiceInfoDo {
	return s.Clauses(dbresolver.Read)
}

func (s serviceInfoDo) WriteDB() IServiceInfoDo {
	return s.Clauses(dbresolver.Write)
}

func (s serviceInfoDo) Session(config *gorm.Session) IServiceInfoDo {
	return s.withDO(s.DO.Session(config))
}

func (s serviceInfoDo) Clauses(conds ...clause.Expression) IServiceInfoDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s serviceInfoDo) Returning(value interface{}, columns ...string) IServiceInfoDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s serviceInfoDo) Not(conds ...gen.Condition) IServiceInfoDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s serviceInfoDo) Or(conds ...gen.Condition) IServiceInfoDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s serviceInfoDo) Select(conds ...field.Expr) IServiceInfoDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s serviceInfoDo) Where(conds ...gen.Condition) IServiceInfoDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s serviceInfoDo) Order(conds ...field.Expr) IServiceInfoDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s serviceInfoDo) Distinct(cols ...field.Expr) IServiceInfoDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s serviceInfoDo) Omit(cols ...field.Expr) IServiceInfoDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s serviceInfoDo) Join(table schema.Tabler, on ...field.Expr) IServiceInfoDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s serviceInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IServiceInfoDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s serviceInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IServiceInfoDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s serviceInfoDo) Group(cols ...field.Expr) IServiceInfoDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s serviceInfoDo) Having(conds ...gen.Condition) IServiceInfoDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s serviceInfoDo) Limit(limit int) IServiceInfoDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s serviceInfoDo) Offset(offset int) IServiceInfoDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s serviceInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IServiceInfoDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s serviceInfoDo) Unscoped() IServiceInfoDo {
	return s.withDO(s.DO.Unscoped())
}

func (s serviceInfoDo) Create(values ...*model.ServiceInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s serviceInfoDo) CreateInBatches(values []*model.ServiceInfo, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s serviceInfoDo) Save(values ...*model.ServiceInfo) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s serviceInfoDo) First() (*model.ServiceInfo, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceInfo), nil
	}
}

func (s serviceInfoDo) Take() (*model.ServiceInfo, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceInfo), nil
	}
}

func (s serviceInfoDo) Last() (*model.ServiceInfo, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceInfo), nil
	}
}

func (s serviceInfoDo) Find() ([]*model.ServiceInfo, error) {
	result, err := s.DO.Find()
	return result.([]*model.ServiceInfo), err
}

func (s serviceInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ServiceInfo, err error) {
	buf := make([]*model.ServiceInfo, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s serviceInfoDo) FindInBatches(result *[]*model.ServiceInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s serviceInfoDo) Attrs(attrs ...field.AssignExpr) IServiceInfoDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s serviceInfoDo) Assign(attrs ...field.AssignExpr) IServiceInfoDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s serviceInfoDo) Joins(fields ...field.RelationField) IServiceInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s serviceInfoDo) Preload(fields ...field.RelationField) IServiceInfoDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s serviceInfoDo) FirstOrInit() (*model.ServiceInfo, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceInfo), nil
	}
}

func (s serviceInfoDo) FirstOrCreate() (*model.ServiceInfo, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ServiceInfo), nil
	}
}

func (s serviceInfoDo) FindByPage(offset int, limit int) (result []*model.ServiceInfo, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s serviceInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s serviceInfoDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s serviceInfoDo) Delete(models ...*model.ServiceInfo) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *serviceInfoDo) withDO(do gen.Dao) *serviceInfoDo {
	s.DO = *do.(*gen.DO)
	return s
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newDataSharelog(db *gorm.DB, opts ...gen.DOOption) dataSharelog {
	_dataSharelog := dataSharelog{}

	_dataSharelog.dataSharelogDo.UseDB(db, opts...)
	_dataSharelog.dataSharelogDo.UseModel(&model.DataSharelog{})

	tableName := _dataSharelog.dataSharelogDo.TableName()
	_dataSharelog.ALL = field.NewAsterisk(tableName)
	_dataSharelog.ID = field.NewInt64(tableName, "id")
	_dataSharelog.CreateAt = field.NewTime(tableName, "create_at")
	_dataSharelog.UpdateAt = field.NewTime(tableName, "update_at")
	_dataSharelog.DeleteAt = field.NewTime(tableName, "delete_at")
	_dataSharelog.BuyerName = field.NewString(tableName, "buyer_name")
	_dataSharelog.SellerName = field.NewString(tableName, "seller_name")
	_dataSharelog.DataIds = field.NewString(tableName, "data_ids")
	_dataSharelog.Price = field.NewFloat64(tableName, "price")
	_dataSharelog.DataName = field.NewString(tableName, "data_name")

	_dataSharelog.fillFieldMap()

	return _dataSharelog
}

// dataSharelog 成功共享的信息记录
type dataSharelog struct {
	dataSharelogDo dataSharelogDo

	ALL        field.Asterisk
	ID         field.Int64   // 数据id
	CreateAt   field.Time    // 创建时间
	UpdateAt   field.Time    // 修改时间
	DeleteAt   field.Time    // 删除时间
	BuyerName  field.String  // 买家名字
	SellerName field.String  // 卖家名字
	DataIds    field.String  // 数据集合
	Price      field.Float64 // 价格
	DataName   field.String  // 数据名称

	fieldMap map[string]field.Expr
}

func (d dataSharelog) Table(newTableName string) *dataSharelog {
	d.dataSharelogDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dataSharelog) As(alias string) *dataSharelog {
	d.dataSharelogDo.DO = *(d.dataSharelogDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dataSharelog) updateTableName(table string) *dataSharelog {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.CreateAt = field.NewTime(table, "create_at")
	d.UpdateAt = field.NewTime(table, "update_at")
	d.DeleteAt = field.NewTime(table, "delete_at")
	d.BuyerName = field.NewString(table, "buyer_name")
	d.SellerName = field.NewString(table, "seller_name")
	d.DataIds = field.NewString(table, "data_ids")
	d.Price = field.NewFloat64(table, "price")
	d.DataName = field.NewString(table, "data_name")

	d.fillFieldMap()

	return d
}

func (d *dataSharelog) WithContext(ctx context.Context) IDataSharelogDo {
	return d.dataSharelogDo.WithContext(ctx)
}

func (d dataSharelog) TableName() string { return d.dataSharelogDo.TableName() }

func (d dataSharelog) Alias() string { return d.dataSharelogDo.Alias() }

func (d dataSharelog) Columns(cols ...field.Expr) gen.Columns {
	return d.dataSharelogDo.Columns(cols...)
}

func (d *dataSharelog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dataSharelog) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 9)
	d.fieldMap["id"] = d.ID
	d.fieldMap["create_at"] = d.CreateAt
	d.fieldMap["update_at"] = d.UpdateAt
	d.fieldMap["delete_at"] = d.DeleteAt
	d.fieldMap["buyer_name"] = d.BuyerName
	d.fieldMap["seller_name"] = d.SellerName
	d.fieldMap["data_ids"] = d.DataIds
	d.fieldMap["price"] = d.Price
	d.fieldMap["data_name"] = d.DataName
}

func (d dataSharelog) clone(db *gorm.DB) dataSharelog {
	d.dataSharelogDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dataSharelog) replaceDB(db *gorm.DB) dataSharelog {
	d.dataSharelogDo.ReplaceDB(db)
	return d
}

type dataSharelogDo struct{ gen.DO }

type IDataSharelogDo interface {
	gen.SubQuery
	Debug() IDataSharelogDo
	WithContext(ctx context.Context) IDataSharelogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDataSharelogDo
	WriteDB() IDataSharelogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDataSharelogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDataSharelogDo
	Not(conds ...gen.Condition) IDataSharelogDo
	Or(conds ...gen.Condition) IDataSharelogDo
	Select(conds ...field.Expr) IDataSharelogDo
	Where(conds ...gen.Condition) IDataSharelogDo
	Order(conds ...field.Expr) IDataSharelogDo
	Distinct(cols ...field.Expr) IDataSharelogDo
	Omit(cols ...field.Expr) IDataSharelogDo
	Join(table schema.Tabler, on ...field.Expr) IDataSharelogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDataSharelogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDataSharelogDo
	Group(cols ...field.Expr) IDataSharelogDo
	Having(conds ...gen.Condition) IDataSharelogDo
	Limit(limit int) IDataSharelogDo
	Offset(offset int) IDataSharelogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDataSharelogDo
	Unscoped() IDataSharelogDo
	Create(values ...*model.DataSharelog) error
	CreateInBatches(values []*model.DataSharelog, batchSize int) error
	Save(values ...*model.DataSharelog) error
	First() (*model.DataSharelog, error)
	Take() (*model.DataSharelog, error)
	Last() (*model.DataSharelog, error)
	Find() ([]*model.DataSharelog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataSharelog, err error)
	FindInBatches(result *[]*model.DataSharelog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DataSharelog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDataSharelogDo
	Assign(attrs ...field.AssignExpr) IDataSharelogDo
	Joins(fields ...field.RelationField) IDataSharelogDo
	Preload(fields ...field.RelationField) IDataSharelogDo
	FirstOrInit() (*model.DataSharelog, error)
	FirstOrCreate() (*model.DataSharelog, error)
	FindByPage(offset int, limit int) (result []*model.DataSharelog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDataSharelogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dataSharelogDo) Debug() IDataSharelogDo {
	return d.withDO(d.DO.Debug())
}

func (d dataSharelogDo) WithContext(ctx context.Context) IDataSharelogDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dataSharelogDo) ReadDB() IDataSharelogDo {
	return d.Clauses(dbresolver.Read)
}

func (d dataSharelogDo) WriteDB() IDataSharelogDo {
	return d.Clauses(dbresolver.Write)
}

func (d dataSharelogDo) Session(config *gorm.Session) IDataSharelogDo {
	return d.withDO(d.DO.Session(config))
}

func (d dataSharelogDo) Clauses(conds ...clause.Expression) IDataSharelogDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dataSharelogDo) Returning(value interface{}, columns ...string) IDataSharelogDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dataSharelogDo) Not(conds ...gen.Condition) IDataSharelogDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dataSharelogDo) Or(conds ...gen.Condition) IDataSharelogDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dataSharelogDo) Select(conds ...field.Expr) IDataSharelogDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dataSharelogDo) Where(conds ...gen.Condition) IDataSharelogDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dataSharelogDo) Order(conds ...field.Expr) IDataSharelogDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dataSharelogDo) Distinct(cols ...field.Expr) IDataSharelogDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dataSharelogDo) Omit(cols ...field.Expr) IDataSharelogDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dataSharelogDo) Join(table schema.Tabler, on ...field.Expr) IDataSharelogDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dataSharelogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDataSharelogDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dataSharelogDo) RightJoin(table schema.Tabler, on ...field.Expr) IDataSharelogDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dataSharelogDo) Group(cols ...field.Expr) IDataSharelogDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dataSharelogDo) Having(conds ...gen.Condition) IDataSharelogDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dataSharelogDo) Limit(limit int) IDataSharelogDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dataSharelogDo) Offset(offset int) IDataSharelogDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dataSharelogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDataSharelogDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dataSharelogDo) Unscoped() IDataSharelogDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dataSharelogDo) Create(values ...*model.DataSharelog) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dataSharelogDo) CreateInBatches(values []*model.DataSharelog, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dataSharelogDo) Save(values ...*model.DataSharelog) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dataSharelogDo) First() (*model.DataSharelog, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataSharelog), nil
	}
}

func (d dataSharelogDo) Take() (*model.DataSharelog, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataSharelog), nil
	}
}

func (d dataSharelogDo) Last() (*model.DataSharelog, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataSharelog), nil
	}
}

func (d dataSharelogDo) Find() ([]*model.DataSharelog, error) {
	result, err := d.DO.Find()
	return result.([]*model.DataSharelog), err
}

func (d dataSharelogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataSharelog, err error) {
	buf := make([]*model.DataSharelog, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dataSharelogDo) FindInBatches(result *[]*model.DataSharelog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dataSharelogDo) Attrs(attrs ...field.AssignExpr) IDataSharelogDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dataSharelogDo) Assign(attrs ...field.AssignExpr) IDataSharelogDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dataSharelogDo) Joins(fields ...field.RelationField) IDataSharelogDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dataSharelogDo) Preload(fields ...field.RelationField) IDataSharelogDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dataSharelogDo) FirstOrInit() (*model.DataSharelog, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataSharelog), nil
	}
}

func (d dataSharelogDo) FirstOrCreate() (*model.DataSharelog, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataSharelog), nil
	}
}

func (d dataSharelogDo) FindByPage(offset int, limit int) (result []*model.DataSharelog, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dataSharelogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dataSharelogDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dataSharelogDo) Delete(models ...*model.DataSharelog) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dataSharelogDo) withDO(do gen.Dao) *dataSharelogDo {
	d.DO = *do.(*gen.DO)
	return d
}

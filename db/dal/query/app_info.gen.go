// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newAppInfo(db *gorm.DB, opts ...gen.DOOption) appInfo {
	_appInfo := appInfo{}

	_appInfo.appInfoDo.UseDB(db, opts...)
	_appInfo.appInfoDo.UseModel(&model.AppInfo{})

	tableName := _appInfo.appInfoDo.TableName()
	_appInfo.ALL = field.NewAsterisk(tableName)
	_appInfo.ID = field.NewInt64(tableName, "id")
	_appInfo.CreateAt = field.NewTime(tableName, "create_at")
	_appInfo.UpdateAt = field.NewTime(tableName, "update_at")
	_appInfo.DeleteAt = field.NewTime(tableName, "delete_at")
	_appInfo.AppName = field.NewString(tableName, "app_name")
	_appInfo.AppUser = field.NewString(tableName, "app_user")
	_appInfo.AppPhone = field.NewString(tableName, "app_phone")
	_appInfo.AppType = field.NewString(tableName, "app_type")
	_appInfo.AppPublic = field.NewString(tableName, "app_public")
	_appInfo.AppPublicMd5 = field.NewString(tableName, "app_public_md5")
	_appInfo.AppPrivate = field.NewString(tableName, "app_private")
	_appInfo.AppPrivateMd5 = field.NewString(tableName, "app_private_md5")
	_appInfo.Algo = field.NewString(tableName, "algo")
	_appInfo.StoreKey = field.NewString(tableName, "store_key")
	_appInfo.StartTime = field.NewTime(tableName, "start_time")
	_appInfo.Status = field.NewString(tableName, "status")

	_appInfo.fillFieldMap()

	return _appInfo
}

// appInfo 业务应用的基本信息
type appInfo struct {
	appInfoDo appInfoDo

	ALL           field.Asterisk
	ID            field.Int64  // 数据id
	CreateAt      field.Time   // 创建时间
	UpdateAt      field.Time   // 更新时间
	DeleteAt      field.Time   // 删除时间
	AppName       field.String // 业务应用名称
	AppUser       field.String // 应用联系人
	AppPhone      field.String // 联系电话
	AppType       field.String // 业务应用类型(1文旅2电商3资产4交易)
	AppPublic     field.String // 应用公钥
	AppPublicMd5  field.String // 应用公钥md5
	AppPrivate    field.String // 应用私钥
	AppPrivateMd5 field.String // 应用私钥md5
	Algo          field.String // 算法
	StoreKey      field.String // 应用私钥
	StartTime     field.Time   // 开始时间
	Status        field.String // 1表示正常 2禁用 3暂停

	fieldMap map[string]field.Expr
}

func (a appInfo) Table(newTableName string) *appInfo {
	a.appInfoDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appInfo) As(alias string) *appInfo {
	a.appInfoDo.DO = *(a.appInfoDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appInfo) updateTableName(table string) *appInfo {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.CreateAt = field.NewTime(table, "create_at")
	a.UpdateAt = field.NewTime(table, "update_at")
	a.DeleteAt = field.NewTime(table, "delete_at")
	a.AppName = field.NewString(table, "app_name")
	a.AppUser = field.NewString(table, "app_user")
	a.AppPhone = field.NewString(table, "app_phone")
	a.AppType = field.NewString(table, "app_type")
	a.AppPublic = field.NewString(table, "app_public")
	a.AppPublicMd5 = field.NewString(table, "app_public_md5")
	a.AppPrivate = field.NewString(table, "app_private")
	a.AppPrivateMd5 = field.NewString(table, "app_private_md5")
	a.Algo = field.NewString(table, "algo")
	a.StoreKey = field.NewString(table, "store_key")
	a.StartTime = field.NewTime(table, "start_time")
	a.Status = field.NewString(table, "status")

	a.fillFieldMap()

	return a
}

func (a *appInfo) WithContext(ctx context.Context) IAppInfoDo { return a.appInfoDo.WithContext(ctx) }

func (a appInfo) TableName() string { return a.appInfoDo.TableName() }

func (a appInfo) Alias() string { return a.appInfoDo.Alias() }

func (a appInfo) Columns(cols ...field.Expr) gen.Columns { return a.appInfoDo.Columns(cols...) }

func (a *appInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appInfo) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 16)
	a.fieldMap["id"] = a.ID
	a.fieldMap["create_at"] = a.CreateAt
	a.fieldMap["update_at"] = a.UpdateAt
	a.fieldMap["delete_at"] = a.DeleteAt
	a.fieldMap["app_name"] = a.AppName
	a.fieldMap["app_user"] = a.AppUser
	a.fieldMap["app_phone"] = a.AppPhone
	a.fieldMap["app_type"] = a.AppType
	a.fieldMap["app_public"] = a.AppPublic
	a.fieldMap["app_public_md5"] = a.AppPublicMd5
	a.fieldMap["app_private"] = a.AppPrivate
	a.fieldMap["app_private_md5"] = a.AppPrivateMd5
	a.fieldMap["algo"] = a.Algo
	a.fieldMap["store_key"] = a.StoreKey
	a.fieldMap["start_time"] = a.StartTime
	a.fieldMap["status"] = a.Status
}

func (a appInfo) clone(db *gorm.DB) appInfo {
	a.appInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appInfo) replaceDB(db *gorm.DB) appInfo {
	a.appInfoDo.ReplaceDB(db)
	return a
}

type appInfoDo struct{ gen.DO }

type IAppInfoDo interface {
	gen.SubQuery
	Debug() IAppInfoDo
	WithContext(ctx context.Context) IAppInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppInfoDo
	WriteDB() IAppInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppInfoDo
	Not(conds ...gen.Condition) IAppInfoDo
	Or(conds ...gen.Condition) IAppInfoDo
	Select(conds ...field.Expr) IAppInfoDo
	Where(conds ...gen.Condition) IAppInfoDo
	Order(conds ...field.Expr) IAppInfoDo
	Distinct(cols ...field.Expr) IAppInfoDo
	Omit(cols ...field.Expr) IAppInfoDo
	Join(table schema.Tabler, on ...field.Expr) IAppInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppInfoDo
	Group(cols ...field.Expr) IAppInfoDo
	Having(conds ...gen.Condition) IAppInfoDo
	Limit(limit int) IAppInfoDo
	Offset(offset int) IAppInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppInfoDo
	Unscoped() IAppInfoDo
	Create(values ...*model.AppInfo) error
	CreateInBatches(values []*model.AppInfo, batchSize int) error
	Save(values ...*model.AppInfo) error
	First() (*model.AppInfo, error)
	Take() (*model.AppInfo, error)
	Last() (*model.AppInfo, error)
	Find() ([]*model.AppInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppInfo, err error)
	FindInBatches(result *[]*model.AppInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AppInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppInfoDo
	Assign(attrs ...field.AssignExpr) IAppInfoDo
	Joins(fields ...field.RelationField) IAppInfoDo
	Preload(fields ...field.RelationField) IAppInfoDo
	FirstOrInit() (*model.AppInfo, error)
	FirstOrCreate() (*model.AppInfo, error)
	FindByPage(offset int, limit int) (result []*model.AppInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appInfoDo) Debug() IAppInfoDo {
	return a.withDO(a.DO.Debug())
}

func (a appInfoDo) WithContext(ctx context.Context) IAppInfoDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appInfoDo) ReadDB() IAppInfoDo {
	return a.Clauses(dbresolver.Read)
}

func (a appInfoDo) WriteDB() IAppInfoDo {
	return a.Clauses(dbresolver.Write)
}

func (a appInfoDo) Session(config *gorm.Session) IAppInfoDo {
	return a.withDO(a.DO.Session(config))
}

func (a appInfoDo) Clauses(conds ...clause.Expression) IAppInfoDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appInfoDo) Returning(value interface{}, columns ...string) IAppInfoDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appInfoDo) Not(conds ...gen.Condition) IAppInfoDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appInfoDo) Or(conds ...gen.Condition) IAppInfoDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appInfoDo) Select(conds ...field.Expr) IAppInfoDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appInfoDo) Where(conds ...gen.Condition) IAppInfoDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appInfoDo) Order(conds ...field.Expr) IAppInfoDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appInfoDo) Distinct(cols ...field.Expr) IAppInfoDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appInfoDo) Omit(cols ...field.Expr) IAppInfoDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appInfoDo) Join(table schema.Tabler, on ...field.Expr) IAppInfoDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppInfoDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppInfoDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appInfoDo) Group(cols ...field.Expr) IAppInfoDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appInfoDo) Having(conds ...gen.Condition) IAppInfoDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appInfoDo) Limit(limit int) IAppInfoDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appInfoDo) Offset(offset int) IAppInfoDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppInfoDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appInfoDo) Unscoped() IAppInfoDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appInfoDo) Create(values ...*model.AppInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appInfoDo) CreateInBatches(values []*model.AppInfo, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appInfoDo) Save(values ...*model.AppInfo) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appInfoDo) First() (*model.AppInfo, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppInfo), nil
	}
}

func (a appInfoDo) Take() (*model.AppInfo, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppInfo), nil
	}
}

func (a appInfoDo) Last() (*model.AppInfo, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppInfo), nil
	}
}

func (a appInfoDo) Find() ([]*model.AppInfo, error) {
	result, err := a.DO.Find()
	return result.([]*model.AppInfo), err
}

func (a appInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppInfo, err error) {
	buf := make([]*model.AppInfo, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appInfoDo) FindInBatches(result *[]*model.AppInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appInfoDo) Attrs(attrs ...field.AssignExpr) IAppInfoDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appInfoDo) Assign(attrs ...field.AssignExpr) IAppInfoDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appInfoDo) Joins(fields ...field.RelationField) IAppInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appInfoDo) Preload(fields ...field.RelationField) IAppInfoDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appInfoDo) FirstOrInit() (*model.AppInfo, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppInfo), nil
	}
}

func (a appInfoDo) FirstOrCreate() (*model.AppInfo, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppInfo), nil
	}
}

func (a appInfoDo) FindByPage(offset int, limit int) (result []*model.AppInfo, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appInfoDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appInfoDo) Delete(models ...*model.AppInfo) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appInfoDo) withDO(do gen.Dao) *appInfoDo {
	a.DO = *do.(*gen.DO)
	return a
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newUserBank(db *gorm.DB, opts ...gen.DOOption) userBank {
	_userBank := userBank{}

	_userBank.userBankDo.UseDB(db, opts...)
	_userBank.userBankDo.UseModel(&model.UserBank{})

	tableName := _userBank.userBankDo.TableName()
	_userBank.ALL = field.NewAsterisk(tableName)
	_userBank.ID = field.NewInt64(tableName, "id")
	_userBank.CreateAt = field.NewTime(tableName, "create_at")
	_userBank.UpdateAt = field.NewTime(tableName, "update_at")
	_userBank.DeleteAt = field.NewTime(tableName, "delete_at")
	_userBank.UserID = field.NewInt64(tableName, "user_id")
	_userBank.UserBankName = field.NewString(tableName, "user_bank_name")
	_userBank.UserBank = field.NewString(tableName, "user_bank")
	_userBank.Status = field.NewString(tableName, "status")

	_userBank.fillFieldMap()

	return _userBank
}

// userBank 用户用于支付信息表
type userBank struct {
	userBankDo userBankDo

	ALL          field.Asterisk
	ID           field.Int64  // 数据id
	CreateAt     field.Time   // 创建时间
	UpdateAt     field.Time   // 更新时间
	DeleteAt     field.Time   // 删除时间
	UserID       field.Int64  // 用户id
	UserBankName field.String // 开户行名称
	UserBank     field.String // 银行卡号
	Status       field.String // 1审核通过 0未审核

	fieldMap map[string]field.Expr
}

func (u userBank) Table(newTableName string) *userBank {
	u.userBankDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userBank) As(alias string) *userBank {
	u.userBankDo.DO = *(u.userBankDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userBank) updateTableName(table string) *userBank {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.CreateAt = field.NewTime(table, "create_at")
	u.UpdateAt = field.NewTime(table, "update_at")
	u.DeleteAt = field.NewTime(table, "delete_at")
	u.UserID = field.NewInt64(table, "user_id")
	u.UserBankName = field.NewString(table, "user_bank_name")
	u.UserBank = field.NewString(table, "user_bank")
	u.Status = field.NewString(table, "status")

	u.fillFieldMap()

	return u
}

func (u *userBank) WithContext(ctx context.Context) IUserBankDo { return u.userBankDo.WithContext(ctx) }

func (u userBank) TableName() string { return u.userBankDo.TableName() }

func (u userBank) Alias() string { return u.userBankDo.Alias() }

func (u userBank) Columns(cols ...field.Expr) gen.Columns { return u.userBankDo.Columns(cols...) }

func (u *userBank) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userBank) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["create_at"] = u.CreateAt
	u.fieldMap["update_at"] = u.UpdateAt
	u.fieldMap["delete_at"] = u.DeleteAt
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["user_bank_name"] = u.UserBankName
	u.fieldMap["user_bank"] = u.UserBank
	u.fieldMap["status"] = u.Status
}

func (u userBank) clone(db *gorm.DB) userBank {
	u.userBankDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userBank) replaceDB(db *gorm.DB) userBank {
	u.userBankDo.ReplaceDB(db)
	return u
}

type userBankDo struct{ gen.DO }

type IUserBankDo interface {
	gen.SubQuery
	Debug() IUserBankDo
	WithContext(ctx context.Context) IUserBankDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserBankDo
	WriteDB() IUserBankDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserBankDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserBankDo
	Not(conds ...gen.Condition) IUserBankDo
	Or(conds ...gen.Condition) IUserBankDo
	Select(conds ...field.Expr) IUserBankDo
	Where(conds ...gen.Condition) IUserBankDo
	Order(conds ...field.Expr) IUserBankDo
	Distinct(cols ...field.Expr) IUserBankDo
	Omit(cols ...field.Expr) IUserBankDo
	Join(table schema.Tabler, on ...field.Expr) IUserBankDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserBankDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserBankDo
	Group(cols ...field.Expr) IUserBankDo
	Having(conds ...gen.Condition) IUserBankDo
	Limit(limit int) IUserBankDo
	Offset(offset int) IUserBankDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBankDo
	Unscoped() IUserBankDo
	Create(values ...*model.UserBank) error
	CreateInBatches(values []*model.UserBank, batchSize int) error
	Save(values ...*model.UserBank) error
	First() (*model.UserBank, error)
	Take() (*model.UserBank, error)
	Last() (*model.UserBank, error)
	Find() ([]*model.UserBank, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBank, err error)
	FindInBatches(result *[]*model.UserBank, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserBank) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserBankDo
	Assign(attrs ...field.AssignExpr) IUserBankDo
	Joins(fields ...field.RelationField) IUserBankDo
	Preload(fields ...field.RelationField) IUserBankDo
	FirstOrInit() (*model.UserBank, error)
	FirstOrCreate() (*model.UserBank, error)
	FindByPage(offset int, limit int) (result []*model.UserBank, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserBankDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userBankDo) Debug() IUserBankDo {
	return u.withDO(u.DO.Debug())
}

func (u userBankDo) WithContext(ctx context.Context) IUserBankDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userBankDo) ReadDB() IUserBankDo {
	return u.Clauses(dbresolver.Read)
}

func (u userBankDo) WriteDB() IUserBankDo {
	return u.Clauses(dbresolver.Write)
}

func (u userBankDo) Session(config *gorm.Session) IUserBankDo {
	return u.withDO(u.DO.Session(config))
}

func (u userBankDo) Clauses(conds ...clause.Expression) IUserBankDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userBankDo) Returning(value interface{}, columns ...string) IUserBankDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userBankDo) Not(conds ...gen.Condition) IUserBankDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userBankDo) Or(conds ...gen.Condition) IUserBankDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userBankDo) Select(conds ...field.Expr) IUserBankDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userBankDo) Where(conds ...gen.Condition) IUserBankDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userBankDo) Order(conds ...field.Expr) IUserBankDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userBankDo) Distinct(cols ...field.Expr) IUserBankDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userBankDo) Omit(cols ...field.Expr) IUserBankDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userBankDo) Join(table schema.Tabler, on ...field.Expr) IUserBankDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userBankDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserBankDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userBankDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserBankDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userBankDo) Group(cols ...field.Expr) IUserBankDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userBankDo) Having(conds ...gen.Condition) IUserBankDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userBankDo) Limit(limit int) IUserBankDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userBankDo) Offset(offset int) IUserBankDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userBankDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserBankDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userBankDo) Unscoped() IUserBankDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userBankDo) Create(values ...*model.UserBank) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userBankDo) CreateInBatches(values []*model.UserBank, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userBankDo) Save(values ...*model.UserBank) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userBankDo) First() (*model.UserBank, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBank), nil
	}
}

func (u userBankDo) Take() (*model.UserBank, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBank), nil
	}
}

func (u userBankDo) Last() (*model.UserBank, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBank), nil
	}
}

func (u userBankDo) Find() ([]*model.UserBank, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserBank), err
}

func (u userBankDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBank, err error) {
	buf := make([]*model.UserBank, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userBankDo) FindInBatches(result *[]*model.UserBank, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userBankDo) Attrs(attrs ...field.AssignExpr) IUserBankDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userBankDo) Assign(attrs ...field.AssignExpr) IUserBankDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userBankDo) Joins(fields ...field.RelationField) IUserBankDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userBankDo) Preload(fields ...field.RelationField) IUserBankDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userBankDo) FirstOrInit() (*model.UserBank, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBank), nil
	}
}

func (u userBankDo) FirstOrCreate() (*model.UserBank, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBank), nil
	}
}

func (u userBankDo) FindByPage(offset int, limit int) (result []*model.UserBank, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userBankDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userBankDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userBankDo) Delete(models ...*model.UserBank) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userBankDo) withDO(do gen.Dao) *userBankDo {
	u.DO = *do.(*gen.DO)
	return u
}

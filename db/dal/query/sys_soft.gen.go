// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newSysSoft(db *gorm.DB, opts ...gen.DOOption) sysSoft {
	_sysSoft := sysSoft{}

	_sysSoft.sysSoftDo.UseDB(db, opts...)
	_sysSoft.sysSoftDo.UseModel(&model.SysSoft{})

	tableName := _sysSoft.sysSoftDo.TableName()
	_sysSoft.ALL = field.NewAsterisk(tableName)
	_sysSoft.ID = field.NewInt64(tableName, "id")
	_sysSoft.CreateAt = field.NewTime(tableName, "create_at")
	_sysSoft.UpdateAt = field.NewTime(tableName, "update_at")
	_sysSoft.DeleteAt = field.NewTime(tableName, "delete_at")
	_sysSoft.SoftID = field.NewString(tableName, "soft_id")
	_sysSoft.SoftName = field.NewString(tableName, "soft_name")
	_sysSoft.SoftVersion = field.NewString(tableName, "soft_version")
	_sysSoft.SoftPackageURL = field.NewString(tableName, "soft_package_url")
	_sysSoft.SoftPackageMd5 = field.NewString(tableName, "soft_package_md5")
	_sysSoft.UploadUser = field.NewString(tableName, "upload_user")

	_sysSoft.fillFieldMap()

	return _sysSoft
}

// sysSoft 软件信息表
type sysSoft struct {
	sysSoftDo sysSoftDo

	ALL            field.Asterisk
	ID             field.Int64  // 数据id
	CreateAt       field.Time   // 创建时间
	UpdateAt       field.Time   // 更新时间
	DeleteAt       field.Time   // 删除时间
	SoftID         field.String // 软件id
	SoftName       field.String // 软件名称
	SoftVersion    field.String // 软件版本
	SoftPackageURL field.String // 软件包url
	SoftPackageMd5 field.String // 软件包md5
	UploadUser     field.String // 上传用户

	fieldMap map[string]field.Expr
}

func (s sysSoft) Table(newTableName string) *sysSoft {
	s.sysSoftDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysSoft) As(alias string) *sysSoft {
	s.sysSoftDo.DO = *(s.sysSoftDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysSoft) updateTableName(table string) *sysSoft {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreateAt = field.NewTime(table, "create_at")
	s.UpdateAt = field.NewTime(table, "update_at")
	s.DeleteAt = field.NewTime(table, "delete_at")
	s.SoftID = field.NewString(table, "soft_id")
	s.SoftName = field.NewString(table, "soft_name")
	s.SoftVersion = field.NewString(table, "soft_version")
	s.SoftPackageURL = field.NewString(table, "soft_package_url")
	s.SoftPackageMd5 = field.NewString(table, "soft_package_md5")
	s.UploadUser = field.NewString(table, "upload_user")

	s.fillFieldMap()

	return s
}

func (s *sysSoft) WithContext(ctx context.Context) ISysSoftDo { return s.sysSoftDo.WithContext(ctx) }

func (s sysSoft) TableName() string { return s.sysSoftDo.TableName() }

func (s sysSoft) Alias() string { return s.sysSoftDo.Alias() }

func (s sysSoft) Columns(cols ...field.Expr) gen.Columns { return s.sysSoftDo.Columns(cols...) }

func (s *sysSoft) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysSoft) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["create_at"] = s.CreateAt
	s.fieldMap["update_at"] = s.UpdateAt
	s.fieldMap["delete_at"] = s.DeleteAt
	s.fieldMap["soft_id"] = s.SoftID
	s.fieldMap["soft_name"] = s.SoftName
	s.fieldMap["soft_version"] = s.SoftVersion
	s.fieldMap["soft_package_url"] = s.SoftPackageURL
	s.fieldMap["soft_package_md5"] = s.SoftPackageMd5
	s.fieldMap["upload_user"] = s.UploadUser
}

func (s sysSoft) clone(db *gorm.DB) sysSoft {
	s.sysSoftDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysSoft) replaceDB(db *gorm.DB) sysSoft {
	s.sysSoftDo.ReplaceDB(db)
	return s
}

type sysSoftDo struct{ gen.DO }

type ISysSoftDo interface {
	gen.SubQuery
	Debug() ISysSoftDo
	WithContext(ctx context.Context) ISysSoftDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysSoftDo
	WriteDB() ISysSoftDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysSoftDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysSoftDo
	Not(conds ...gen.Condition) ISysSoftDo
	Or(conds ...gen.Condition) ISysSoftDo
	Select(conds ...field.Expr) ISysSoftDo
	Where(conds ...gen.Condition) ISysSoftDo
	Order(conds ...field.Expr) ISysSoftDo
	Distinct(cols ...field.Expr) ISysSoftDo
	Omit(cols ...field.Expr) ISysSoftDo
	Join(table schema.Tabler, on ...field.Expr) ISysSoftDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysSoftDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysSoftDo
	Group(cols ...field.Expr) ISysSoftDo
	Having(conds ...gen.Condition) ISysSoftDo
	Limit(limit int) ISysSoftDo
	Offset(offset int) ISysSoftDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysSoftDo
	Unscoped() ISysSoftDo
	Create(values ...*model.SysSoft) error
	CreateInBatches(values []*model.SysSoft, batchSize int) error
	Save(values ...*model.SysSoft) error
	First() (*model.SysSoft, error)
	Take() (*model.SysSoft, error)
	Last() (*model.SysSoft, error)
	Find() ([]*model.SysSoft, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysSoft, err error)
	FindInBatches(result *[]*model.SysSoft, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysSoft) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysSoftDo
	Assign(attrs ...field.AssignExpr) ISysSoftDo
	Joins(fields ...field.RelationField) ISysSoftDo
	Preload(fields ...field.RelationField) ISysSoftDo
	FirstOrInit() (*model.SysSoft, error)
	FirstOrCreate() (*model.SysSoft, error)
	FindByPage(offset int, limit int) (result []*model.SysSoft, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysSoftDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysSoftDo) Debug() ISysSoftDo {
	return s.withDO(s.DO.Debug())
}

func (s sysSoftDo) WithContext(ctx context.Context) ISysSoftDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysSoftDo) ReadDB() ISysSoftDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysSoftDo) WriteDB() ISysSoftDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysSoftDo) Session(config *gorm.Session) ISysSoftDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysSoftDo) Clauses(conds ...clause.Expression) ISysSoftDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysSoftDo) Returning(value interface{}, columns ...string) ISysSoftDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysSoftDo) Not(conds ...gen.Condition) ISysSoftDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysSoftDo) Or(conds ...gen.Condition) ISysSoftDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysSoftDo) Select(conds ...field.Expr) ISysSoftDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysSoftDo) Where(conds ...gen.Condition) ISysSoftDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysSoftDo) Order(conds ...field.Expr) ISysSoftDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysSoftDo) Distinct(cols ...field.Expr) ISysSoftDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysSoftDo) Omit(cols ...field.Expr) ISysSoftDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysSoftDo) Join(table schema.Tabler, on ...field.Expr) ISysSoftDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysSoftDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysSoftDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysSoftDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysSoftDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysSoftDo) Group(cols ...field.Expr) ISysSoftDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysSoftDo) Having(conds ...gen.Condition) ISysSoftDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysSoftDo) Limit(limit int) ISysSoftDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysSoftDo) Offset(offset int) ISysSoftDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysSoftDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysSoftDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysSoftDo) Unscoped() ISysSoftDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysSoftDo) Create(values ...*model.SysSoft) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysSoftDo) CreateInBatches(values []*model.SysSoft, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysSoftDo) Save(values ...*model.SysSoft) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysSoftDo) First() (*model.SysSoft, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysSoft), nil
	}
}

func (s sysSoftDo) Take() (*model.SysSoft, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysSoft), nil
	}
}

func (s sysSoftDo) Last() (*model.SysSoft, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysSoft), nil
	}
}

func (s sysSoftDo) Find() ([]*model.SysSoft, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysSoft), err
}

func (s sysSoftDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysSoft, err error) {
	buf := make([]*model.SysSoft, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysSoftDo) FindInBatches(result *[]*model.SysSoft, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysSoftDo) Attrs(attrs ...field.AssignExpr) ISysSoftDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysSoftDo) Assign(attrs ...field.AssignExpr) ISysSoftDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysSoftDo) Joins(fields ...field.RelationField) ISysSoftDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysSoftDo) Preload(fields ...field.RelationField) ISysSoftDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysSoftDo) FirstOrInit() (*model.SysSoft, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysSoft), nil
	}
}

func (s sysSoftDo) FirstOrCreate() (*model.SysSoft, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysSoft), nil
	}
}

func (s sysSoftDo) FindByPage(offset int, limit int) (result []*model.SysSoft, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysSoftDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysSoftDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysSoftDo) Delete(models ...*model.SysSoft) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysSoftDo) withDO(do gen.Dao) *sysSoftDo {
	s.DO = *do.(*gen.DO)
	return s
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q                = new(Query)
	AppAllow         *appAllow
	AppAuth          *appAuth
	AppInfo          *appInfo
	AppLog           *appLog
	DataDirect       *dataDirect
	DataDirect1      *dataDirect1
	DataDirect2      *dataDirect2
	DataDirect3      *dataDirect3
	DataInfo         *dataInfo
	DataSafe         *dataSafe
	DataShare        *dataShare
	DataSharelog     *dataSharelog
	NodeHard         *nodeHard
	NodeInfo         *nodeInfo
	NodeLog          *nodeLog
	NodeSoft         *nodeSoft
	NodeUser         *nodeUser
	ServiceCfg       *serviceCfg
	ServiceInfo      *serviceInfo
	SysAuthority     *sysAuthority
	SysAuthorityMenu *sysAuthorityMenu
	SysConfig        *sysConfig
	SysDownload      *sysDownload
	SysMenu          *sysMenu
	SysMsg           *sysMsg
	SysOperlog       *sysOperlog
	SysPolicy        *sysPolicy
	SysSoft          *sysSoft
	SysUser          *sysUser
	UserBank         *userBank
	UserCa           *userCa
	UserFee          *userFee
	UserInfo         *userInfo
	UserLog          *userLog
	UserOther        *userOther
	UserPdc          *userPdc
	UserProve        *userProve
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	AppAllow = &Q.AppAllow
	AppAuth = &Q.AppAuth
	AppInfo = &Q.AppInfo
	AppLog = &Q.AppLog
	DataDirect = &Q.DataDirect
	DataDirect1 = &Q.DataDirect1
	DataDirect2 = &Q.DataDirect2
	DataDirect3 = &Q.DataDirect3
	DataInfo = &Q.DataInfo
	DataSafe = &Q.DataSafe
	DataShare = &Q.DataShare
	DataSharelog = &Q.DataSharelog
	NodeHard = &Q.NodeHard
	NodeInfo = &Q.NodeInfo
	NodeLog = &Q.NodeLog
	NodeSoft = &Q.NodeSoft
	NodeUser = &Q.NodeUser
	ServiceCfg = &Q.ServiceCfg
	ServiceInfo = &Q.ServiceInfo
	SysAuthority = &Q.SysAuthority
	SysAuthorityMenu = &Q.SysAuthorityMenu
	SysConfig = &Q.SysConfig
	SysDownload = &Q.SysDownload
	SysMenu = &Q.SysMenu
	SysMsg = &Q.SysMsg
	SysOperlog = &Q.SysOperlog
	SysPolicy = &Q.SysPolicy
	SysSoft = &Q.SysSoft
	SysUser = &Q.SysUser
	UserBank = &Q.UserBank
	UserCa = &Q.UserCa
	UserFee = &Q.UserFee
	UserInfo = &Q.UserInfo
	UserLog = &Q.UserLog
	UserOther = &Q.UserOther
	UserPdc = &Q.UserPdc
	UserProve = &Q.UserProve
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:               db,
		AppAllow:         newAppAllow(db, opts...),
		AppAuth:          newAppAuth(db, opts...),
		AppInfo:          newAppInfo(db, opts...),
		AppLog:           newAppLog(db, opts...),
		DataDirect:       newDataDirect(db, opts...),
		DataDirect1:      newDataDirect1(db, opts...),
		DataDirect2:      newDataDirect2(db, opts...),
		DataDirect3:      newDataDirect3(db, opts...),
		DataInfo:         newDataInfo(db, opts...),
		DataSafe:         newDataSafe(db, opts...),
		DataShare:        newDataShare(db, opts...),
		DataSharelog:     newDataSharelog(db, opts...),
		NodeHard:         newNodeHard(db, opts...),
		NodeInfo:         newNodeInfo(db, opts...),
		NodeLog:          newNodeLog(db, opts...),
		NodeSoft:         newNodeSoft(db, opts...),
		NodeUser:         newNodeUser(db, opts...),
		ServiceCfg:       newServiceCfg(db, opts...),
		ServiceInfo:      newServiceInfo(db, opts...),
		SysAuthority:     newSysAuthority(db, opts...),
		SysAuthorityMenu: newSysAuthorityMenu(db, opts...),
		SysConfig:        newSysConfig(db, opts...),
		SysDownload:      newSysDownload(db, opts...),
		SysMenu:          newSysMenu(db, opts...),
		SysMsg:           newSysMsg(db, opts...),
		SysOperlog:       newSysOperlog(db, opts...),
		SysPolicy:        newSysPolicy(db, opts...),
		SysSoft:          newSysSoft(db, opts...),
		SysUser:          newSysUser(db, opts...),
		UserBank:         newUserBank(db, opts...),
		UserCa:           newUserCa(db, opts...),
		UserFee:          newUserFee(db, opts...),
		UserInfo:         newUserInfo(db, opts...),
		UserLog:          newUserLog(db, opts...),
		UserOther:        newUserOther(db, opts...),
		UserPdc:          newUserPdc(db, opts...),
		UserProve:        newUserProve(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AppAllow         appAllow
	AppAuth          appAuth
	AppInfo          appInfo
	AppLog           appLog
	DataDirect       dataDirect
	DataDirect1      dataDirect1
	DataDirect2      dataDirect2
	DataDirect3      dataDirect3
	DataInfo         dataInfo
	DataSafe         dataSafe
	DataShare        dataShare
	DataSharelog     dataSharelog
	NodeHard         nodeHard
	NodeInfo         nodeInfo
	NodeLog          nodeLog
	NodeSoft         nodeSoft
	NodeUser         nodeUser
	ServiceCfg       serviceCfg
	ServiceInfo      serviceInfo
	SysAuthority     sysAuthority
	SysAuthorityMenu sysAuthorityMenu
	SysConfig        sysConfig
	SysDownload      sysDownload
	SysMenu          sysMenu
	SysMsg           sysMsg
	SysOperlog       sysOperlog
	SysPolicy        sysPolicy
	SysSoft          sysSoft
	SysUser          sysUser
	UserBank         userBank
	UserCa           userCa
	UserFee          userFee
	UserInfo         userInfo
	UserLog          userLog
	UserOther        userOther
	UserPdc          userPdc
	UserProve        userProve
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		AppAllow:         q.AppAllow.clone(db),
		AppAuth:          q.AppAuth.clone(db),
		AppInfo:          q.AppInfo.clone(db),
		AppLog:           q.AppLog.clone(db),
		DataDirect:       q.DataDirect.clone(db),
		DataDirect1:      q.DataDirect1.clone(db),
		DataDirect2:      q.DataDirect2.clone(db),
		DataDirect3:      q.DataDirect3.clone(db),
		DataInfo:         q.DataInfo.clone(db),
		DataSafe:         q.DataSafe.clone(db),
		DataShare:        q.DataShare.clone(db),
		DataSharelog:     q.DataSharelog.clone(db),
		NodeHard:         q.NodeHard.clone(db),
		NodeInfo:         q.NodeInfo.clone(db),
		NodeLog:          q.NodeLog.clone(db),
		NodeSoft:         q.NodeSoft.clone(db),
		NodeUser:         q.NodeUser.clone(db),
		ServiceCfg:       q.ServiceCfg.clone(db),
		ServiceInfo:      q.ServiceInfo.clone(db),
		SysAuthority:     q.SysAuthority.clone(db),
		SysAuthorityMenu: q.SysAuthorityMenu.clone(db),
		SysConfig:        q.SysConfig.clone(db),
		SysDownload:      q.SysDownload.clone(db),
		SysMenu:          q.SysMenu.clone(db),
		SysMsg:           q.SysMsg.clone(db),
		SysOperlog:       q.SysOperlog.clone(db),
		SysPolicy:        q.SysPolicy.clone(db),
		SysSoft:          q.SysSoft.clone(db),
		SysUser:          q.SysUser.clone(db),
		UserBank:         q.UserBank.clone(db),
		UserCa:           q.UserCa.clone(db),
		UserFee:          q.UserFee.clone(db),
		UserInfo:         q.UserInfo.clone(db),
		UserLog:          q.UserLog.clone(db),
		UserOther:        q.UserOther.clone(db),
		UserPdc:          q.UserPdc.clone(db),
		UserProve:        q.UserProve.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:               db,
		AppAllow:         q.AppAllow.replaceDB(db),
		AppAuth:          q.AppAuth.replaceDB(db),
		AppInfo:          q.AppInfo.replaceDB(db),
		AppLog:           q.AppLog.replaceDB(db),
		DataDirect:       q.DataDirect.replaceDB(db),
		DataDirect1:      q.DataDirect1.replaceDB(db),
		DataDirect2:      q.DataDirect2.replaceDB(db),
		DataDirect3:      q.DataDirect3.replaceDB(db),
		DataInfo:         q.DataInfo.replaceDB(db),
		DataSafe:         q.DataSafe.replaceDB(db),
		DataShare:        q.DataShare.replaceDB(db),
		DataSharelog:     q.DataSharelog.replaceDB(db),
		NodeHard:         q.NodeHard.replaceDB(db),
		NodeInfo:         q.NodeInfo.replaceDB(db),
		NodeLog:          q.NodeLog.replaceDB(db),
		NodeSoft:         q.NodeSoft.replaceDB(db),
		NodeUser:         q.NodeUser.replaceDB(db),
		ServiceCfg:       q.ServiceCfg.replaceDB(db),
		ServiceInfo:      q.ServiceInfo.replaceDB(db),
		SysAuthority:     q.SysAuthority.replaceDB(db),
		SysAuthorityMenu: q.SysAuthorityMenu.replaceDB(db),
		SysConfig:        q.SysConfig.replaceDB(db),
		SysDownload:      q.SysDownload.replaceDB(db),
		SysMenu:          q.SysMenu.replaceDB(db),
		SysMsg:           q.SysMsg.replaceDB(db),
		SysOperlog:       q.SysOperlog.replaceDB(db),
		SysPolicy:        q.SysPolicy.replaceDB(db),
		SysSoft:          q.SysSoft.replaceDB(db),
		SysUser:          q.SysUser.replaceDB(db),
		UserBank:         q.UserBank.replaceDB(db),
		UserCa:           q.UserCa.replaceDB(db),
		UserFee:          q.UserFee.replaceDB(db),
		UserInfo:         q.UserInfo.replaceDB(db),
		UserLog:          q.UserLog.replaceDB(db),
		UserOther:        q.UserOther.replaceDB(db),
		UserPdc:          q.UserPdc.replaceDB(db),
		UserProve:        q.UserProve.replaceDB(db),
	}
}

type queryCtx struct {
	AppAllow         IAppAllowDo
	AppAuth          IAppAuthDo
	AppInfo          IAppInfoDo
	AppLog           IAppLogDo
	DataDirect       IDataDirectDo
	DataDirect1      IDataDirect1Do
	DataDirect2      IDataDirect2Do
	DataDirect3      IDataDirect3Do
	DataInfo         IDataInfoDo
	DataSafe         IDataSafeDo
	DataShare        IDataShareDo
	DataSharelog     IDataSharelogDo
	NodeHard         INodeHardDo
	NodeInfo         INodeInfoDo
	NodeLog          INodeLogDo
	NodeSoft         INodeSoftDo
	NodeUser         INodeUserDo
	ServiceCfg       IServiceCfgDo
	ServiceInfo      IServiceInfoDo
	SysAuthority     ISysAuthorityDo
	SysAuthorityMenu ISysAuthorityMenuDo
	SysConfig        ISysConfigDo
	SysDownload      ISysDownloadDo
	SysMenu          ISysMenuDo
	SysMsg           ISysMsgDo
	SysOperlog       ISysOperlogDo
	SysPolicy        ISysPolicyDo
	SysSoft          ISysSoftDo
	SysUser          ISysUserDo
	UserBank         IUserBankDo
	UserCa           IUserCaDo
	UserFee          IUserFeeDo
	UserInfo         IUserInfoDo
	UserLog          IUserLogDo
	UserOther        IUserOtherDo
	UserPdc          IUserPdcDo
	UserProve        IUserProveDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AppAllow:         q.AppAllow.WithContext(ctx),
		AppAuth:          q.AppAuth.WithContext(ctx),
		AppInfo:          q.AppInfo.WithContext(ctx),
		AppLog:           q.AppLog.WithContext(ctx),
		DataDirect:       q.DataDirect.WithContext(ctx),
		DataDirect1:      q.DataDirect1.WithContext(ctx),
		DataDirect2:      q.DataDirect2.WithContext(ctx),
		DataDirect3:      q.DataDirect3.WithContext(ctx),
		DataInfo:         q.DataInfo.WithContext(ctx),
		DataSafe:         q.DataSafe.WithContext(ctx),
		DataShare:        q.DataShare.WithContext(ctx),
		DataSharelog:     q.DataSharelog.WithContext(ctx),
		NodeHard:         q.NodeHard.WithContext(ctx),
		NodeInfo:         q.NodeInfo.WithContext(ctx),
		NodeLog:          q.NodeLog.WithContext(ctx),
		NodeSoft:         q.NodeSoft.WithContext(ctx),
		NodeUser:         q.NodeUser.WithContext(ctx),
		ServiceCfg:       q.ServiceCfg.WithContext(ctx),
		ServiceInfo:      q.ServiceInfo.WithContext(ctx),
		SysAuthority:     q.SysAuthority.WithContext(ctx),
		SysAuthorityMenu: q.SysAuthorityMenu.WithContext(ctx),
		SysConfig:        q.SysConfig.WithContext(ctx),
		SysDownload:      q.SysDownload.WithContext(ctx),
		SysMenu:          q.SysMenu.WithContext(ctx),
		SysMsg:           q.SysMsg.WithContext(ctx),
		SysOperlog:       q.SysOperlog.WithContext(ctx),
		SysPolicy:        q.SysPolicy.WithContext(ctx),
		SysSoft:          q.SysSoft.WithContext(ctx),
		SysUser:          q.SysUser.WithContext(ctx),
		UserBank:         q.UserBank.WithContext(ctx),
		UserCa:           q.UserCa.WithContext(ctx),
		UserFee:          q.UserFee.WithContext(ctx),
		UserInfo:         q.UserInfo.WithContext(ctx),
		UserLog:          q.UserLog.WithContext(ctx),
		UserOther:        q.UserOther.WithContext(ctx),
		UserPdc:          q.UserPdc.WithContext(ctx),
		UserProve:        q.UserProve.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}

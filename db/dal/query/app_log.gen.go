// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newAppLog(db *gorm.DB, opts ...gen.DOOption) appLog {
	_appLog := appLog{}

	_appLog.appLogDo.UseDB(db, opts...)
	_appLog.appLogDo.UseModel(&model.AppLog{})

	tableName := _appLog.appLogDo.TableName()
	_appLog.ALL = field.NewAsterisk(tableName)
	_appLog.ID = field.NewInt64(tableName, "id")
	_appLog.CreateAt = field.NewTime(tableName, "create_at")
	_appLog.UpdateAt = field.NewTime(tableName, "update_at")
	_appLog.DeleteAt = field.NewTime(tableName, "delete_at")
	_appLog.AppID = field.NewInt64(tableName, "app_id")
	_appLog.ServiceType = field.NewString(tableName, "service_type")
	_appLog.ReqURL = field.NewString(tableName, "req_url")
	_appLog.Method = field.NewString(tableName, "method")
	_appLog.RemoteIP = field.NewString(tableName, "remote_ip")
	_appLog.ReqContent = field.NewString(tableName, "req_content")
	_appLog.ResMsg = field.NewString(tableName, "res_msg")
	_appLog.ResSize = field.NewInt32(tableName, "res_size")
	_appLog.ResErr = field.NewString(tableName, "res_err")

	_appLog.fillFieldMap()

	return _appLog
}

// appLog 服务的访问日志
type appLog struct {
	appLogDo appLogDo

	ALL         field.Asterisk
	ID          field.Int64  // 数据id
	CreateAt    field.Time   // 创建时间
	UpdateAt    field.Time   // 更新时间
	DeleteAt    field.Time   // 删除时间
	AppID       field.Int64  // app用户id
	ServiceType field.String // 服务类别
	ReqURL      field.String // 请求路径
	Method      field.String // 请求方法
	RemoteIP    field.String // 访问ip
	ReqContent  field.String // 请求内容
	ResMsg      field.String // 响应消息
	ResSize     field.Int32  // 响应字节数
	ResErr      field.String // 响应错误

	fieldMap map[string]field.Expr
}

func (a appLog) Table(newTableName string) *appLog {
	a.appLogDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a appLog) As(alias string) *appLog {
	a.appLogDo.DO = *(a.appLogDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *appLog) updateTableName(table string) *appLog {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewInt64(table, "id")
	a.CreateAt = field.NewTime(table, "create_at")
	a.UpdateAt = field.NewTime(table, "update_at")
	a.DeleteAt = field.NewTime(table, "delete_at")
	a.AppID = field.NewInt64(table, "app_id")
	a.ServiceType = field.NewString(table, "service_type")
	a.ReqURL = field.NewString(table, "req_url")
	a.Method = field.NewString(table, "method")
	a.RemoteIP = field.NewString(table, "remote_ip")
	a.ReqContent = field.NewString(table, "req_content")
	a.ResMsg = field.NewString(table, "res_msg")
	a.ResSize = field.NewInt32(table, "res_size")
	a.ResErr = field.NewString(table, "res_err")

	a.fillFieldMap()

	return a
}

func (a *appLog) WithContext(ctx context.Context) IAppLogDo { return a.appLogDo.WithContext(ctx) }

func (a appLog) TableName() string { return a.appLogDo.TableName() }

func (a appLog) Alias() string { return a.appLogDo.Alias() }

func (a appLog) Columns(cols ...field.Expr) gen.Columns { return a.appLogDo.Columns(cols...) }

func (a *appLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *appLog) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 13)
	a.fieldMap["id"] = a.ID
	a.fieldMap["create_at"] = a.CreateAt
	a.fieldMap["update_at"] = a.UpdateAt
	a.fieldMap["delete_at"] = a.DeleteAt
	a.fieldMap["app_id"] = a.AppID
	a.fieldMap["service_type"] = a.ServiceType
	a.fieldMap["req_url"] = a.ReqURL
	a.fieldMap["method"] = a.Method
	a.fieldMap["remote_ip"] = a.RemoteIP
	a.fieldMap["req_content"] = a.ReqContent
	a.fieldMap["res_msg"] = a.ResMsg
	a.fieldMap["res_size"] = a.ResSize
	a.fieldMap["res_err"] = a.ResErr
}

func (a appLog) clone(db *gorm.DB) appLog {
	a.appLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a appLog) replaceDB(db *gorm.DB) appLog {
	a.appLogDo.ReplaceDB(db)
	return a
}

type appLogDo struct{ gen.DO }

type IAppLogDo interface {
	gen.SubQuery
	Debug() IAppLogDo
	WithContext(ctx context.Context) IAppLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IAppLogDo
	WriteDB() IAppLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IAppLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IAppLogDo
	Not(conds ...gen.Condition) IAppLogDo
	Or(conds ...gen.Condition) IAppLogDo
	Select(conds ...field.Expr) IAppLogDo
	Where(conds ...gen.Condition) IAppLogDo
	Order(conds ...field.Expr) IAppLogDo
	Distinct(cols ...field.Expr) IAppLogDo
	Omit(cols ...field.Expr) IAppLogDo
	Join(table schema.Tabler, on ...field.Expr) IAppLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IAppLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IAppLogDo
	Group(cols ...field.Expr) IAppLogDo
	Having(conds ...gen.Condition) IAppLogDo
	Limit(limit int) IAppLogDo
	Offset(offset int) IAppLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IAppLogDo
	Unscoped() IAppLogDo
	Create(values ...*model.AppLog) error
	CreateInBatches(values []*model.AppLog, batchSize int) error
	Save(values ...*model.AppLog) error
	First() (*model.AppLog, error)
	Take() (*model.AppLog, error)
	Last() (*model.AppLog, error)
	Find() ([]*model.AppLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppLog, err error)
	FindInBatches(result *[]*model.AppLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.AppLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IAppLogDo
	Assign(attrs ...field.AssignExpr) IAppLogDo
	Joins(fields ...field.RelationField) IAppLogDo
	Preload(fields ...field.RelationField) IAppLogDo
	FirstOrInit() (*model.AppLog, error)
	FirstOrCreate() (*model.AppLog, error)
	FindByPage(offset int, limit int) (result []*model.AppLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IAppLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (a appLogDo) Debug() IAppLogDo {
	return a.withDO(a.DO.Debug())
}

func (a appLogDo) WithContext(ctx context.Context) IAppLogDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a appLogDo) ReadDB() IAppLogDo {
	return a.Clauses(dbresolver.Read)
}

func (a appLogDo) WriteDB() IAppLogDo {
	return a.Clauses(dbresolver.Write)
}

func (a appLogDo) Session(config *gorm.Session) IAppLogDo {
	return a.withDO(a.DO.Session(config))
}

func (a appLogDo) Clauses(conds ...clause.Expression) IAppLogDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a appLogDo) Returning(value interface{}, columns ...string) IAppLogDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a appLogDo) Not(conds ...gen.Condition) IAppLogDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a appLogDo) Or(conds ...gen.Condition) IAppLogDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a appLogDo) Select(conds ...field.Expr) IAppLogDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a appLogDo) Where(conds ...gen.Condition) IAppLogDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a appLogDo) Order(conds ...field.Expr) IAppLogDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a appLogDo) Distinct(cols ...field.Expr) IAppLogDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a appLogDo) Omit(cols ...field.Expr) IAppLogDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a appLogDo) Join(table schema.Tabler, on ...field.Expr) IAppLogDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a appLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IAppLogDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a appLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IAppLogDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a appLogDo) Group(cols ...field.Expr) IAppLogDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a appLogDo) Having(conds ...gen.Condition) IAppLogDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a appLogDo) Limit(limit int) IAppLogDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a appLogDo) Offset(offset int) IAppLogDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a appLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IAppLogDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a appLogDo) Unscoped() IAppLogDo {
	return a.withDO(a.DO.Unscoped())
}

func (a appLogDo) Create(values ...*model.AppLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a appLogDo) CreateInBatches(values []*model.AppLog, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a appLogDo) Save(values ...*model.AppLog) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a appLogDo) First() (*model.AppLog, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppLog), nil
	}
}

func (a appLogDo) Take() (*model.AppLog, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppLog), nil
	}
}

func (a appLogDo) Last() (*model.AppLog, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppLog), nil
	}
}

func (a appLogDo) Find() ([]*model.AppLog, error) {
	result, err := a.DO.Find()
	return result.([]*model.AppLog), err
}

func (a appLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AppLog, err error) {
	buf := make([]*model.AppLog, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a appLogDo) FindInBatches(result *[]*model.AppLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a appLogDo) Attrs(attrs ...field.AssignExpr) IAppLogDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a appLogDo) Assign(attrs ...field.AssignExpr) IAppLogDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a appLogDo) Joins(fields ...field.RelationField) IAppLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a appLogDo) Preload(fields ...field.RelationField) IAppLogDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a appLogDo) FirstOrInit() (*model.AppLog, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppLog), nil
	}
}

func (a appLogDo) FirstOrCreate() (*model.AppLog, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AppLog), nil
	}
}

func (a appLogDo) FindByPage(offset int, limit int) (result []*model.AppLog, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a appLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a appLogDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a appLogDo) Delete(models ...*model.AppLog) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *appLogDo) withDO(do gen.Dao) *appLogDo {
	a.DO = *do.(*gen.DO)
	return a
}

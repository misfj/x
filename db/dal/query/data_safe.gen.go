// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newDataSafe(db *gorm.DB, opts ...gen.DOOption) dataSafe {
	_dataSafe := dataSafe{}

	_dataSafe.dataSafeDo.UseDB(db, opts...)
	_dataSafe.dataSafeDo.UseModel(&model.DataSafe{})

	tableName := _dataSafe.dataSafeDo.TableName()
	_dataSafe.ALL = field.NewAsterisk(tableName)
	_dataSafe.ID = field.NewInt64(tableName, "id")
	_dataSafe.CreateAt = field.NewTime(tableName, "create_at")
	_dataSafe.UpdateAt = field.NewTime(tableName, "update_at")
	_dataSafe.DeleteAt = field.NewTime(tableName, "delete_at")
	_dataSafe.DataID = field.NewString(tableName, "data_id")
	_dataSafe.SafeLevel = field.NewString(tableName, "safe_level")
	_dataSafe.SafeInfo = field.NewString(tableName, "safe_info")

	_dataSafe.fillFieldMap()

	return _dataSafe
}

// dataSafe 记录数据安全相关信息
type dataSafe struct {
	dataSafeDo dataSafeDo

	ALL       field.Asterisk
	ID        field.Int64  // 数据id
	CreateAt  field.Time   // 创建时间
	UpdateAt  field.Time   // 更新时间
	DeleteAt  field.Time   // 删除时间
	DataID    field.String // 数据id
	SafeLevel field.String // 安全登记(1表示确权2授权3密码)
	SafeInfo  field.String // 授权信息确权信息密码信息

	fieldMap map[string]field.Expr
}

func (d dataSafe) Table(newTableName string) *dataSafe {
	d.dataSafeDo.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dataSafe) As(alias string) *dataSafe {
	d.dataSafeDo.DO = *(d.dataSafeDo.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dataSafe) updateTableName(table string) *dataSafe {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.CreateAt = field.NewTime(table, "create_at")
	d.UpdateAt = field.NewTime(table, "update_at")
	d.DeleteAt = field.NewTime(table, "delete_at")
	d.DataID = field.NewString(table, "data_id")
	d.SafeLevel = field.NewString(table, "safe_level")
	d.SafeInfo = field.NewString(table, "safe_info")

	d.fillFieldMap()

	return d
}

func (d *dataSafe) WithContext(ctx context.Context) IDataSafeDo { return d.dataSafeDo.WithContext(ctx) }

func (d dataSafe) TableName() string { return d.dataSafeDo.TableName() }

func (d dataSafe) Alias() string { return d.dataSafeDo.Alias() }

func (d dataSafe) Columns(cols ...field.Expr) gen.Columns { return d.dataSafeDo.Columns(cols...) }

func (d *dataSafe) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dataSafe) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 7)
	d.fieldMap["id"] = d.ID
	d.fieldMap["create_at"] = d.CreateAt
	d.fieldMap["update_at"] = d.UpdateAt
	d.fieldMap["delete_at"] = d.DeleteAt
	d.fieldMap["data_id"] = d.DataID
	d.fieldMap["safe_level"] = d.SafeLevel
	d.fieldMap["safe_info"] = d.SafeInfo
}

func (d dataSafe) clone(db *gorm.DB) dataSafe {
	d.dataSafeDo.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dataSafe) replaceDB(db *gorm.DB) dataSafe {
	d.dataSafeDo.ReplaceDB(db)
	return d
}

type dataSafeDo struct{ gen.DO }

type IDataSafeDo interface {
	gen.SubQuery
	Debug() IDataSafeDo
	WithContext(ctx context.Context) IDataSafeDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDataSafeDo
	WriteDB() IDataSafeDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDataSafeDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDataSafeDo
	Not(conds ...gen.Condition) IDataSafeDo
	Or(conds ...gen.Condition) IDataSafeDo
	Select(conds ...field.Expr) IDataSafeDo
	Where(conds ...gen.Condition) IDataSafeDo
	Order(conds ...field.Expr) IDataSafeDo
	Distinct(cols ...field.Expr) IDataSafeDo
	Omit(cols ...field.Expr) IDataSafeDo
	Join(table schema.Tabler, on ...field.Expr) IDataSafeDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IDataSafeDo
	RightJoin(table schema.Tabler, on ...field.Expr) IDataSafeDo
	Group(cols ...field.Expr) IDataSafeDo
	Having(conds ...gen.Condition) IDataSafeDo
	Limit(limit int) IDataSafeDo
	Offset(offset int) IDataSafeDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDataSafeDo
	Unscoped() IDataSafeDo
	Create(values ...*model.DataSafe) error
	CreateInBatches(values []*model.DataSafe, batchSize int) error
	Save(values ...*model.DataSafe) error
	First() (*model.DataSafe, error)
	Take() (*model.DataSafe, error)
	Last() (*model.DataSafe, error)
	Find() ([]*model.DataSafe, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataSafe, err error)
	FindInBatches(result *[]*model.DataSafe, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DataSafe) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDataSafeDo
	Assign(attrs ...field.AssignExpr) IDataSafeDo
	Joins(fields ...field.RelationField) IDataSafeDo
	Preload(fields ...field.RelationField) IDataSafeDo
	FirstOrInit() (*model.DataSafe, error)
	FirstOrCreate() (*model.DataSafe, error)
	FindByPage(offset int, limit int) (result []*model.DataSafe, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDataSafeDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dataSafeDo) Debug() IDataSafeDo {
	return d.withDO(d.DO.Debug())
}

func (d dataSafeDo) WithContext(ctx context.Context) IDataSafeDo {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dataSafeDo) ReadDB() IDataSafeDo {
	return d.Clauses(dbresolver.Read)
}

func (d dataSafeDo) WriteDB() IDataSafeDo {
	return d.Clauses(dbresolver.Write)
}

func (d dataSafeDo) Session(config *gorm.Session) IDataSafeDo {
	return d.withDO(d.DO.Session(config))
}

func (d dataSafeDo) Clauses(conds ...clause.Expression) IDataSafeDo {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dataSafeDo) Returning(value interface{}, columns ...string) IDataSafeDo {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dataSafeDo) Not(conds ...gen.Condition) IDataSafeDo {
	return d.withDO(d.DO.Not(conds...))
}

func (d dataSafeDo) Or(conds ...gen.Condition) IDataSafeDo {
	return d.withDO(d.DO.Or(conds...))
}

func (d dataSafeDo) Select(conds ...field.Expr) IDataSafeDo {
	return d.withDO(d.DO.Select(conds...))
}

func (d dataSafeDo) Where(conds ...gen.Condition) IDataSafeDo {
	return d.withDO(d.DO.Where(conds...))
}

func (d dataSafeDo) Order(conds ...field.Expr) IDataSafeDo {
	return d.withDO(d.DO.Order(conds...))
}

func (d dataSafeDo) Distinct(cols ...field.Expr) IDataSafeDo {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dataSafeDo) Omit(cols ...field.Expr) IDataSafeDo {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dataSafeDo) Join(table schema.Tabler, on ...field.Expr) IDataSafeDo {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dataSafeDo) LeftJoin(table schema.Tabler, on ...field.Expr) IDataSafeDo {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dataSafeDo) RightJoin(table schema.Tabler, on ...field.Expr) IDataSafeDo {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dataSafeDo) Group(cols ...field.Expr) IDataSafeDo {
	return d.withDO(d.DO.Group(cols...))
}

func (d dataSafeDo) Having(conds ...gen.Condition) IDataSafeDo {
	return d.withDO(d.DO.Having(conds...))
}

func (d dataSafeDo) Limit(limit int) IDataSafeDo {
	return d.withDO(d.DO.Limit(limit))
}

func (d dataSafeDo) Offset(offset int) IDataSafeDo {
	return d.withDO(d.DO.Offset(offset))
}

func (d dataSafeDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IDataSafeDo {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dataSafeDo) Unscoped() IDataSafeDo {
	return d.withDO(d.DO.Unscoped())
}

func (d dataSafeDo) Create(values ...*model.DataSafe) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dataSafeDo) CreateInBatches(values []*model.DataSafe, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dataSafeDo) Save(values ...*model.DataSafe) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dataSafeDo) First() (*model.DataSafe, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataSafe), nil
	}
}

func (d dataSafeDo) Take() (*model.DataSafe, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataSafe), nil
	}
}

func (d dataSafeDo) Last() (*model.DataSafe, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataSafe), nil
	}
}

func (d dataSafeDo) Find() ([]*model.DataSafe, error) {
	result, err := d.DO.Find()
	return result.([]*model.DataSafe), err
}

func (d dataSafeDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataSafe, err error) {
	buf := make([]*model.DataSafe, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dataSafeDo) FindInBatches(result *[]*model.DataSafe, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dataSafeDo) Attrs(attrs ...field.AssignExpr) IDataSafeDo {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dataSafeDo) Assign(attrs ...field.AssignExpr) IDataSafeDo {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dataSafeDo) Joins(fields ...field.RelationField) IDataSafeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dataSafeDo) Preload(fields ...field.RelationField) IDataSafeDo {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dataSafeDo) FirstOrInit() (*model.DataSafe, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataSafe), nil
	}
}

func (d dataSafeDo) FirstOrCreate() (*model.DataSafe, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataSafe), nil
	}
}

func (d dataSafeDo) FindByPage(offset int, limit int) (result []*model.DataSafe, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dataSafeDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dataSafeDo) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dataSafeDo) Delete(models ...*model.DataSafe) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dataSafeDo) withDO(do gen.Dao) *dataSafeDo {
	d.DO = *do.(*gen.DO)
	return d
}

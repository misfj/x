// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newUserLog(db *gorm.DB, opts ...gen.DOOption) userLog {
	_userLog := userLog{}

	_userLog.userLogDo.UseDB(db, opts...)
	_userLog.userLogDo.UseModel(&model.UserLog{})

	tableName := _userLog.userLogDo.TableName()
	_userLog.ALL = field.NewAsterisk(tableName)
	_userLog.ID = field.NewInt64(tableName, "id")
	_userLog.CreateAt = field.NewTime(tableName, "create_at")
	_userLog.UpdateAt = field.NewTime(tableName, "update_at")
	_userLog.DeleteAt = field.NewTime(tableName, "delete_at")
	_userLog.UserID = field.NewInt64(tableName, "user_id")
	_userLog.LoginIP = field.NewString(tableName, "login_ip")
	_userLog.Agent = field.NewString(tableName, "agent")
	_userLog.Response = field.NewString(tableName, "response")

	_userLog.fillFieldMap()

	return _userLog
}

// userLog 用户登录信息
type userLog struct {
	userLogDo userLogDo

	ALL      field.Asterisk
	ID       field.Int64  // 数据id
	CreateAt field.Time   // 创建时间
	UpdateAt field.Time   // 更新时间
	DeleteAt field.Time   // 删除时间
	UserID   field.Int64  // 用户id
	LoginIP  field.String // 登录ip
	Agent    field.String // 登录代理
	Response field.String // 失败返回错误消息进行记录

	fieldMap map[string]field.Expr
}

func (u userLog) Table(newTableName string) *userLog {
	u.userLogDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userLog) As(alias string) *userLog {
	u.userLogDo.DO = *(u.userLogDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userLog) updateTableName(table string) *userLog {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.CreateAt = field.NewTime(table, "create_at")
	u.UpdateAt = field.NewTime(table, "update_at")
	u.DeleteAt = field.NewTime(table, "delete_at")
	u.UserID = field.NewInt64(table, "user_id")
	u.LoginIP = field.NewString(table, "login_ip")
	u.Agent = field.NewString(table, "agent")
	u.Response = field.NewString(table, "response")

	u.fillFieldMap()

	return u
}

func (u *userLog) WithContext(ctx context.Context) IUserLogDo { return u.userLogDo.WithContext(ctx) }

func (u userLog) TableName() string { return u.userLogDo.TableName() }

func (u userLog) Alias() string { return u.userLogDo.Alias() }

func (u userLog) Columns(cols ...field.Expr) gen.Columns { return u.userLogDo.Columns(cols...) }

func (u *userLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userLog) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 8)
	u.fieldMap["id"] = u.ID
	u.fieldMap["create_at"] = u.CreateAt
	u.fieldMap["update_at"] = u.UpdateAt
	u.fieldMap["delete_at"] = u.DeleteAt
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["login_ip"] = u.LoginIP
	u.fieldMap["agent"] = u.Agent
	u.fieldMap["response"] = u.Response
}

func (u userLog) clone(db *gorm.DB) userLog {
	u.userLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userLog) replaceDB(db *gorm.DB) userLog {
	u.userLogDo.ReplaceDB(db)
	return u
}

type userLogDo struct{ gen.DO }

type IUserLogDo interface {
	gen.SubQuery
	Debug() IUserLogDo
	WithContext(ctx context.Context) IUserLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserLogDo
	WriteDB() IUserLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserLogDo
	Not(conds ...gen.Condition) IUserLogDo
	Or(conds ...gen.Condition) IUserLogDo
	Select(conds ...field.Expr) IUserLogDo
	Where(conds ...gen.Condition) IUserLogDo
	Order(conds ...field.Expr) IUserLogDo
	Distinct(cols ...field.Expr) IUserLogDo
	Omit(cols ...field.Expr) IUserLogDo
	Join(table schema.Tabler, on ...field.Expr) IUserLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserLogDo
	Group(cols ...field.Expr) IUserLogDo
	Having(conds ...gen.Condition) IUserLogDo
	Limit(limit int) IUserLogDo
	Offset(offset int) IUserLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserLogDo
	Unscoped() IUserLogDo
	Create(values ...*model.UserLog) error
	CreateInBatches(values []*model.UserLog, batchSize int) error
	Save(values ...*model.UserLog) error
	First() (*model.UserLog, error)
	Take() (*model.UserLog, error)
	Last() (*model.UserLog, error)
	Find() ([]*model.UserLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserLog, err error)
	FindInBatches(result *[]*model.UserLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserLogDo
	Assign(attrs ...field.AssignExpr) IUserLogDo
	Joins(fields ...field.RelationField) IUserLogDo
	Preload(fields ...field.RelationField) IUserLogDo
	FirstOrInit() (*model.UserLog, error)
	FirstOrCreate() (*model.UserLog, error)
	FindByPage(offset int, limit int) (result []*model.UserLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userLogDo) Debug() IUserLogDo {
	return u.withDO(u.DO.Debug())
}

func (u userLogDo) WithContext(ctx context.Context) IUserLogDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userLogDo) ReadDB() IUserLogDo {
	return u.Clauses(dbresolver.Read)
}

func (u userLogDo) WriteDB() IUserLogDo {
	return u.Clauses(dbresolver.Write)
}

func (u userLogDo) Session(config *gorm.Session) IUserLogDo {
	return u.withDO(u.DO.Session(config))
}

func (u userLogDo) Clauses(conds ...clause.Expression) IUserLogDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userLogDo) Returning(value interface{}, columns ...string) IUserLogDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userLogDo) Not(conds ...gen.Condition) IUserLogDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userLogDo) Or(conds ...gen.Condition) IUserLogDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userLogDo) Select(conds ...field.Expr) IUserLogDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userLogDo) Where(conds ...gen.Condition) IUserLogDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userLogDo) Order(conds ...field.Expr) IUserLogDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userLogDo) Distinct(cols ...field.Expr) IUserLogDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userLogDo) Omit(cols ...field.Expr) IUserLogDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userLogDo) Join(table schema.Tabler, on ...field.Expr) IUserLogDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserLogDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userLogDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserLogDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userLogDo) Group(cols ...field.Expr) IUserLogDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userLogDo) Having(conds ...gen.Condition) IUserLogDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userLogDo) Limit(limit int) IUserLogDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userLogDo) Offset(offset int) IUserLogDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserLogDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userLogDo) Unscoped() IUserLogDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userLogDo) Create(values ...*model.UserLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userLogDo) CreateInBatches(values []*model.UserLog, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userLogDo) Save(values ...*model.UserLog) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userLogDo) First() (*model.UserLog, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLog), nil
	}
}

func (u userLogDo) Take() (*model.UserLog, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLog), nil
	}
}

func (u userLogDo) Last() (*model.UserLog, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLog), nil
	}
}

func (u userLogDo) Find() ([]*model.UserLog, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserLog), err
}

func (u userLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserLog, err error) {
	buf := make([]*model.UserLog, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userLogDo) FindInBatches(result *[]*model.UserLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userLogDo) Attrs(attrs ...field.AssignExpr) IUserLogDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userLogDo) Assign(attrs ...field.AssignExpr) IUserLogDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userLogDo) Joins(fields ...field.RelationField) IUserLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userLogDo) Preload(fields ...field.RelationField) IUserLogDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userLogDo) FirstOrInit() (*model.UserLog, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLog), nil
	}
}

func (u userLogDo) FirstOrCreate() (*model.UserLog, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserLog), nil
	}
}

func (u userLogDo) FindByPage(offset int, limit int) (result []*model.UserLog, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userLogDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userLogDo) Delete(models ...*model.UserLog) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userLogDo) withDO(do gen.Dao) *userLogDo {
	u.DO = *do.(*gen.DO)
	return u
}

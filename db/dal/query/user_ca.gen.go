// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newUserCa(db *gorm.DB, opts ...gen.DOOption) userCa {
	_userCa := userCa{}

	_userCa.userCaDo.UseDB(db, opts...)
	_userCa.userCaDo.UseModel(&model.UserCa{})

	tableName := _userCa.userCaDo.TableName()
	_userCa.ALL = field.NewAsterisk(tableName)
	_userCa.ID = field.NewInt64(tableName, "id")
	_userCa.CreateAt = field.NewTime(tableName, "create_at")
	_userCa.UpdateAt = field.NewTime(tableName, "update_at")
	_userCa.DeleteAt = field.NewTime(tableName, "delete_at")
	_userCa.UserID = field.NewInt64(tableName, "user_id")
	_userCa.Public = field.NewString(tableName, "public")
	_userCa.PublicMd5 = field.NewString(tableName, "public_md5")
	_userCa.Private = field.NewString(tableName, "private")
	_userCa.PrivateMd5 = field.NewString(tableName, "private_md5")
	_userCa.Algo = field.NewString(tableName, "algo")
	_userCa.StoreKey = field.NewString(tableName, "store_key")
	_userCa.TimeStamp = field.NewInt64(tableName, "time_stamp")

	_userCa.fillFieldMap()

	return _userCa
}

// userCa 用用户公钥证书 日期 算法 存储密钥
type userCa struct {
	userCaDo userCaDo

	ALL        field.Asterisk
	ID         field.Int64  // 数据id
	CreateAt   field.Time   // 创建时间
	UpdateAt   field.Time   // 更新时间
	DeleteAt   field.Time   // 删除时间
	UserID     field.Int64  // 创建时间
	Public     field.String // 公钥d
	PublicMd5  field.String // 公钥md5
	Private    field.String // 私钥
	PrivateMd5 field.String // 私钥md5
	Algo       field.String // 算法
	StoreKey   field.String // 存储密码
	TimeStamp  field.Int64  // 时间戳

	fieldMap map[string]field.Expr
}

func (u userCa) Table(newTableName string) *userCa {
	u.userCaDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userCa) As(alias string) *userCa {
	u.userCaDo.DO = *(u.userCaDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userCa) updateTableName(table string) *userCa {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.CreateAt = field.NewTime(table, "create_at")
	u.UpdateAt = field.NewTime(table, "update_at")
	u.DeleteAt = field.NewTime(table, "delete_at")
	u.UserID = field.NewInt64(table, "user_id")
	u.Public = field.NewString(table, "public")
	u.PublicMd5 = field.NewString(table, "public_md5")
	u.Private = field.NewString(table, "private")
	u.PrivateMd5 = field.NewString(table, "private_md5")
	u.Algo = field.NewString(table, "algo")
	u.StoreKey = field.NewString(table, "store_key")
	u.TimeStamp = field.NewInt64(table, "time_stamp")

	u.fillFieldMap()

	return u
}

func (u *userCa) WithContext(ctx context.Context) IUserCaDo { return u.userCaDo.WithContext(ctx) }

func (u userCa) TableName() string { return u.userCaDo.TableName() }

func (u userCa) Alias() string { return u.userCaDo.Alias() }

func (u userCa) Columns(cols ...field.Expr) gen.Columns { return u.userCaDo.Columns(cols...) }

func (u *userCa) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userCa) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 12)
	u.fieldMap["id"] = u.ID
	u.fieldMap["create_at"] = u.CreateAt
	u.fieldMap["update_at"] = u.UpdateAt
	u.fieldMap["delete_at"] = u.DeleteAt
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["public"] = u.Public
	u.fieldMap["public_md5"] = u.PublicMd5
	u.fieldMap["private"] = u.Private
	u.fieldMap["private_md5"] = u.PrivateMd5
	u.fieldMap["algo"] = u.Algo
	u.fieldMap["store_key"] = u.StoreKey
	u.fieldMap["time_stamp"] = u.TimeStamp
}

func (u userCa) clone(db *gorm.DB) userCa {
	u.userCaDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userCa) replaceDB(db *gorm.DB) userCa {
	u.userCaDo.ReplaceDB(db)
	return u
}

type userCaDo struct{ gen.DO }

type IUserCaDo interface {
	gen.SubQuery
	Debug() IUserCaDo
	WithContext(ctx context.Context) IUserCaDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IUserCaDo
	WriteDB() IUserCaDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IUserCaDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IUserCaDo
	Not(conds ...gen.Condition) IUserCaDo
	Or(conds ...gen.Condition) IUserCaDo
	Select(conds ...field.Expr) IUserCaDo
	Where(conds ...gen.Condition) IUserCaDo
	Order(conds ...field.Expr) IUserCaDo
	Distinct(cols ...field.Expr) IUserCaDo
	Omit(cols ...field.Expr) IUserCaDo
	Join(table schema.Tabler, on ...field.Expr) IUserCaDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IUserCaDo
	RightJoin(table schema.Tabler, on ...field.Expr) IUserCaDo
	Group(cols ...field.Expr) IUserCaDo
	Having(conds ...gen.Condition) IUserCaDo
	Limit(limit int) IUserCaDo
	Offset(offset int) IUserCaDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IUserCaDo
	Unscoped() IUserCaDo
	Create(values ...*model.UserCa) error
	CreateInBatches(values []*model.UserCa, batchSize int) error
	Save(values ...*model.UserCa) error
	First() (*model.UserCa, error)
	Take() (*model.UserCa, error)
	Last() (*model.UserCa, error)
	Find() ([]*model.UserCa, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCa, err error)
	FindInBatches(result *[]*model.UserCa, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.UserCa) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IUserCaDo
	Assign(attrs ...field.AssignExpr) IUserCaDo
	Joins(fields ...field.RelationField) IUserCaDo
	Preload(fields ...field.RelationField) IUserCaDo
	FirstOrInit() (*model.UserCa, error)
	FirstOrCreate() (*model.UserCa, error)
	FindByPage(offset int, limit int) (result []*model.UserCa, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IUserCaDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (u userCaDo) Debug() IUserCaDo {
	return u.withDO(u.DO.Debug())
}

func (u userCaDo) WithContext(ctx context.Context) IUserCaDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userCaDo) ReadDB() IUserCaDo {
	return u.Clauses(dbresolver.Read)
}

func (u userCaDo) WriteDB() IUserCaDo {
	return u.Clauses(dbresolver.Write)
}

func (u userCaDo) Session(config *gorm.Session) IUserCaDo {
	return u.withDO(u.DO.Session(config))
}

func (u userCaDo) Clauses(conds ...clause.Expression) IUserCaDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userCaDo) Returning(value interface{}, columns ...string) IUserCaDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userCaDo) Not(conds ...gen.Condition) IUserCaDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userCaDo) Or(conds ...gen.Condition) IUserCaDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userCaDo) Select(conds ...field.Expr) IUserCaDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userCaDo) Where(conds ...gen.Condition) IUserCaDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userCaDo) Order(conds ...field.Expr) IUserCaDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userCaDo) Distinct(cols ...field.Expr) IUserCaDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userCaDo) Omit(cols ...field.Expr) IUserCaDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userCaDo) Join(table schema.Tabler, on ...field.Expr) IUserCaDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userCaDo) LeftJoin(table schema.Tabler, on ...field.Expr) IUserCaDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userCaDo) RightJoin(table schema.Tabler, on ...field.Expr) IUserCaDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userCaDo) Group(cols ...field.Expr) IUserCaDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userCaDo) Having(conds ...gen.Condition) IUserCaDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userCaDo) Limit(limit int) IUserCaDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userCaDo) Offset(offset int) IUserCaDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userCaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IUserCaDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userCaDo) Unscoped() IUserCaDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userCaDo) Create(values ...*model.UserCa) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userCaDo) CreateInBatches(values []*model.UserCa, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userCaDo) Save(values ...*model.UserCa) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userCaDo) First() (*model.UserCa, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCa), nil
	}
}

func (u userCaDo) Take() (*model.UserCa, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCa), nil
	}
}

func (u userCaDo) Last() (*model.UserCa, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCa), nil
	}
}

func (u userCaDo) Find() ([]*model.UserCa, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserCa), err
}

func (u userCaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserCa, err error) {
	buf := make([]*model.UserCa, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userCaDo) FindInBatches(result *[]*model.UserCa, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userCaDo) Attrs(attrs ...field.AssignExpr) IUserCaDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userCaDo) Assign(attrs ...field.AssignExpr) IUserCaDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userCaDo) Joins(fields ...field.RelationField) IUserCaDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userCaDo) Preload(fields ...field.RelationField) IUserCaDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userCaDo) FirstOrInit() (*model.UserCa, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCa), nil
	}
}

func (u userCaDo) FirstOrCreate() (*model.UserCa, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserCa), nil
	}
}

func (u userCaDo) FindByPage(offset int, limit int) (result []*model.UserCa, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userCaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userCaDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userCaDo) Delete(models ...*model.UserCa) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userCaDo) withDO(do gen.Dao) *userCaDo {
	u.DO = *do.(*gen.DO)
	return u
}

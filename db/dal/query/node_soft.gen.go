// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newNodeSoft(db *gorm.DB, opts ...gen.DOOption) nodeSoft {
	_nodeSoft := nodeSoft{}

	_nodeSoft.nodeSoftDo.UseDB(db, opts...)
	_nodeSoft.nodeSoftDo.UseModel(&model.NodeSoft{})

	tableName := _nodeSoft.nodeSoftDo.TableName()
	_nodeSoft.ALL = field.NewAsterisk(tableName)
	_nodeSoft.ID = field.NewInt64(tableName, "id")
	_nodeSoft.CreateAt = field.NewTime(tableName, "create_at")
	_nodeSoft.UpdateAt = field.NewTime(tableName, "update_at")
	_nodeSoft.DeleteAt = field.NewTime(tableName, "delete_at")
	_nodeSoft.NodeID = field.NewString(tableName, "node_id")
	_nodeSoft.SoftID = field.NewString(tableName, "soft_id")
	_nodeSoft.SoftURL = field.NewString(tableName, "soft_url")
	_nodeSoft.SortSize = field.NewInt64(tableName, "sort_size")
	_nodeSoft.SoftMd5 = field.NewString(tableName, "soft_md5")
	_nodeSoft.SoftVersion = field.NewString(tableName, "soft_version")
	_nodeSoft.SoftLanguage = field.NewString(tableName, "soft_language")
	_nodeSoft.SoftType = field.NewString(tableName, "soft_type")
	_nodeSoft.SoftExplain = field.NewString(tableName, "soft_explain")
	_nodeSoft.DeviceID = field.NewString(tableName, "device_id")

	_nodeSoft.fillFieldMap()

	return _nodeSoft
}

// nodeSoft 超级节点的软件信息
type nodeSoft struct {
	nodeSoftDo nodeSoftDo

	ALL          field.Asterisk
	ID           field.Int64  // 数据id
	CreateAt     field.Time   // 创建时间
	UpdateAt     field.Time   // 更新时间
	DeleteAt     field.Time   // 删除时间
	NodeID       field.String // 节点id
	SoftID       field.String // 软件id
	SoftURL      field.String // 软件url
	SortSize     field.Int64  // 软件大小(单位字节)
	SoftMd5      field.String // 软件md5
	SoftVersion  field.String // 软件版本
	SoftLanguage field.String // 软件语言
	SoftType     field.String // 软件类型
	SoftExplain  field.String // 软件说明
	DeviceID     field.String // 所在设备id

	fieldMap map[string]field.Expr
}

func (n nodeSoft) Table(newTableName string) *nodeSoft {
	n.nodeSoftDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nodeSoft) As(alias string) *nodeSoft {
	n.nodeSoftDo.DO = *(n.nodeSoftDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nodeSoft) updateTableName(table string) *nodeSoft {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewInt64(table, "id")
	n.CreateAt = field.NewTime(table, "create_at")
	n.UpdateAt = field.NewTime(table, "update_at")
	n.DeleteAt = field.NewTime(table, "delete_at")
	n.NodeID = field.NewString(table, "node_id")
	n.SoftID = field.NewString(table, "soft_id")
	n.SoftURL = field.NewString(table, "soft_url")
	n.SortSize = field.NewInt64(table, "sort_size")
	n.SoftMd5 = field.NewString(table, "soft_md5")
	n.SoftVersion = field.NewString(table, "soft_version")
	n.SoftLanguage = field.NewString(table, "soft_language")
	n.SoftType = field.NewString(table, "soft_type")
	n.SoftExplain = field.NewString(table, "soft_explain")
	n.DeviceID = field.NewString(table, "device_id")

	n.fillFieldMap()

	return n
}

func (n *nodeSoft) WithContext(ctx context.Context) INodeSoftDo { return n.nodeSoftDo.WithContext(ctx) }

func (n nodeSoft) TableName() string { return n.nodeSoftDo.TableName() }

func (n nodeSoft) Alias() string { return n.nodeSoftDo.Alias() }

func (n nodeSoft) Columns(cols ...field.Expr) gen.Columns { return n.nodeSoftDo.Columns(cols...) }

func (n *nodeSoft) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nodeSoft) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 14)
	n.fieldMap["id"] = n.ID
	n.fieldMap["create_at"] = n.CreateAt
	n.fieldMap["update_at"] = n.UpdateAt
	n.fieldMap["delete_at"] = n.DeleteAt
	n.fieldMap["node_id"] = n.NodeID
	n.fieldMap["soft_id"] = n.SoftID
	n.fieldMap["soft_url"] = n.SoftURL
	n.fieldMap["sort_size"] = n.SortSize
	n.fieldMap["soft_md5"] = n.SoftMd5
	n.fieldMap["soft_version"] = n.SoftVersion
	n.fieldMap["soft_language"] = n.SoftLanguage
	n.fieldMap["soft_type"] = n.SoftType
	n.fieldMap["soft_explain"] = n.SoftExplain
	n.fieldMap["device_id"] = n.DeviceID
}

func (n nodeSoft) clone(db *gorm.DB) nodeSoft {
	n.nodeSoftDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n nodeSoft) replaceDB(db *gorm.DB) nodeSoft {
	n.nodeSoftDo.ReplaceDB(db)
	return n
}

type nodeSoftDo struct{ gen.DO }

type INodeSoftDo interface {
	gen.SubQuery
	Debug() INodeSoftDo
	WithContext(ctx context.Context) INodeSoftDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INodeSoftDo
	WriteDB() INodeSoftDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INodeSoftDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INodeSoftDo
	Not(conds ...gen.Condition) INodeSoftDo
	Or(conds ...gen.Condition) INodeSoftDo
	Select(conds ...field.Expr) INodeSoftDo
	Where(conds ...gen.Condition) INodeSoftDo
	Order(conds ...field.Expr) INodeSoftDo
	Distinct(cols ...field.Expr) INodeSoftDo
	Omit(cols ...field.Expr) INodeSoftDo
	Join(table schema.Tabler, on ...field.Expr) INodeSoftDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INodeSoftDo
	RightJoin(table schema.Tabler, on ...field.Expr) INodeSoftDo
	Group(cols ...field.Expr) INodeSoftDo
	Having(conds ...gen.Condition) INodeSoftDo
	Limit(limit int) INodeSoftDo
	Offset(offset int) INodeSoftDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INodeSoftDo
	Unscoped() INodeSoftDo
	Create(values ...*model.NodeSoft) error
	CreateInBatches(values []*model.NodeSoft, batchSize int) error
	Save(values ...*model.NodeSoft) error
	First() (*model.NodeSoft, error)
	Take() (*model.NodeSoft, error)
	Last() (*model.NodeSoft, error)
	Find() ([]*model.NodeSoft, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeSoft, err error)
	FindInBatches(result *[]*model.NodeSoft, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NodeSoft) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INodeSoftDo
	Assign(attrs ...field.AssignExpr) INodeSoftDo
	Joins(fields ...field.RelationField) INodeSoftDo
	Preload(fields ...field.RelationField) INodeSoftDo
	FirstOrInit() (*model.NodeSoft, error)
	FirstOrCreate() (*model.NodeSoft, error)
	FindByPage(offset int, limit int) (result []*model.NodeSoft, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INodeSoftDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n nodeSoftDo) Debug() INodeSoftDo {
	return n.withDO(n.DO.Debug())
}

func (n nodeSoftDo) WithContext(ctx context.Context) INodeSoftDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nodeSoftDo) ReadDB() INodeSoftDo {
	return n.Clauses(dbresolver.Read)
}

func (n nodeSoftDo) WriteDB() INodeSoftDo {
	return n.Clauses(dbresolver.Write)
}

func (n nodeSoftDo) Session(config *gorm.Session) INodeSoftDo {
	return n.withDO(n.DO.Session(config))
}

func (n nodeSoftDo) Clauses(conds ...clause.Expression) INodeSoftDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nodeSoftDo) Returning(value interface{}, columns ...string) INodeSoftDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nodeSoftDo) Not(conds ...gen.Condition) INodeSoftDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nodeSoftDo) Or(conds ...gen.Condition) INodeSoftDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nodeSoftDo) Select(conds ...field.Expr) INodeSoftDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nodeSoftDo) Where(conds ...gen.Condition) INodeSoftDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nodeSoftDo) Order(conds ...field.Expr) INodeSoftDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nodeSoftDo) Distinct(cols ...field.Expr) INodeSoftDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nodeSoftDo) Omit(cols ...field.Expr) INodeSoftDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nodeSoftDo) Join(table schema.Tabler, on ...field.Expr) INodeSoftDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nodeSoftDo) LeftJoin(table schema.Tabler, on ...field.Expr) INodeSoftDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nodeSoftDo) RightJoin(table schema.Tabler, on ...field.Expr) INodeSoftDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nodeSoftDo) Group(cols ...field.Expr) INodeSoftDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nodeSoftDo) Having(conds ...gen.Condition) INodeSoftDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nodeSoftDo) Limit(limit int) INodeSoftDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nodeSoftDo) Offset(offset int) INodeSoftDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nodeSoftDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INodeSoftDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nodeSoftDo) Unscoped() INodeSoftDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nodeSoftDo) Create(values ...*model.NodeSoft) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nodeSoftDo) CreateInBatches(values []*model.NodeSoft, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nodeSoftDo) Save(values ...*model.NodeSoft) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nodeSoftDo) First() (*model.NodeSoft, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeSoft), nil
	}
}

func (n nodeSoftDo) Take() (*model.NodeSoft, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeSoft), nil
	}
}

func (n nodeSoftDo) Last() (*model.NodeSoft, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeSoft), nil
	}
}

func (n nodeSoftDo) Find() ([]*model.NodeSoft, error) {
	result, err := n.DO.Find()
	return result.([]*model.NodeSoft), err
}

func (n nodeSoftDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeSoft, err error) {
	buf := make([]*model.NodeSoft, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nodeSoftDo) FindInBatches(result *[]*model.NodeSoft, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nodeSoftDo) Attrs(attrs ...field.AssignExpr) INodeSoftDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nodeSoftDo) Assign(attrs ...field.AssignExpr) INodeSoftDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nodeSoftDo) Joins(fields ...field.RelationField) INodeSoftDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nodeSoftDo) Preload(fields ...field.RelationField) INodeSoftDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nodeSoftDo) FirstOrInit() (*model.NodeSoft, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeSoft), nil
	}
}

func (n nodeSoftDo) FirstOrCreate() (*model.NodeSoft, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeSoft), nil
	}
}

func (n nodeSoftDo) FindByPage(offset int, limit int) (result []*model.NodeSoft, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nodeSoftDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nodeSoftDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nodeSoftDo) Delete(models ...*model.NodeSoft) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nodeSoftDo) withDO(do gen.Dao) *nodeSoftDo {
	n.DO = *do.(*gen.DO)
	return n
}

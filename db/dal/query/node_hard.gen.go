// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newNodeHard(db *gorm.DB, opts ...gen.DOOption) nodeHard {
	_nodeHard := nodeHard{}

	_nodeHard.nodeHardDo.UseDB(db, opts...)
	_nodeHard.nodeHardDo.UseModel(&model.NodeHard{})

	tableName := _nodeHard.nodeHardDo.TableName()
	_nodeHard.ALL = field.NewAsterisk(tableName)
	_nodeHard.ID = field.NewInt64(tableName, "id")
	_nodeHard.CreateAt = field.NewTime(tableName, "create_at")
	_nodeHard.UpdateAt = field.NewTime(tableName, "update_at")
	_nodeHard.DeleteAt = field.NewTime(tableName, "delete_at")
	_nodeHard.HardID = field.NewString(tableName, "hard_id")
	_nodeHard.HardName = field.NewString(tableName, "hard_name")
	_nodeHard.HardModel = field.NewString(tableName, "hard_model")
	_nodeHard.HardType = field.NewString(tableName, "hard_type")
	_nodeHard.HardBrand = field.NewString(tableName, "hard_brand")
	_nodeHard.HardInstall = field.NewString(tableName, "hard_install")
	_nodeHard.HardParams = field.NewString(tableName, "hard_params")
	_nodeHard.HardExplain = field.NewString(tableName, "hard_explain")

	_nodeHard.fillFieldMap()

	return _nodeHard
}

// nodeHard 超级节点的硬件信息
type nodeHard struct {
	nodeHardDo nodeHardDo

	ALL         field.Asterisk
	ID          field.Int64  // 数据id
	CreateAt    field.Time   // 创建时间
	UpdateAt    field.Time   // 更新时间
	DeleteAt    field.Time   // 删除时间
	HardID      field.String // 硬件id
	HardName    field.String // 硬件名称
	HardModel   field.String // 硬件型号
	HardType    field.String // 硬件类别(机架,存储,GPU,CPU)
	HardBrand   field.String // 硬件品牌
	HardInstall field.String // 安装信息
	HardParams  field.String // 硬件参数
	HardExplain field.String // 硬件介绍

	fieldMap map[string]field.Expr
}

func (n nodeHard) Table(newTableName string) *nodeHard {
	n.nodeHardDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nodeHard) As(alias string) *nodeHard {
	n.nodeHardDo.DO = *(n.nodeHardDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nodeHard) updateTableName(table string) *nodeHard {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewInt64(table, "id")
	n.CreateAt = field.NewTime(table, "create_at")
	n.UpdateAt = field.NewTime(table, "update_at")
	n.DeleteAt = field.NewTime(table, "delete_at")
	n.HardID = field.NewString(table, "hard_id")
	n.HardName = field.NewString(table, "hard_name")
	n.HardModel = field.NewString(table, "hard_model")
	n.HardType = field.NewString(table, "hard_type")
	n.HardBrand = field.NewString(table, "hard_brand")
	n.HardInstall = field.NewString(table, "hard_install")
	n.HardParams = field.NewString(table, "hard_params")
	n.HardExplain = field.NewString(table, "hard_explain")

	n.fillFieldMap()

	return n
}

func (n *nodeHard) WithContext(ctx context.Context) INodeHardDo { return n.nodeHardDo.WithContext(ctx) }

func (n nodeHard) TableName() string { return n.nodeHardDo.TableName() }

func (n nodeHard) Alias() string { return n.nodeHardDo.Alias() }

func (n nodeHard) Columns(cols ...field.Expr) gen.Columns { return n.nodeHardDo.Columns(cols...) }

func (n *nodeHard) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nodeHard) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 12)
	n.fieldMap["id"] = n.ID
	n.fieldMap["create_at"] = n.CreateAt
	n.fieldMap["update_at"] = n.UpdateAt
	n.fieldMap["delete_at"] = n.DeleteAt
	n.fieldMap["hard_id"] = n.HardID
	n.fieldMap["hard_name"] = n.HardName
	n.fieldMap["hard_model"] = n.HardModel
	n.fieldMap["hard_type"] = n.HardType
	n.fieldMap["hard_brand"] = n.HardBrand
	n.fieldMap["hard_install"] = n.HardInstall
	n.fieldMap["hard_params"] = n.HardParams
	n.fieldMap["hard_explain"] = n.HardExplain
}

func (n nodeHard) clone(db *gorm.DB) nodeHard {
	n.nodeHardDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n nodeHard) replaceDB(db *gorm.DB) nodeHard {
	n.nodeHardDo.ReplaceDB(db)
	return n
}

type nodeHardDo struct{ gen.DO }

type INodeHardDo interface {
	gen.SubQuery
	Debug() INodeHardDo
	WithContext(ctx context.Context) INodeHardDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INodeHardDo
	WriteDB() INodeHardDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INodeHardDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INodeHardDo
	Not(conds ...gen.Condition) INodeHardDo
	Or(conds ...gen.Condition) INodeHardDo
	Select(conds ...field.Expr) INodeHardDo
	Where(conds ...gen.Condition) INodeHardDo
	Order(conds ...field.Expr) INodeHardDo
	Distinct(cols ...field.Expr) INodeHardDo
	Omit(cols ...field.Expr) INodeHardDo
	Join(table schema.Tabler, on ...field.Expr) INodeHardDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INodeHardDo
	RightJoin(table schema.Tabler, on ...field.Expr) INodeHardDo
	Group(cols ...field.Expr) INodeHardDo
	Having(conds ...gen.Condition) INodeHardDo
	Limit(limit int) INodeHardDo
	Offset(offset int) INodeHardDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INodeHardDo
	Unscoped() INodeHardDo
	Create(values ...*model.NodeHard) error
	CreateInBatches(values []*model.NodeHard, batchSize int) error
	Save(values ...*model.NodeHard) error
	First() (*model.NodeHard, error)
	Take() (*model.NodeHard, error)
	Last() (*model.NodeHard, error)
	Find() ([]*model.NodeHard, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeHard, err error)
	FindInBatches(result *[]*model.NodeHard, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NodeHard) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INodeHardDo
	Assign(attrs ...field.AssignExpr) INodeHardDo
	Joins(fields ...field.RelationField) INodeHardDo
	Preload(fields ...field.RelationField) INodeHardDo
	FirstOrInit() (*model.NodeHard, error)
	FirstOrCreate() (*model.NodeHard, error)
	FindByPage(offset int, limit int) (result []*model.NodeHard, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INodeHardDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n nodeHardDo) Debug() INodeHardDo {
	return n.withDO(n.DO.Debug())
}

func (n nodeHardDo) WithContext(ctx context.Context) INodeHardDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nodeHardDo) ReadDB() INodeHardDo {
	return n.Clauses(dbresolver.Read)
}

func (n nodeHardDo) WriteDB() INodeHardDo {
	return n.Clauses(dbresolver.Write)
}

func (n nodeHardDo) Session(config *gorm.Session) INodeHardDo {
	return n.withDO(n.DO.Session(config))
}

func (n nodeHardDo) Clauses(conds ...clause.Expression) INodeHardDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nodeHardDo) Returning(value interface{}, columns ...string) INodeHardDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nodeHardDo) Not(conds ...gen.Condition) INodeHardDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nodeHardDo) Or(conds ...gen.Condition) INodeHardDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nodeHardDo) Select(conds ...field.Expr) INodeHardDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nodeHardDo) Where(conds ...gen.Condition) INodeHardDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nodeHardDo) Order(conds ...field.Expr) INodeHardDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nodeHardDo) Distinct(cols ...field.Expr) INodeHardDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nodeHardDo) Omit(cols ...field.Expr) INodeHardDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nodeHardDo) Join(table schema.Tabler, on ...field.Expr) INodeHardDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nodeHardDo) LeftJoin(table schema.Tabler, on ...field.Expr) INodeHardDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nodeHardDo) RightJoin(table schema.Tabler, on ...field.Expr) INodeHardDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nodeHardDo) Group(cols ...field.Expr) INodeHardDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nodeHardDo) Having(conds ...gen.Condition) INodeHardDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nodeHardDo) Limit(limit int) INodeHardDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nodeHardDo) Offset(offset int) INodeHardDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nodeHardDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INodeHardDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nodeHardDo) Unscoped() INodeHardDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nodeHardDo) Create(values ...*model.NodeHard) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nodeHardDo) CreateInBatches(values []*model.NodeHard, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nodeHardDo) Save(values ...*model.NodeHard) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nodeHardDo) First() (*model.NodeHard, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeHard), nil
	}
}

func (n nodeHardDo) Take() (*model.NodeHard, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeHard), nil
	}
}

func (n nodeHardDo) Last() (*model.NodeHard, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeHard), nil
	}
}

func (n nodeHardDo) Find() ([]*model.NodeHard, error) {
	result, err := n.DO.Find()
	return result.([]*model.NodeHard), err
}

func (n nodeHardDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeHard, err error) {
	buf := make([]*model.NodeHard, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nodeHardDo) FindInBatches(result *[]*model.NodeHard, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nodeHardDo) Attrs(attrs ...field.AssignExpr) INodeHardDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nodeHardDo) Assign(attrs ...field.AssignExpr) INodeHardDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nodeHardDo) Joins(fields ...field.RelationField) INodeHardDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nodeHardDo) Preload(fields ...field.RelationField) INodeHardDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nodeHardDo) FirstOrInit() (*model.NodeHard, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeHard), nil
	}
}

func (n nodeHardDo) FirstOrCreate() (*model.NodeHard, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeHard), nil
	}
}

func (n nodeHardDo) FindByPage(offset int, limit int) (result []*model.NodeHard, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nodeHardDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nodeHardDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nodeHardDo) Delete(models ...*model.NodeHard) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nodeHardDo) withDO(do gen.Dao) *nodeHardDo {
	n.DO = *do.(*gen.DO)
	return n
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newSysOperlog(db *gorm.DB, opts ...gen.DOOption) sysOperlog {
	_sysOperlog := sysOperlog{}

	_sysOperlog.sysOperlogDo.UseDB(db, opts...)
	_sysOperlog.sysOperlogDo.UseModel(&model.SysOperlog{})

	tableName := _sysOperlog.sysOperlogDo.TableName()
	_sysOperlog.ALL = field.NewAsterisk(tableName)
	_sysOperlog.ID = field.NewInt64(tableName, "id")
	_sysOperlog.CreateAt = field.NewTime(tableName, "create_at")
	_sysOperlog.UpdateAt = field.NewTime(tableName, "update_at")
	_sysOperlog.DeleteAt = field.NewTime(tableName, "delete_at")
	_sysOperlog.IP = field.NewString(tableName, "ip")
	_sysOperlog.Method = field.NewString(tableName, "method")
	_sysOperlog.Path = field.NewString(tableName, "path")
	_sysOperlog.Agent = field.NewString(tableName, "agent")
	_sysOperlog.ErrMsg = field.NewString(tableName, "err_msg")
	_sysOperlog.Body = field.NewString(tableName, "body")
	_sysOperlog.Resp = field.NewString(tableName, "resp")
	_sysOperlog.UserID = field.NewInt64(tableName, "user_id")

	_sysOperlog.fillFieldMap()

	return _sysOperlog
}

// sysOperlog 管理端人员的操作记录
type sysOperlog struct {
	sysOperlogDo sysOperlogDo

	ALL      field.Asterisk
	ID       field.Int64  // 数据id
	CreateAt field.Time   // 创建时间
	UpdateAt field.Time   // 更新时间
	DeleteAt field.Time   // 删除时间
	IP       field.String // 请求ip
	Method   field.String // 请求方法
	Path     field.String // 请求路径
	Agent    field.String // 请求代理
	ErrMsg   field.String // 错误信息
	Body     field.String // 请求body
	Resp     field.String // 响应body
	UserID   field.Int64  // 用户id

	fieldMap map[string]field.Expr
}

func (s sysOperlog) Table(newTableName string) *sysOperlog {
	s.sysOperlogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sysOperlog) As(alias string) *sysOperlog {
	s.sysOperlogDo.DO = *(s.sysOperlogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sysOperlog) updateTableName(table string) *sysOperlog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.CreateAt = field.NewTime(table, "create_at")
	s.UpdateAt = field.NewTime(table, "update_at")
	s.DeleteAt = field.NewTime(table, "delete_at")
	s.IP = field.NewString(table, "ip")
	s.Method = field.NewString(table, "method")
	s.Path = field.NewString(table, "path")
	s.Agent = field.NewString(table, "agent")
	s.ErrMsg = field.NewString(table, "err_msg")
	s.Body = field.NewString(table, "body")
	s.Resp = field.NewString(table, "resp")
	s.UserID = field.NewInt64(table, "user_id")

	s.fillFieldMap()

	return s
}

func (s *sysOperlog) WithContext(ctx context.Context) ISysOperlogDo {
	return s.sysOperlogDo.WithContext(ctx)
}

func (s sysOperlog) TableName() string { return s.sysOperlogDo.TableName() }

func (s sysOperlog) Alias() string { return s.sysOperlogDo.Alias() }

func (s sysOperlog) Columns(cols ...field.Expr) gen.Columns { return s.sysOperlogDo.Columns(cols...) }

func (s *sysOperlog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sysOperlog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["id"] = s.ID
	s.fieldMap["create_at"] = s.CreateAt
	s.fieldMap["update_at"] = s.UpdateAt
	s.fieldMap["delete_at"] = s.DeleteAt
	s.fieldMap["ip"] = s.IP
	s.fieldMap["method"] = s.Method
	s.fieldMap["path"] = s.Path
	s.fieldMap["agent"] = s.Agent
	s.fieldMap["err_msg"] = s.ErrMsg
	s.fieldMap["body"] = s.Body
	s.fieldMap["resp"] = s.Resp
	s.fieldMap["user_id"] = s.UserID
}

func (s sysOperlog) clone(db *gorm.DB) sysOperlog {
	s.sysOperlogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sysOperlog) replaceDB(db *gorm.DB) sysOperlog {
	s.sysOperlogDo.ReplaceDB(db)
	return s
}

type sysOperlogDo struct{ gen.DO }

type ISysOperlogDo interface {
	gen.SubQuery
	Debug() ISysOperlogDo
	WithContext(ctx context.Context) ISysOperlogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISysOperlogDo
	WriteDB() ISysOperlogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISysOperlogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISysOperlogDo
	Not(conds ...gen.Condition) ISysOperlogDo
	Or(conds ...gen.Condition) ISysOperlogDo
	Select(conds ...field.Expr) ISysOperlogDo
	Where(conds ...gen.Condition) ISysOperlogDo
	Order(conds ...field.Expr) ISysOperlogDo
	Distinct(cols ...field.Expr) ISysOperlogDo
	Omit(cols ...field.Expr) ISysOperlogDo
	Join(table schema.Tabler, on ...field.Expr) ISysOperlogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISysOperlogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISysOperlogDo
	Group(cols ...field.Expr) ISysOperlogDo
	Having(conds ...gen.Condition) ISysOperlogDo
	Limit(limit int) ISysOperlogDo
	Offset(offset int) ISysOperlogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISysOperlogDo
	Unscoped() ISysOperlogDo
	Create(values ...*model.SysOperlog) error
	CreateInBatches(values []*model.SysOperlog, batchSize int) error
	Save(values ...*model.SysOperlog) error
	First() (*model.SysOperlog, error)
	Take() (*model.SysOperlog, error)
	Last() (*model.SysOperlog, error)
	Find() ([]*model.SysOperlog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysOperlog, err error)
	FindInBatches(result *[]*model.SysOperlog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SysOperlog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISysOperlogDo
	Assign(attrs ...field.AssignExpr) ISysOperlogDo
	Joins(fields ...field.RelationField) ISysOperlogDo
	Preload(fields ...field.RelationField) ISysOperlogDo
	FirstOrInit() (*model.SysOperlog, error)
	FirstOrCreate() (*model.SysOperlog, error)
	FindByPage(offset int, limit int) (result []*model.SysOperlog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISysOperlogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sysOperlogDo) Debug() ISysOperlogDo {
	return s.withDO(s.DO.Debug())
}

func (s sysOperlogDo) WithContext(ctx context.Context) ISysOperlogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sysOperlogDo) ReadDB() ISysOperlogDo {
	return s.Clauses(dbresolver.Read)
}

func (s sysOperlogDo) WriteDB() ISysOperlogDo {
	return s.Clauses(dbresolver.Write)
}

func (s sysOperlogDo) Session(config *gorm.Session) ISysOperlogDo {
	return s.withDO(s.DO.Session(config))
}

func (s sysOperlogDo) Clauses(conds ...clause.Expression) ISysOperlogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sysOperlogDo) Returning(value interface{}, columns ...string) ISysOperlogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sysOperlogDo) Not(conds ...gen.Condition) ISysOperlogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sysOperlogDo) Or(conds ...gen.Condition) ISysOperlogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sysOperlogDo) Select(conds ...field.Expr) ISysOperlogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sysOperlogDo) Where(conds ...gen.Condition) ISysOperlogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sysOperlogDo) Order(conds ...field.Expr) ISysOperlogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sysOperlogDo) Distinct(cols ...field.Expr) ISysOperlogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sysOperlogDo) Omit(cols ...field.Expr) ISysOperlogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sysOperlogDo) Join(table schema.Tabler, on ...field.Expr) ISysOperlogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sysOperlogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISysOperlogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sysOperlogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISysOperlogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sysOperlogDo) Group(cols ...field.Expr) ISysOperlogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sysOperlogDo) Having(conds ...gen.Condition) ISysOperlogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sysOperlogDo) Limit(limit int) ISysOperlogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sysOperlogDo) Offset(offset int) ISysOperlogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sysOperlogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISysOperlogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sysOperlogDo) Unscoped() ISysOperlogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sysOperlogDo) Create(values ...*model.SysOperlog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sysOperlogDo) CreateInBatches(values []*model.SysOperlog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sysOperlogDo) Save(values ...*model.SysOperlog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sysOperlogDo) First() (*model.SysOperlog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOperlog), nil
	}
}

func (s sysOperlogDo) Take() (*model.SysOperlog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOperlog), nil
	}
}

func (s sysOperlogDo) Last() (*model.SysOperlog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOperlog), nil
	}
}

func (s sysOperlogDo) Find() ([]*model.SysOperlog, error) {
	result, err := s.DO.Find()
	return result.([]*model.SysOperlog), err
}

func (s sysOperlogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SysOperlog, err error) {
	buf := make([]*model.SysOperlog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sysOperlogDo) FindInBatches(result *[]*model.SysOperlog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sysOperlogDo) Attrs(attrs ...field.AssignExpr) ISysOperlogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sysOperlogDo) Assign(attrs ...field.AssignExpr) ISysOperlogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sysOperlogDo) Joins(fields ...field.RelationField) ISysOperlogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sysOperlogDo) Preload(fields ...field.RelationField) ISysOperlogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sysOperlogDo) FirstOrInit() (*model.SysOperlog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOperlog), nil
	}
}

func (s sysOperlogDo) FirstOrCreate() (*model.SysOperlog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SysOperlog), nil
	}
}

func (s sysOperlogDo) FindByPage(offset int, limit int) (result []*model.SysOperlog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sysOperlogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sysOperlogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sysOperlogDo) Delete(models ...*model.SysOperlog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sysOperlogDo) withDO(do gen.Dao) *sysOperlogDo {
	s.DO = *do.(*gen.DO)
	return s
}

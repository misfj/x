// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newDataDirect1(db *gorm.DB, opts ...gen.DOOption) dataDirect1 {
	_dataDirect1 := dataDirect1{}

	_dataDirect1.dataDirect1Do.UseDB(db, opts...)
	_dataDirect1.dataDirect1Do.UseModel(&model.DataDirect1{})

	tableName := _dataDirect1.dataDirect1Do.TableName()
	_dataDirect1.ALL = field.NewAsterisk(tableName)
	_dataDirect1.ID = field.NewInt64(tableName, "id")
	_dataDirect1.CreateAt = field.NewTime(tableName, "create_at")
	_dataDirect1.UpdateAt = field.NewTime(tableName, "update_at")
	_dataDirect1.DeleteAt = field.NewTime(tableName, "delete_at")
	_dataDirect1.DirectId1 = field.NewString(tableName, "direct_id1")
	_dataDirect1.DirectId1Name = field.NewString(tableName, "direct_id1_name")

	_dataDirect1.fillFieldMap()

	return _dataDirect1
}

type dataDirect1 struct {
	dataDirect1Do dataDirect1Do

	ALL           field.Asterisk
	ID            field.Int64  // 数据id
	CreateAt      field.Time   // 创建时间
	UpdateAt      field.Time   // 更新时间
	DeleteAt      field.Time   // 删除时间
	DirectId1     field.String // 目录标识
	DirectId1Name field.String // 目录名称

	fieldMap map[string]field.Expr
}

func (d dataDirect1) Table(newTableName string) *dataDirect1 {
	d.dataDirect1Do.UseTable(newTableName)
	return d.updateTableName(newTableName)
}

func (d dataDirect1) As(alias string) *dataDirect1 {
	d.dataDirect1Do.DO = *(d.dataDirect1Do.As(alias).(*gen.DO))
	return d.updateTableName(alias)
}

func (d *dataDirect1) updateTableName(table string) *dataDirect1 {
	d.ALL = field.NewAsterisk(table)
	d.ID = field.NewInt64(table, "id")
	d.CreateAt = field.NewTime(table, "create_at")
	d.UpdateAt = field.NewTime(table, "update_at")
	d.DeleteAt = field.NewTime(table, "delete_at")
	d.DirectId1 = field.NewString(table, "direct_id1")
	d.DirectId1Name = field.NewString(table, "direct_id1_name")

	d.fillFieldMap()

	return d
}

func (d *dataDirect1) WithContext(ctx context.Context) IDataDirect1Do {
	return d.dataDirect1Do.WithContext(ctx)
}

func (d dataDirect1) TableName() string { return d.dataDirect1Do.TableName() }

func (d dataDirect1) Alias() string { return d.dataDirect1Do.Alias() }

func (d dataDirect1) Columns(cols ...field.Expr) gen.Columns { return d.dataDirect1Do.Columns(cols...) }

func (d *dataDirect1) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := d.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (d *dataDirect1) fillFieldMap() {
	d.fieldMap = make(map[string]field.Expr, 6)
	d.fieldMap["id"] = d.ID
	d.fieldMap["create_at"] = d.CreateAt
	d.fieldMap["update_at"] = d.UpdateAt
	d.fieldMap["delete_at"] = d.DeleteAt
	d.fieldMap["direct_id1"] = d.DirectId1
	d.fieldMap["direct_id1_name"] = d.DirectId1Name
}

func (d dataDirect1) clone(db *gorm.DB) dataDirect1 {
	d.dataDirect1Do.ReplaceConnPool(db.Statement.ConnPool)
	return d
}

func (d dataDirect1) replaceDB(db *gorm.DB) dataDirect1 {
	d.dataDirect1Do.ReplaceDB(db)
	return d
}

type dataDirect1Do struct{ gen.DO }

type IDataDirect1Do interface {
	gen.SubQuery
	Debug() IDataDirect1Do
	WithContext(ctx context.Context) IDataDirect1Do
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IDataDirect1Do
	WriteDB() IDataDirect1Do
	As(alias string) gen.Dao
	Session(config *gorm.Session) IDataDirect1Do
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IDataDirect1Do
	Not(conds ...gen.Condition) IDataDirect1Do
	Or(conds ...gen.Condition) IDataDirect1Do
	Select(conds ...field.Expr) IDataDirect1Do
	Where(conds ...gen.Condition) IDataDirect1Do
	Order(conds ...field.Expr) IDataDirect1Do
	Distinct(cols ...field.Expr) IDataDirect1Do
	Omit(cols ...field.Expr) IDataDirect1Do
	Join(table schema.Tabler, on ...field.Expr) IDataDirect1Do
	LeftJoin(table schema.Tabler, on ...field.Expr) IDataDirect1Do
	RightJoin(table schema.Tabler, on ...field.Expr) IDataDirect1Do
	Group(cols ...field.Expr) IDataDirect1Do
	Having(conds ...gen.Condition) IDataDirect1Do
	Limit(limit int) IDataDirect1Do
	Offset(offset int) IDataDirect1Do
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IDataDirect1Do
	Unscoped() IDataDirect1Do
	Create(values ...*model.DataDirect1) error
	CreateInBatches(values []*model.DataDirect1, batchSize int) error
	Save(values ...*model.DataDirect1) error
	First() (*model.DataDirect1, error)
	Take() (*model.DataDirect1, error)
	Last() (*model.DataDirect1, error)
	Find() ([]*model.DataDirect1, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataDirect1, err error)
	FindInBatches(result *[]*model.DataDirect1, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.DataDirect1) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IDataDirect1Do
	Assign(attrs ...field.AssignExpr) IDataDirect1Do
	Joins(fields ...field.RelationField) IDataDirect1Do
	Preload(fields ...field.RelationField) IDataDirect1Do
	FirstOrInit() (*model.DataDirect1, error)
	FirstOrCreate() (*model.DataDirect1, error)
	FindByPage(offset int, limit int) (result []*model.DataDirect1, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IDataDirect1Do
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (d dataDirect1Do) Debug() IDataDirect1Do {
	return d.withDO(d.DO.Debug())
}

func (d dataDirect1Do) WithContext(ctx context.Context) IDataDirect1Do {
	return d.withDO(d.DO.WithContext(ctx))
}

func (d dataDirect1Do) ReadDB() IDataDirect1Do {
	return d.Clauses(dbresolver.Read)
}

func (d dataDirect1Do) WriteDB() IDataDirect1Do {
	return d.Clauses(dbresolver.Write)
}

func (d dataDirect1Do) Session(config *gorm.Session) IDataDirect1Do {
	return d.withDO(d.DO.Session(config))
}

func (d dataDirect1Do) Clauses(conds ...clause.Expression) IDataDirect1Do {
	return d.withDO(d.DO.Clauses(conds...))
}

func (d dataDirect1Do) Returning(value interface{}, columns ...string) IDataDirect1Do {
	return d.withDO(d.DO.Returning(value, columns...))
}

func (d dataDirect1Do) Not(conds ...gen.Condition) IDataDirect1Do {
	return d.withDO(d.DO.Not(conds...))
}

func (d dataDirect1Do) Or(conds ...gen.Condition) IDataDirect1Do {
	return d.withDO(d.DO.Or(conds...))
}

func (d dataDirect1Do) Select(conds ...field.Expr) IDataDirect1Do {
	return d.withDO(d.DO.Select(conds...))
}

func (d dataDirect1Do) Where(conds ...gen.Condition) IDataDirect1Do {
	return d.withDO(d.DO.Where(conds...))
}

func (d dataDirect1Do) Order(conds ...field.Expr) IDataDirect1Do {
	return d.withDO(d.DO.Order(conds...))
}

func (d dataDirect1Do) Distinct(cols ...field.Expr) IDataDirect1Do {
	return d.withDO(d.DO.Distinct(cols...))
}

func (d dataDirect1Do) Omit(cols ...field.Expr) IDataDirect1Do {
	return d.withDO(d.DO.Omit(cols...))
}

func (d dataDirect1Do) Join(table schema.Tabler, on ...field.Expr) IDataDirect1Do {
	return d.withDO(d.DO.Join(table, on...))
}

func (d dataDirect1Do) LeftJoin(table schema.Tabler, on ...field.Expr) IDataDirect1Do {
	return d.withDO(d.DO.LeftJoin(table, on...))
}

func (d dataDirect1Do) RightJoin(table schema.Tabler, on ...field.Expr) IDataDirect1Do {
	return d.withDO(d.DO.RightJoin(table, on...))
}

func (d dataDirect1Do) Group(cols ...field.Expr) IDataDirect1Do {
	return d.withDO(d.DO.Group(cols...))
}

func (d dataDirect1Do) Having(conds ...gen.Condition) IDataDirect1Do {
	return d.withDO(d.DO.Having(conds...))
}

func (d dataDirect1Do) Limit(limit int) IDataDirect1Do {
	return d.withDO(d.DO.Limit(limit))
}

func (d dataDirect1Do) Offset(offset int) IDataDirect1Do {
	return d.withDO(d.DO.Offset(offset))
}

func (d dataDirect1Do) Scopes(funcs ...func(gen.Dao) gen.Dao) IDataDirect1Do {
	return d.withDO(d.DO.Scopes(funcs...))
}

func (d dataDirect1Do) Unscoped() IDataDirect1Do {
	return d.withDO(d.DO.Unscoped())
}

func (d dataDirect1Do) Create(values ...*model.DataDirect1) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Create(values)
}

func (d dataDirect1Do) CreateInBatches(values []*model.DataDirect1, batchSize int) error {
	return d.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (d dataDirect1Do) Save(values ...*model.DataDirect1) error {
	if len(values) == 0 {
		return nil
	}
	return d.DO.Save(values)
}

func (d dataDirect1Do) First() (*model.DataDirect1, error) {
	if result, err := d.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataDirect1), nil
	}
}

func (d dataDirect1Do) Take() (*model.DataDirect1, error) {
	if result, err := d.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataDirect1), nil
	}
}

func (d dataDirect1Do) Last() (*model.DataDirect1, error) {
	if result, err := d.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataDirect1), nil
	}
}

func (d dataDirect1Do) Find() ([]*model.DataDirect1, error) {
	result, err := d.DO.Find()
	return result.([]*model.DataDirect1), err
}

func (d dataDirect1Do) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.DataDirect1, err error) {
	buf := make([]*model.DataDirect1, 0, batchSize)
	err = d.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (d dataDirect1Do) FindInBatches(result *[]*model.DataDirect1, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return d.DO.FindInBatches(result, batchSize, fc)
}

func (d dataDirect1Do) Attrs(attrs ...field.AssignExpr) IDataDirect1Do {
	return d.withDO(d.DO.Attrs(attrs...))
}

func (d dataDirect1Do) Assign(attrs ...field.AssignExpr) IDataDirect1Do {
	return d.withDO(d.DO.Assign(attrs...))
}

func (d dataDirect1Do) Joins(fields ...field.RelationField) IDataDirect1Do {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Joins(_f))
	}
	return &d
}

func (d dataDirect1Do) Preload(fields ...field.RelationField) IDataDirect1Do {
	for _, _f := range fields {
		d = *d.withDO(d.DO.Preload(_f))
	}
	return &d
}

func (d dataDirect1Do) FirstOrInit() (*model.DataDirect1, error) {
	if result, err := d.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataDirect1), nil
	}
}

func (d dataDirect1Do) FirstOrCreate() (*model.DataDirect1, error) {
	if result, err := d.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.DataDirect1), nil
	}
}

func (d dataDirect1Do) FindByPage(offset int, limit int) (result []*model.DataDirect1, count int64, err error) {
	result, err = d.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = d.Offset(-1).Limit(-1).Count()
	return
}

func (d dataDirect1Do) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = d.Count()
	if err != nil {
		return
	}

	err = d.Offset(offset).Limit(limit).Scan(result)
	return
}

func (d dataDirect1Do) Scan(result interface{}) (err error) {
	return d.DO.Scan(result)
}

func (d dataDirect1Do) Delete(models ...*model.DataDirect1) (result gen.ResultInfo, err error) {
	return d.DO.Delete(models)
}

func (d *dataDirect1Do) withDO(do gen.Dao) *dataDirect1Do {
	d.DO = *do.(*gen.DO)
	return d
}

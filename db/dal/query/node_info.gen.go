// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"coredx/db/dal/model"
)

func newNodeInfo(db *gorm.DB, opts ...gen.DOOption) nodeInfo {
	_nodeInfo := nodeInfo{}

	_nodeInfo.nodeInfoDo.UseDB(db, opts...)
	_nodeInfo.nodeInfoDo.UseModel(&model.NodeInfo{})

	tableName := _nodeInfo.nodeInfoDo.TableName()
	_nodeInfo.ALL = field.NewAsterisk(tableName)
	_nodeInfo.ID = field.NewInt64(tableName, "id")
	_nodeInfo.CreateAt = field.NewTime(tableName, "create_at")
	_nodeInfo.UpdateAt = field.NewTime(tableName, "update_at")
	_nodeInfo.DeleteAt = field.NewTime(tableName, "delete_at")
	_nodeInfo.NodeID = field.NewString(tableName, "node_id")
	_nodeInfo.NodeUnit = field.NewString(tableName, "node_unit")
	_nodeInfo.NodeDeploy = field.NewString(tableName, "node_deploy")
	_nodeInfo.NodeOperation = field.NewString(tableName, "node_operation")
	_nodeInfo.LoginCode = field.NewString(tableName, "login_code")
	_nodeInfo.NodePublic = field.NewString(tableName, "node_public")
	_nodeInfo.NodePublicMd5 = field.NewString(tableName, "node_public_md5")
	_nodeInfo.NodePrivate = field.NewString(tableName, "node_private")
	_nodeInfo.NodePrivateMd5 = field.NewString(tableName, "node_private_md5")
	_nodeInfo.NodeAlgo = field.NewString(tableName, "node_algo")
	_nodeInfo.NodeStoreKey = field.NewString(tableName, "node_store_key")

	_nodeInfo.fillFieldMap()

	return _nodeInfo
}

// nodeInfo 超级节点的登记信息
type nodeInfo struct {
	nodeInfoDo nodeInfoDo

	ALL            field.Asterisk
	ID             field.Int64  // 数据id
	CreateAt       field.Time   // 创建时间
	UpdateAt       field.Time   // 更新时间
	DeleteAt       field.Time   // 删除时间
	NodeID         field.String // 节点编号
	NodeUnit       field.String // 节点单位
	NodeDeploy     field.String // 节点部署地址
	NodeOperation  field.String // 节点运营商
	LoginCode      field.String // 节点登录码
	NodePublic     field.String // 节点公钥
	NodePublicMd5  field.String // 公钥md5
	NodePrivate    field.String // 节点私钥
	NodePrivateMd5 field.String // 私钥md5
	NodeAlgo       field.String // 节点公私要生成算法
	NodeStoreKey   field.String // 节点sm2私钥保存算法

	fieldMap map[string]field.Expr
}

func (n nodeInfo) Table(newTableName string) *nodeInfo {
	n.nodeInfoDo.UseTable(newTableName)
	return n.updateTableName(newTableName)
}

func (n nodeInfo) As(alias string) *nodeInfo {
	n.nodeInfoDo.DO = *(n.nodeInfoDo.As(alias).(*gen.DO))
	return n.updateTableName(alias)
}

func (n *nodeInfo) updateTableName(table string) *nodeInfo {
	n.ALL = field.NewAsterisk(table)
	n.ID = field.NewInt64(table, "id")
	n.CreateAt = field.NewTime(table, "create_at")
	n.UpdateAt = field.NewTime(table, "update_at")
	n.DeleteAt = field.NewTime(table, "delete_at")
	n.NodeID = field.NewString(table, "node_id")
	n.NodeUnit = field.NewString(table, "node_unit")
	n.NodeDeploy = field.NewString(table, "node_deploy")
	n.NodeOperation = field.NewString(table, "node_operation")
	n.LoginCode = field.NewString(table, "login_code")
	n.NodePublic = field.NewString(table, "node_public")
	n.NodePublicMd5 = field.NewString(table, "node_public_md5")
	n.NodePrivate = field.NewString(table, "node_private")
	n.NodePrivateMd5 = field.NewString(table, "node_private_md5")
	n.NodeAlgo = field.NewString(table, "node_algo")
	n.NodeStoreKey = field.NewString(table, "node_store_key")

	n.fillFieldMap()

	return n
}

func (n *nodeInfo) WithContext(ctx context.Context) INodeInfoDo { return n.nodeInfoDo.WithContext(ctx) }

func (n nodeInfo) TableName() string { return n.nodeInfoDo.TableName() }

func (n nodeInfo) Alias() string { return n.nodeInfoDo.Alias() }

func (n nodeInfo) Columns(cols ...field.Expr) gen.Columns { return n.nodeInfoDo.Columns(cols...) }

func (n *nodeInfo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := n.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (n *nodeInfo) fillFieldMap() {
	n.fieldMap = make(map[string]field.Expr, 15)
	n.fieldMap["id"] = n.ID
	n.fieldMap["create_at"] = n.CreateAt
	n.fieldMap["update_at"] = n.UpdateAt
	n.fieldMap["delete_at"] = n.DeleteAt
	n.fieldMap["node_id"] = n.NodeID
	n.fieldMap["node_unit"] = n.NodeUnit
	n.fieldMap["node_deploy"] = n.NodeDeploy
	n.fieldMap["node_operation"] = n.NodeOperation
	n.fieldMap["login_code"] = n.LoginCode
	n.fieldMap["node_public"] = n.NodePublic
	n.fieldMap["node_public_md5"] = n.NodePublicMd5
	n.fieldMap["node_private"] = n.NodePrivate
	n.fieldMap["node_private_md5"] = n.NodePrivateMd5
	n.fieldMap["node_algo"] = n.NodeAlgo
	n.fieldMap["node_store_key"] = n.NodeStoreKey
}

func (n nodeInfo) clone(db *gorm.DB) nodeInfo {
	n.nodeInfoDo.ReplaceConnPool(db.Statement.ConnPool)
	return n
}

func (n nodeInfo) replaceDB(db *gorm.DB) nodeInfo {
	n.nodeInfoDo.ReplaceDB(db)
	return n
}

type nodeInfoDo struct{ gen.DO }

type INodeInfoDo interface {
	gen.SubQuery
	Debug() INodeInfoDo
	WithContext(ctx context.Context) INodeInfoDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() INodeInfoDo
	WriteDB() INodeInfoDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) INodeInfoDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) INodeInfoDo
	Not(conds ...gen.Condition) INodeInfoDo
	Or(conds ...gen.Condition) INodeInfoDo
	Select(conds ...field.Expr) INodeInfoDo
	Where(conds ...gen.Condition) INodeInfoDo
	Order(conds ...field.Expr) INodeInfoDo
	Distinct(cols ...field.Expr) INodeInfoDo
	Omit(cols ...field.Expr) INodeInfoDo
	Join(table schema.Tabler, on ...field.Expr) INodeInfoDo
	LeftJoin(table schema.Tabler, on ...field.Expr) INodeInfoDo
	RightJoin(table schema.Tabler, on ...field.Expr) INodeInfoDo
	Group(cols ...field.Expr) INodeInfoDo
	Having(conds ...gen.Condition) INodeInfoDo
	Limit(limit int) INodeInfoDo
	Offset(offset int) INodeInfoDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) INodeInfoDo
	Unscoped() INodeInfoDo
	Create(values ...*model.NodeInfo) error
	CreateInBatches(values []*model.NodeInfo, batchSize int) error
	Save(values ...*model.NodeInfo) error
	First() (*model.NodeInfo, error)
	Take() (*model.NodeInfo, error)
	Last() (*model.NodeInfo, error)
	Find() ([]*model.NodeInfo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeInfo, err error)
	FindInBatches(result *[]*model.NodeInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.NodeInfo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) INodeInfoDo
	Assign(attrs ...field.AssignExpr) INodeInfoDo
	Joins(fields ...field.RelationField) INodeInfoDo
	Preload(fields ...field.RelationField) INodeInfoDo
	FirstOrInit() (*model.NodeInfo, error)
	FirstOrCreate() (*model.NodeInfo, error)
	FindByPage(offset int, limit int) (result []*model.NodeInfo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) INodeInfoDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (n nodeInfoDo) Debug() INodeInfoDo {
	return n.withDO(n.DO.Debug())
}

func (n nodeInfoDo) WithContext(ctx context.Context) INodeInfoDo {
	return n.withDO(n.DO.WithContext(ctx))
}

func (n nodeInfoDo) ReadDB() INodeInfoDo {
	return n.Clauses(dbresolver.Read)
}

func (n nodeInfoDo) WriteDB() INodeInfoDo {
	return n.Clauses(dbresolver.Write)
}

func (n nodeInfoDo) Session(config *gorm.Session) INodeInfoDo {
	return n.withDO(n.DO.Session(config))
}

func (n nodeInfoDo) Clauses(conds ...clause.Expression) INodeInfoDo {
	return n.withDO(n.DO.Clauses(conds...))
}

func (n nodeInfoDo) Returning(value interface{}, columns ...string) INodeInfoDo {
	return n.withDO(n.DO.Returning(value, columns...))
}

func (n nodeInfoDo) Not(conds ...gen.Condition) INodeInfoDo {
	return n.withDO(n.DO.Not(conds...))
}

func (n nodeInfoDo) Or(conds ...gen.Condition) INodeInfoDo {
	return n.withDO(n.DO.Or(conds...))
}

func (n nodeInfoDo) Select(conds ...field.Expr) INodeInfoDo {
	return n.withDO(n.DO.Select(conds...))
}

func (n nodeInfoDo) Where(conds ...gen.Condition) INodeInfoDo {
	return n.withDO(n.DO.Where(conds...))
}

func (n nodeInfoDo) Order(conds ...field.Expr) INodeInfoDo {
	return n.withDO(n.DO.Order(conds...))
}

func (n nodeInfoDo) Distinct(cols ...field.Expr) INodeInfoDo {
	return n.withDO(n.DO.Distinct(cols...))
}

func (n nodeInfoDo) Omit(cols ...field.Expr) INodeInfoDo {
	return n.withDO(n.DO.Omit(cols...))
}

func (n nodeInfoDo) Join(table schema.Tabler, on ...field.Expr) INodeInfoDo {
	return n.withDO(n.DO.Join(table, on...))
}

func (n nodeInfoDo) LeftJoin(table schema.Tabler, on ...field.Expr) INodeInfoDo {
	return n.withDO(n.DO.LeftJoin(table, on...))
}

func (n nodeInfoDo) RightJoin(table schema.Tabler, on ...field.Expr) INodeInfoDo {
	return n.withDO(n.DO.RightJoin(table, on...))
}

func (n nodeInfoDo) Group(cols ...field.Expr) INodeInfoDo {
	return n.withDO(n.DO.Group(cols...))
}

func (n nodeInfoDo) Having(conds ...gen.Condition) INodeInfoDo {
	return n.withDO(n.DO.Having(conds...))
}

func (n nodeInfoDo) Limit(limit int) INodeInfoDo {
	return n.withDO(n.DO.Limit(limit))
}

func (n nodeInfoDo) Offset(offset int) INodeInfoDo {
	return n.withDO(n.DO.Offset(offset))
}

func (n nodeInfoDo) Scopes(funcs ...func(gen.Dao) gen.Dao) INodeInfoDo {
	return n.withDO(n.DO.Scopes(funcs...))
}

func (n nodeInfoDo) Unscoped() INodeInfoDo {
	return n.withDO(n.DO.Unscoped())
}

func (n nodeInfoDo) Create(values ...*model.NodeInfo) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Create(values)
}

func (n nodeInfoDo) CreateInBatches(values []*model.NodeInfo, batchSize int) error {
	return n.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (n nodeInfoDo) Save(values ...*model.NodeInfo) error {
	if len(values) == 0 {
		return nil
	}
	return n.DO.Save(values)
}

func (n nodeInfoDo) First() (*model.NodeInfo, error) {
	if result, err := n.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeInfo), nil
	}
}

func (n nodeInfoDo) Take() (*model.NodeInfo, error) {
	if result, err := n.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeInfo), nil
	}
}

func (n nodeInfoDo) Last() (*model.NodeInfo, error) {
	if result, err := n.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeInfo), nil
	}
}

func (n nodeInfoDo) Find() ([]*model.NodeInfo, error) {
	result, err := n.DO.Find()
	return result.([]*model.NodeInfo), err
}

func (n nodeInfoDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.NodeInfo, err error) {
	buf := make([]*model.NodeInfo, 0, batchSize)
	err = n.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (n nodeInfoDo) FindInBatches(result *[]*model.NodeInfo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return n.DO.FindInBatches(result, batchSize, fc)
}

func (n nodeInfoDo) Attrs(attrs ...field.AssignExpr) INodeInfoDo {
	return n.withDO(n.DO.Attrs(attrs...))
}

func (n nodeInfoDo) Assign(attrs ...field.AssignExpr) INodeInfoDo {
	return n.withDO(n.DO.Assign(attrs...))
}

func (n nodeInfoDo) Joins(fields ...field.RelationField) INodeInfoDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Joins(_f))
	}
	return &n
}

func (n nodeInfoDo) Preload(fields ...field.RelationField) INodeInfoDo {
	for _, _f := range fields {
		n = *n.withDO(n.DO.Preload(_f))
	}
	return &n
}

func (n nodeInfoDo) FirstOrInit() (*model.NodeInfo, error) {
	if result, err := n.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeInfo), nil
	}
}

func (n nodeInfoDo) FirstOrCreate() (*model.NodeInfo, error) {
	if result, err := n.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.NodeInfo), nil
	}
}

func (n nodeInfoDo) FindByPage(offset int, limit int) (result []*model.NodeInfo, count int64, err error) {
	result, err = n.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = n.Offset(-1).Limit(-1).Count()
	return
}

func (n nodeInfoDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = n.Count()
	if err != nil {
		return
	}

	err = n.Offset(offset).Limit(limit).Scan(result)
	return
}

func (n nodeInfoDo) Scan(result interface{}) (err error) {
	return n.DO.Scan(result)
}

func (n nodeInfoDo) Delete(models ...*model.NodeInfo) (result gen.ResultInfo, err error) {
	return n.DO.Delete(models)
}

func (n *nodeInfoDo) withDO(do gen.Dao) *nodeInfoDo {
	n.DO = *do.(*gen.DO)
	return n
}
